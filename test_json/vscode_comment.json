{
  // 控制是否在编辑器中显示 CodeLens。
  "diffEditor.codeLens": false,

  //
  //  - smart: 使用默认的差异算法。
  //  - experimental: 使用实验性差异算法。
  "diffEditor.diffAlgorithm": "smart",

  // 启用后，差异编辑器将忽略前导空格或尾随空格中的更改。
  "diffEditor.ignoreTrimWhitespace": true,

  // 超时(以毫秒为单位)，之后将取消差异计算。使用0表示没有超时。
  "diffEditor.maxComputationTime": 5000,

  // 要为其计算差异的最大文件大小(MB)。使用 0 表示无限制。
  "diffEditor.maxFileSize": 50,

  // 控制差异编辑器是否为添加/删除的更改显示 +/- 指示符号。
  "diffEditor.renderIndicators": true,

  // 启用后，差异编辑器会在其字形边距中显示箭头以还原更改。
  "diffEditor.renderMarginRevertIcon": true,

  // 控制差异编辑器的显示方式是并排还是内联。
  "diffEditor.renderSideBySide": true,

  //
  //  - off: 永不换行。
  //  - on: 将在视区宽度处换行。
  //  - inherit: 行将根据 `editor.wordWrap` 设置进行换行。
  "diffEditor.wordWrap": "inherit",

  // 控制是否应在遇到提交字符时接受建议。例如，在 JavaScript 中，半角分号 (`;`) 可以为提交字符，能够在接受建议的同时键入该字符。
  "editor.acceptSuggestionOnCommitCharacter": true,

  // 控制除了 `Tab` 键以外， `Enter` 键是否同样可以接受建议。这能减少“插入新行”和“接受建议”命令之间的歧义。
  //  - on
  //  - smart: 仅当建议包含文本改动时才可使用 `Enter` 键进行接受。
  //  - off
  "editor.acceptSuggestionOnEnter": "on",

  // 控制编辑器中可由屏幕阅读器一次读出的行数。我们检测到屏幕阅读器时，会自动将默认值设置为 500。警告: 如果行数大于默认值，可能会影响性能。
  "editor.accessibilityPageSize": 10,

  // 控制 UI 是否应在已针对屏幕阅读器进行优化的模式下运行。
  //  - auto: 连接屏幕阅读器后使用平台 API 进行检测
  //  - on: 针对屏幕阅读器的使用进行优化
  //  - off: 假定未连接屏幕阅读器
  "editor.accessibilitySupport": "auto",

  // 控制编辑器是否在左括号后自动插入右括号。
  //  - always
  //  - languageDefined: 使用语言配置确定何时自动闭合括号。
  //  - beforeWhitespace: 仅当光标位于空白字符左侧时，才自动闭合括号。
  //  - never
  "editor.autoClosingBrackets": "languageDefined",

  // 控制在删除时编辑器是否应删除相邻的右引号或右方括号。
  //  - always
  //  - auto: 仅在自动插入时才删除相邻的右引号或右括号。
  //  - never
  "editor.autoClosingDelete": "auto",

  // 控制编辑器是否应改写右引号或右括号。
  //  - always
  //  - auto: 仅在自动插入时才改写右引号或右括号。
  //  - never
  "editor.autoClosingOvertype": "auto",

  // 控制编辑器是否在左引号后自动插入右引号。
  //  - always
  //  - languageDefined: 使用语言配置确定何时自动闭合引号。
  //  - beforeWhitespace: 仅当光标位于空白字符左侧时，才自动闭合引号。
  //  - never
  "editor.autoClosingQuotes": "languageDefined",

  // 控制编辑器是否应在用户键入、粘贴、移动或缩进行时自动调整缩进。
  //  - none: 编辑器不会自动插入缩进。
  //  - keep: 编辑器将保留当前行的缩进。
  //  - brackets: 编辑器将保留当前行的缩进并遵循语言定义的括号。
  //  - advanced: 编辑器将保留当前行的缩进、使用语言定义的括号并调用语言定义的特定 onEnterRules。
  //  - full: 编辑器将保留当前行的缩进，使用语言定义的括号，调用由语言定义的特殊输入规则，并遵循由语言定义的缩进规则。
  "editor.autoIndent": "full",

  // 控制在键入引号或方括号时，编辑器是否应自动将所选内容括起来。
  //  - languageDefined: 使用语言配置确定何时自动包住所选内容。
  //  - quotes: 使用引号而非括号来包住所选内容。
  //  - brackets: 使用括号而非引号来包住所选内容。
  //  - never
  "editor.autoSurround": "languageDefined",

  // 控制是否启用括号对着色。请使用 `workbench.colorCustomizations` 重写括号突出显示颜色。
  "editor.bracketPairColorization.enabled": true,

  // 控制每个方括号类型是否具有自己的独立颜色池。
  "editor.bracketPairColorization.independentColorPoolPerBracketType": false,

  // 要在保存时运行的代码操作种类。
  "editor.codeActionsOnSave": {},

  // 启用/禁用在代码操作菜单中显示组标头。
  "editor.codeActionWidget.showHeaders": true,

  // 控制是否在编辑器中显示 CodeLens。
  "editor.codeLens": true,

  // 控制 CodeLens 的字体系列。
  "editor.codeLensFontFamily": "",

  // 控制 CodeLens 的字号(以像素为单位)。设置为 0 时，将使用 90% 的 `editor.fontSize`。
  "editor.codeLensFontSize": 0,

  // 控制编辑器是否显示内联颜色修饰器和颜色选取器。
  "editor.colorDecorators": true,

  // 控制可一次性在编辑器中呈现的最大颜色修饰器数。
  "editor.colorDecoratorsLimit": 500,

  // 启用使用鼠标和键进行列选择。
  "editor.columnSelection": false,

  // 控制在对行注释执行切换、添加或删除操作时，是否应忽略空行。
  "editor.comments.ignoreEmptyLines": true,

  // 控制在注释时是否插入空格字符。
  "editor.comments.insertSpace": true,

  // 控制在复制时是否同时复制语法高亮。
  "editor.copyWithSyntaxHighlighting": true,

  // 控制光标的动画样式。
  "editor.cursorBlinking": "blink",

  // 控制是否启用平滑插入动画。
  //  - off: 已禁用平滑脱字号动画。
  //  - explicit: 仅当用户使用显式手势移动光标时，才启用平滑脱字号动画。
  //  - on: 始终启用平滑脱字号动画。
  "editor.cursorSmoothCaretAnimation": "off",

  // 控制光标样式。
  "editor.cursorStyle": "line",

  // 控制光标周围可见的前置行(最小值为 0)和尾随行(最小值为 1)的最小数目。在其他一些编辑器中称为 “scrollOff” 或 “scrollOffset”。
  "editor.cursorSurroundingLines": 0,

  // 控制何时应强制执行"光标环绕行"。
  //  - default: 仅当通过键盘或 API 触发时，才会强制执行"光标环绕行"。
  //  - all: 始终强制执行 "cursorSurroundingLines"
  "editor.cursorSurroundingLinesStyle": "default",

  // 当 `editor.cursorStyle` 设置为 `line` 时，控制光标的宽度。
  "editor.cursorWidth": 0,

  // 定义优先于所有其他折叠范围提供程序的默认折叠范围提供程序。必须是提供折叠范围提供程序的扩展的标识符。
  //  - null: 所有活动折叠范围提供程序
  //  - dnicolson.binary-plist: Decodes binary plist files by opening a new tab with decoded XML and saving it back to binary on save.
  //  - josetr.cmake-language-support-vscode: CMake language support for VS Code.
  //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig
  //  - vscode.css-language-features: 为 CSS、LESS 和 SCSS 文件提供丰富的语言支持。
  //  - Wscats.eno: 🚀Easy to compile ts, tsx, scss, less, stylus, jade, pug and es6+ on save without using a build task.
  //  - codezombiech.gitignore: Lets you pull .gitignore templates from the https://github.com/github/gitignore repository. Language support for .gitignore files.
  //  - haskell.haskell: Haskell language support powered by the Haskell Language Server
  //  - vscode.html-language-features: 为 HTML 和 Handlebar 文件提供丰富的语言支持
  //  - ms-python.isort: Import Organization support for python files using `isort`.
  //  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
  //  - vscode.json-language-features: 为 JSON 文件提供丰富的语言支持
  //  - justusadam.language-haskell: Syntax support for the Haskell programming language.
  //  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - yzhang.markdown-all-in-one: 使用 Markdown 所需要的一切（快捷键，目录，自动预览以及更多功能）
  //  - vscode.markdown-language-features: 为 Markdown 提供丰富的语言支持。
  //  - xsro.masm-tasm: run MASM/TASM assembly in DOSBox 汇编语言开发插件
  //  - Gimly81.matlab: MATLAB support for Visual Studio Code
  //  - apommel.matlab-interactive-terminal: Interactive MATLAB terminal for Visual Studio Code, compatible with Windows, Mac and Linux
  //  - josee9988.minifyall: Minifier for JSON, CSS, HTML, XML, TWIG, LESS, SASS, SCSS, JavaScript, JSONC, and JavaScriptReact(testing). Compressor of files and folders. You will love its simplicity!
  //  - crazyurus.miniprogram-vscode-extension: 提供小程序预览、打包上传、代码补全、语法高亮、项目模版等功能
  //  - vscode.php-language-features: 为 PHP 文件提供丰富的语言支持。
  //  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
  //  - vscode.references-view: 在边栏中以独立稳定的视图引用搜索结果
  //  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
  //  - vscode.search-result: 为选项卡搜索结果中提供语法突出显示和语言功能。
  //  - Jeff-Tian.tex-workshop: Boost TeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - vscode.typescript-language-features: 为 JavaScript 和 TypeScript 提供丰富的语言支持。
  //  - octref.vetur: Vue tooling for VS Code
  //  - Vue.volar: Language support for Vue 3
  //  - ecmel.vscode-html-css: CSS Intellisense for HTML
  //  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
  //  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
  //  - vscjava.vscode-maven: 管理 Maven 项目，执行命令，从原型生成项目，改善 Java 开发人员的用户体验。
  //  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
  //  - redhat.vscode-xml: XML Language Support by Red Hat
  //  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
  //  - bungcip.better-toml: Better TOML Language support
  //  - twxs.cmake: CMake langage support for Visual Studio Code
  //  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
  //  - vscode.configuration-editing: 在配置文件 (如设置、启动和扩展推荐文件) 中提供高级 IntelliSense、自动修复等功能
  //  - ms-vscode.cpptools-extension-pack: Popular extensions for C++ development in Visual Studio Code.
  //  - phplasma.csv-to-table: Convert a CSV/TSV/PSV file to an ASCII formatted table
  //  - vscode.debug-auto-launch: 当 node-debug 扩展未启用时提供自动附加的辅助程序。
  //  - vscode.debug-server-ready: 如果正在调试的服务器已准备就绪，在浏览器中打开 URI。
  //  - cschlosser.doxdocgen: Let me generate Doxygen documentation from your source code for you.
  //  - mrcrowl.easy-less: Auto-compile LESS to CSS on save
  //  - vscode.emmet: 适用于 VS Code 的 Emmet 支持
  //  - vscode.extension-editing: 在创建扩展时提供 linting 功能。
  //  - vscode.git: Git 源代码管理集成
  //  - vscode.git-base: Git 静态贡献和选取器。
  //  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
  //  - vscode.github: 适用于 VS Code 的 GitHub 功能
  //  - vscode.github-authentication: GitHub 身份验证提供程序
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: 向 VSCode 提供 Gulp 功能的扩展。
  //  - ms-vscode.hexeditor: Allows viewing and editing files in a hex editor
  //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
  //  - k--kato.intellij-idea-keybindings: Port of IntelliJ IDEA Keybindings, including for WebStorm, PyCharm, PHP Storm, etc.
  //  - vscode.ipynb: 为打开和读取 Jupyter 的 .ipynb 笔记本文件提供基本支持
  //  - vscode.jake: 向 VS Code 提供 Jake 功能的扩展。
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
  //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - vscode.markdown-math: 在笔记本中向 Markdown 添加数学支持。
  //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
  //  - zhuangtongfa.material-theme: Atom‘s iconic One Dark theme for Visual Studio Code
  //  - bramvanbilsen.matlab-code-run: Enables code execution in VS Code via integrated terminal
  //  - AffenWiesel.matlab-formatter: format matlab code
  //  - vscode.media-preview: 为图像、音频和视频提供 VS Code 的内置预览
  //  - vscode.merge-conflict: 为内联合并冲突提供高亮和命令。
  //  - vscode.microsoft-authentication: Microsoft 身份验证提供程序
  //  - vscode.npm: 为 npm 脚本提供任务支持的扩展。
  //  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
  //  - 2gua.rainbow-brackets: A rainbow brackets extension for VS Code.
  //  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
  //  - ms-vscode.remote-explorer: 查看远程 - SSH 和远程服务器的远程计算机。
  //  - ms-vscode.remote-server: 通过 VS Code 隧道连接到远程计算机
  //  - ms-vscode-remote.remote-ssh: Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.
  //  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
  //  - ms-vscode-remote.remote-wsl-recommender: Recommends using the Windows Subsystem for Linux (WSL) and the WSL extension.
  //  - vscode.simple-browser: 一个非常基本的内置 Web 视图，用于显示 Web 内容。
  //  - shardulm94.trailing-spaces: Highlight trailing spaces and delete them in a flash!
  //  - redhat.vscode-commons: Base utilities for Red Hat extensions. Notably controls telemetry settings.
  //  - aeschli.vscode-css-formatter: Formatter for CSS
  //  - deerawan.vscode-dash: Dash, Zeal and Velocity integration in Visual Studio Code
  //  - xsro.vscode-dosbox: DOSBox interface for VSCode
  //  - ms-dotnettools.vscode-dotnet-runtime: Allows acquisition of the .NET runtime specifically for VS Code extension authors.
  //  - mjmcloug.vscode-elixir: Elixir support for VSCode
  //  - vscode-icons-team.vscode-icons: Icons for Visual Studio Code
  //  - vscjava.vscode-java-dependency: 在 Visual Studio Code 中管理 Java 项目
  //  - vscjava.vscode-java-test: 运行并调试 JUnit 或 TestNG 测试用例
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
  //  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
  //  - sjhuangx.vscode-scheme: Scheme language support for VSCode
  //  - clarkyu.vscode-sql-beautify: More Powerful extension that beautifies SQL/一键美化你的SQL
  //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
  //  - wayou.vscode-todo-highlight: highlight TODOs, FIXMEs, and any keywords, annotations...
  //  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
  //  - ms-vscode.wordcount: Markdown Word Count Example - a status bar contribution that reports out the number of works in a Markdown document as you interact with it.
  "editor.defaultFoldingRangeProvider": null,

  // 定义一个默认格式化程序, 该格式化程序优先于所有其他格式化程序设置。必须是提供格式化程序的扩展的标识符。
  //  - null: 没有
  //  - dnicolson.binary-plist: Decodes binary plist files by opening a new tab with decoded XML and saving it back to binary on save.
  //  - josetr.cmake-language-support-vscode: CMake language support for VS Code.
  //  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig
  //  - vscode.css-language-features: 为 CSS、LESS 和 SCSS 文件提供丰富的语言支持。
  //  - Wscats.eno: 🚀Easy to compile ts, tsx, scss, less, stylus, jade, pug and es6+ on save without using a build task.
  //  - codezombiech.gitignore: Lets you pull .gitignore templates from the https://github.com/github/gitignore repository. Language support for .gitignore files.
  //  - haskell.haskell: Haskell language support powered by the Haskell Language Server
  //  - vscode.html-language-features: 为 HTML 和 Handlebar 文件提供丰富的语言支持
  //  - ms-python.isort: Import Organization support for python files using `isort`.
  //  - redhat.java: Java Linting, Intellisense, formatting, refactoring, Maven/Gradle support and more...
  //  - vscode.json-language-features: 为 JSON 文件提供丰富的语言支持
  //  - justusadam.language-haskell: Syntax support for the Haskell programming language.
  //  - James-Yu.latex-workshop: Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - yzhang.markdown-all-in-one: 使用 Markdown 所需要的一切（快捷键，目录，自动预览以及更多功能）
  //  - vscode.markdown-language-features: 为 Markdown 提供丰富的语言支持。
  //  - xsro.masm-tasm: run MASM/TASM assembly in DOSBox 汇编语言开发插件
  //  - Gimly81.matlab: MATLAB support for Visual Studio Code
  //  - apommel.matlab-interactive-terminal: Interactive MATLAB terminal for Visual Studio Code, compatible with Windows, Mac and Linux
  //  - josee9988.minifyall: Minifier for JSON, CSS, HTML, XML, TWIG, LESS, SASS, SCSS, JavaScript, JSONC, and JavaScriptReact(testing). Compressor of files and folders. You will love its simplicity!
  //  - crazyurus.miniprogram-vscode-extension: 提供小程序预览、打包上传、代码补全、语法高亮、项目模版等功能
  //  - vscode.php-language-features: 为 PHP 文件提供丰富的语言支持。
  //  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
  //  - vscode.references-view: 在边栏中以独立稳定的视图引用搜索结果
  //  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
  //  - vscode.search-result: 为选项卡搜索结果中提供语法突出显示和语言功能。
  //  - Jeff-Tian.tex-workshop: Boost TeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.
  //  - vscode.typescript-language-features: 为 JavaScript 和 TypeScript 提供丰富的语言支持。
  //  - octref.vetur: Vue tooling for VS Code
  //  - Vue.volar: Language support for Vue 3
  //  - aeschli.vscode-css-formatter: Formatter for CSS
  //  - ecmel.vscode-html-css: CSS Intellisense for HTML
  //  - vscjava.vscode-java-debug: A lightweight Java debugger for Visual Studio Code
  //  - vscjava.vscode-java-pack: Popular extensions for Java development that provides Java IntelliSense, debugging, testing, Maven/Gradle support, project management and more
  //  - vscjava.vscode-maven: 管理 Maven 项目，执行命令，从原型生成项目，改善 Java 开发人员的用户体验。
  //  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
  //  - clarkyu.vscode-sql-beautify: More Powerful extension that beautifies SQL/一键美化你的SQL
  //  - redhat.vscode-xml: XML Language Support by Red Hat
  //  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
  //  - bungcip.better-toml: Better TOML Language support
  //  - twxs.cmake: CMake langage support for Visual Studio Code
  //  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
  //  - vscode.configuration-editing: 在配置文件 (如设置、启动和扩展推荐文件) 中提供高级 IntelliSense、自动修复等功能
  //  - ms-vscode.cpptools-extension-pack: Popular extensions for C++ development in Visual Studio Code.
  //  - phplasma.csv-to-table: Convert a CSV/TSV/PSV file to an ASCII formatted table
  //  - vscode.debug-auto-launch: 当 node-debug 扩展未启用时提供自动附加的辅助程序。
  //  - vscode.debug-server-ready: 如果正在调试的服务器已准备就绪，在浏览器中打开 URI。
  //  - cschlosser.doxdocgen: Let me generate Doxygen documentation from your source code for you.
  //  - mrcrowl.easy-less: Auto-compile LESS to CSS on save
  //  - vscode.emmet: 适用于 VS Code 的 Emmet 支持
  //  - vscode.extension-editing: 在创建扩展时提供 linting 功能。
  //  - vscode.git: Git 源代码管理集成
  //  - vscode.git-base: Git 静态贡献和选取器。
  //  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
  //  - vscode.github: 适用于 VS Code 的 GitHub 功能
  //  - vscode.github-authentication: GitHub 身份验证提供程序
  //  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
  //  - vscode.gulp: 向 VSCode 提供 Gulp 功能的扩展。
  //  - ms-vscode.hexeditor: Allows viewing and editing files in a hex editor
  //  - VisualStudioExptTeam.intellicode-api-usage-examples: See relevant code examples from GitHub for over 100K different APIs right in your editor.
  //  - k--kato.intellij-idea-keybindings: Port of IntelliJ IDEA Keybindings, including for WebStorm, PyCharm, PHP Storm, etc.
  //  - vscode.ipynb: 为打开和读取 Jupyter 的 .ipynb 笔记本文件提供基本支持
  //  - vscode.jake: 向 VS Code 提供 Jake 功能的扩展。
  //  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
  //  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
  //  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
  //  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, gif, png, svg, jpeg and other such outputs)
  //  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
  //  - vscode.markdown-math: 在笔记本中向 Markdown 添加数学支持。
  //  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
  //  - zhuangtongfa.material-theme: Atom‘s iconic One Dark theme for Visual Studio Code
  //  - bramvanbilsen.matlab-code-run: Enables code execution in VS Code via integrated terminal
  //  - AffenWiesel.matlab-formatter: format matlab code
  //  - vscode.media-preview: 为图像、音频和视频提供 VS Code 的内置预览
  //  - vscode.merge-conflict: 为内联合并冲突提供高亮和命令。
  //  - vscode.microsoft-authentication: Microsoft 身份验证提供程序
  //  - vscode.npm: 为 npm 脚本提供任务支持的扩展。
  //  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
  //  - 2gua.rainbow-brackets: A rainbow brackets extension for VS Code.
  //  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
  //  - ms-vscode.remote-explorer: 查看远程 - SSH 和远程服务器的远程计算机。
  //  - ms-vscode.remote-server: 通过 VS Code 隧道连接到远程计算机
  //  - ms-vscode-remote.remote-ssh: Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.
  //  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
  //  - ms-vscode-remote.remote-wsl-recommender: Recommends using the Windows Subsystem for Linux (WSL) and the WSL extension.
  //  - vscode.simple-browser: 一个非常基本的内置 Web 视图，用于显示 Web 内容。
  //  - shardulm94.trailing-spaces: Highlight trailing spaces and delete them in a flash!
  //  - redhat.vscode-commons: Base utilities for Red Hat extensions. Notably controls telemetry settings.
  //  - deerawan.vscode-dash: Dash, Zeal and Velocity integration in Visual Studio Code
  //  - xsro.vscode-dosbox: DOSBox interface for VSCode
  //  - ms-dotnettools.vscode-dotnet-runtime: Allows acquisition of the .NET runtime specifically for VS Code extension authors.
  //  - mjmcloug.vscode-elixir: Elixir support for VSCode
  //  - vscode-icons-team.vscode-icons: Icons for Visual Studio Code
  //  - vscjava.vscode-java-dependency: 在 Visual Studio Code 中管理 Java 项目
  //  - vscjava.vscode-java-test: 运行并调试 JUnit 或 TestNG 测试用例
  //  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
  //  - ms-toolsai.vscode-jupyter-cell-tags: Jupyter Cell Tags support for VS Code
  //  - ms-toolsai.vscode-jupyter-slideshow: Jupyter Slide Show support for VS Code
  //  - sjhuangx.vscode-scheme: Scheme language support for VSCode
  //  - bradlc.vscode-tailwindcss: Intelligent Tailwind CSS tooling for VS Code
  //  - wayou.vscode-todo-highlight: highlight TODOs, FIXMEs, and any keywords, annotations...
  //  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
  //  - ms-vscode.wordcount: Markdown Word Count Example - a status bar contribution that reports out the number of works in a Markdown document as you interact with it.
  "editor.defaultFormatter": null,

  // 控制"转到定义"鼠标手势是否始终打开预览小部件。
  "editor.definitionLinkOpensInPeek": false,

  // 控制在基于文件内容打开文件时是否自动检测 `editor.tabSize#` 和 `#editor.insertSpaces`。
  "editor.detectIndentation": true,

  // 控制在编辑器中是否允许通过拖放来移动选中内容。
  "editor.dragAndDrop": true,

  // 控制是否可以通过按住 `Shift` (而不是在编辑器中打开文件)将文件拖放到编辑器中。
  "editor.dropIntoEditor.enabled": true,

  // 控制在没有选择内容时进行复制是否复制当前行。
  "editor.emptySelectionClipboard": true,

  // 启用/禁用粘贴时从扩展运行编辑。
  "editor.experimental.pasteActions.enabled": false,

  // 控制是否使用新的实验性方法呈现空格。
  //  - svg: 将新的呈现方法与 svg 配合使用。
  //  - font: 使用包含字体字符的新呈现方法。
  //  - off: 使用稳定呈现方法。
  "editor.experimentalWhitespaceRendering": "svg",

  // 按下"Alt"时滚动速度倍增。
  "editor.fastScrollSensitivity": 5,

  // 控制 "查找小部件" 是否应在编辑器顶部添加额外的行。如果为 true, 则可以在 "查找小工具" 可见时滚动到第一行之外。
  "editor.find.addExtraSpaceOnTop": true,

  // 控制自动打开“在选定内容中查找”的条件。
  //  - never: 从不自动打开“在选定内容中查找”(默认)。
  //  - always: 始终自动打开“在选定内容中查找”。
  //  - multiline: 选择多行内容时，自动打开“在选定内容中查找”。
  "editor.find.autoFindInSelection": "never",

  // 控制在键入时光标是否应跳转以查找匹配项。
  "editor.find.cursorMoveOnType": true,

  // 控制在找不到其他匹配项时，是否自动从开头(或结尾)重新开始搜索。
  "editor.find.loop": true,

  // 控制是否将编辑器选中内容作为搜索词填入到查找小组件中。
  //  - never: 切勿为编辑器选择中的搜索字符串设定种子。
  //  - always: 始终为编辑器选择中的搜索字符串设定种子，包括光标位置的字词。
  //  - selection: 仅为编辑器选择中的搜索字符串设定种子。
  "editor.find.seedSearchStringFromSelection": "always",

  // 控制编辑器是否启用了代码折叠。
  "editor.folding": true,

  // 控制编辑器是否应突出显示折叠范围。
  "editor.foldingHighlight": true,

  // 控制编辑器是否自动折叠导入范围。
  "editor.foldingImportsByDefault": false,

  // 可折叠区域的最大数量。如果当前源具有大量可折叠区域，那么增加此值可能会导致编辑器的响应速度变慢。
  "editor.foldingMaximumRegions": 5000,

  // 控制计算折叠范围的策略。
  //  - auto: 使用特定于语言的折叠策略(如果可用)，否则使用基于缩进的策略。
  //  - indentation: 使用基于缩进的折叠策略。
  "editor.foldingStrategy": "auto",

  // 控制字体系列。
  "editor.fontFamily": "Consolas, 'Courier New', monospace",

  // 配置字体连字或字体特性。可以是用于启用/禁用连字的布尔值，或用于设置 CSS "font-feature-settings" 属性值的字符串。
  "editor.fontLigatures": false,

  // 控制字体大小(像素)。
  "editor.fontSize": 14,

  // 配置字体变体。可以是用于启用/禁用从 font-weight 到 font-variation-settings 的转换的布尔值，也可以是 CSS“font-variation-settings”属性值的字符串。
  "editor.fontVariations": false,

  // 控制字体粗细。接受关键字“正常”和“加粗”，或者接受介于 1 至 1000 之间的数字。
  "editor.fontWeight": "normal",

  // 控制编辑器是否自动格式化粘贴的内容。格式化程序必须可用，并且能针对文档中的某一范围进行格式化。
  "editor.formatOnPaste": false,

  // 在保存时格式化文件。格式化程序必须可用，延迟后文件不能保存，并且编辑器不能关闭。
  "editor.formatOnSave": false,

  // 控制在保存时设置格式是设置整个文件格式还是仅设置修改内容的格式。仅当 "#editor.formatOnSave#" 处于启用状态时适用。
  //  - file: 设置整个文件的格式。
  //  - modifications: 格式修改(需要源代码管理)。
  //  - modificationsIfAvailable: 将尝试只对修改进行格式化(需要源代码管理)。如果无法使用源代码管理，则将格式化整个文件。
  "editor.formatOnSaveMode": "file",

  // 控制编辑器在键入一行后是否自动格式化该行。
  "editor.formatOnType": false,

  // 控制编辑器是否应呈现垂直字形边距。字形边距最常用于调试。
  "editor.glyphMargin": true,

  // 当"转到声明"的结果为当前位置时将要执行的替代命令的 ID。
  "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

  // 当"转到定义"的结果为当前位置时将要执行的替代命令的 ID。
  "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

  // 当"转到实现"的结果为当前位置时将要执行的替代命令的 ID。
  "editor.gotoLocation.alternativeImplementationCommand": "",

  // 当"转到引用"的结果是当前位置时正在执行的替代命令 ID。
  "editor.gotoLocation.alternativeReferenceCommand": "",

  // 当"转到类型定义"的结果是当前位置时正在执行的备用命令 ID。
  "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

  // 此设置已弃用，请改用单独的设置，如"editor.editor.gotoLocation.multipleDefinitions"或"editor.editor.gotoLocation.multipleImplementations"。
  //
  "editor.gotoLocation.multiple": null,

  // 控制存在多个目标位置时"转到声明"命令的行为。
  //  - peek: 显示结果的速览视图(默认)
  //  - gotoAndPeek: 转到主结果并显示速览视图
  //  - goto: 转到主结果，并对其他结果启用无速览导航
  "editor.gotoLocation.multipleDeclarations": "peek",

  // 控制存在多个目标位置时"转到定义"命令的行为。
  //  - peek: 显示结果的速览视图(默认)
  //  - gotoAndPeek: 转到主结果并显示速览视图
  //  - goto: 转到主结果，并对其他结果启用无速览导航
  "editor.gotoLocation.multipleDefinitions": "peek",

  // 控制存在多个目标位置时"转到实现"命令的行为。
  //  - peek: 显示结果的速览视图(默认)
  //  - gotoAndPeek: 转到主结果并显示速览视图
  //  - goto: 转到主结果，并对其他结果启用无速览导航
  "editor.gotoLocation.multipleImplementations": "peek",

  // 控制存在多个目标位置时"转到引用"命令的行为。
  //  - peek: 显示结果的速览视图(默认)
  //  - gotoAndPeek: 转到主结果并显示速览视图
  //  - goto: 转到主结果，并对其他结果启用无速览导航
  "editor.gotoLocation.multipleReferences": "peek",

  // 控制存在多个目标位置时"转到类型定义"命令的行为。
  //  - peek: 显示结果的速览视图(默认)
  //  - gotoAndPeek: 转到主结果并显示速览视图
  //  - goto: 转到主结果，并对其他结果启用无速览导航
  "editor.gotoLocation.multipleTypeDefinitions": "peek",

  // 控制是否启用括号对指南。
  //  - true: 启用括号对参考线。
  //  - active: 仅为活动括号对启用括号对参考线。
  //  - false: 禁用括号对参考线。
  "editor.guides.bracketPairs": false,

  // 控制是否启用水平括号对指南。
  //  - true: 启用水平参考线作为垂直括号对参考线的添加项。
  //  - active: 仅为活动括号对启用水平参考线。
  //  - false: 禁用水平括号对参考线。
  "editor.guides.bracketPairsHorizontal": "active",

  // 控制编辑器是否应突出显示活动的括号对。
  "editor.guides.highlightActiveBracketPair": true,

  // 控制是否突出显示编辑器中活动的缩进参考线。
  //  - true: 突出显示活动缩进参考线。
  //  - always: 突出显示活动缩进参考线，即使突出显示了括号参考线。
  //  - false: 不要突出显示活动缩进参考线。
  "editor.guides.highlightActiveIndentation": true,

  // 控制编辑器是否显示缩进参考线。
  "editor.guides.indentation": true,

  // 控制是否在概览标尺中隐藏光标。
  "editor.hideCursorInOverviewRuler": false,

  // 如果有空间，首选在线条上方显示悬停。
  "editor.hover.above": true,

  // 控制显示悬停提示前的等待时间 (毫秒)。
  "editor.hover.delay": 300,

  // 控制是否显示悬停提示。
  "editor.hover.enabled": true,

  // 控制当鼠标移动到悬停提示上时，其是否保持可见。
  "editor.hover.sticky": true,

  // 用于缩进或 `"tabSize"` 的空格数，可使用 `editor.tabSize#` 中的值。当 `#editor.detectIndentation` 处于打开状态时，将根据文件内容替代此设置。
  "editor.indentSize": "tabSize",

  // 在编辑器中启用内联提示。
  //  - on: 已启用内嵌提示
  //  - onUnlessPressed: 默认情况下显示内嵌提示，并在按住 Ctrl+Alt 时隐藏
  //  - offUnlessPressed: 默认情况下隐藏内嵌提示，并在按住 Ctrl+Alt 时显示
  //  - off: 已禁用内嵌提示
  "editor.inlayHints.enabled": "on",

  // 控制编辑器中嵌入提示的字体系列。设置为空时，将使用 `editor.fontFamily`。
  "editor.inlayHints.fontFamily": "",

  // 控制编辑器中嵌入提示的字号。默认情况下，当配置的值小于 `5` 或大于编辑器字号时，将使用 `editor.fontSize`。
  "editor.inlayHints.fontSize": 0,

  // 在编辑器中启用叠加提示周围的填充。
  "editor.inlayHints.padding": false,

  // 控制是否在编辑器中自动显示内联建议。
  "editor.inlineSuggest.enabled": true,

  // 控制何时显示内联建议工具栏。
  //  - always: 每当显示内联建议时，显示内联建议工具栏。
  //  - onHover: 将鼠标悬停在内联建议上时显示内联建议工具栏。
  "editor.inlineSuggest.showToolbar": "onHover",

  // 按 `Tab` 时插入空格。当 `editor.detectIndentation` 打开时，将根据文件内容替代此设置。
  "editor.insertSpaces": true,

  // 定义增加和减少缩进的括号。
  "editor.language.brackets": null,

  // 如果启用方括号对着色，则按照其嵌套级别定义已着色的方括号对。
  "editor.language.colorizedBracketPairs": null,

  // 对大型文件进行特殊处理，禁用某些内存密集型功能。
  "editor.largeFileOptimizations": true,

  // 控制字母间距(像素)。
  "editor.letterSpacing": 0,

  // 在编辑器中启用代码操作小灯泡提示。
  "editor.lightbulb.enabled": true,

  // 控制行高。
  //  - 使用 0 根据字号自动计算行高。
  //  - 介于 0 和 8 之间的值将用作字号的乘数。
  //  - 大于或等于 8 的值将用作有效值。
  "editor.lineHeight": 0,

  // 控制行号的显示。
  //  - off: 不显示行号。
  //  - on: 将行号显示为绝对行数。
  //  - relative: 将行号显示为与光标相隔的行数。
  //  - interval: 每 10 行显示一次行号。
  "editor.lineNumbers": "on",

  // 控制编辑器是否已启用链接编辑。相关符号(如 HTML 标记)将在编辑时进行更新，具体取决于语言。
  "editor.linkedEditing": false,

  // 控制是否在编辑器中检测链接并使其可被点击。
  "editor.links": true,

  // 突出显示匹配的括号。
  "editor.matchBrackets": "always",

  // 由于性能原因，超过这个长度的行将不会被标记
  "editor.maxTokenizationLineLength": 20000,

  // 控制是否自动隐藏缩略图。
  "editor.minimap.autohide": false,

  // 控制是否显示缩略图。
  "editor.minimap.enabled": true,

  // 限制缩略图的宽度，控制其最多显示的列数。
  "editor.minimap.maxColumn": 120,

  // 渲染每行的实际字符，而不是色块。
  "editor.minimap.renderCharacters": true,

  // 在迷你地图中绘制的内容比例: 1、2 或 3。
  "editor.minimap.scale": 1,

  // 控制何时显示迷你地图滑块。
  "editor.minimap.showSlider": "mouseover",

  // 控制在哪一侧显示缩略图。
  "editor.minimap.side": "right",

  // 控制迷你地图的大小。
  //  - proportional: 迷你地图的大小与编辑器内容相同(并且可能滚动)。
  //  - fill: 迷你地图将根据需要拉伸或缩小以填充编辑器的高度(不滚动)。
  //  - fit: 迷你地图将根据需要缩小，永远不会大于编辑器(不滚动)。
  "editor.minimap.size": "proportional",

  // 对鼠标滚轮滚动事件的 `deltaX` 和 `deltaY` 乘上的系数。
  "editor.mouseWheelScrollSensitivity": 1,

  // 按住 `Ctrl` 键并滚动鼠标滚轮时对编辑器字体大小进行缩放。
  "editor.mouseWheelZoom": false,

  // 控制一次可以在活动编辑器中显示的最大游标数。
  "editor.multiCursorLimit": 10000,

  // 当多个光标重叠时进行合并。
  "editor.multiCursorMergeOverlapping": true,

  // 用于使用鼠标添加多个游标的修饰符。“转到定义”和“打开链接”鼠标手势将进行调整，使其不与 [多光标修饰符](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)冲突。
  //  - ctrlCmd: 映射为 `Ctrl` (Windows 和 Linux) 或 `Command` (macOS)。
  //  - alt: 映射为 `Alt` (Windows 和 Linux) 或 `Option` (macOS)。
  "editor.multiCursorModifier": "alt",

  // 控制粘贴时粘贴文本的行计数与光标计数相匹配。
  //  - spread: 每个光标粘贴一行文本。
  //  - full: 每个光标粘贴全文。
  "editor.multiCursorPaste": "spread",

  // 控制编辑器是否突出显示语义符号的匹配项。
  "editor.occurrencesHighlight": true,

  // 控制是否在概览标尺周围绘制边框。
  "editor.overviewRulerBorder": true,

  // 控制编辑器的底边和最后一行之间的间距量。
  "editor.padding.bottom": 0,

  // 控制编辑器的顶边和第一行之间的间距量。
  "editor.padding.top": 0,

  // 控制参数提示菜单在到达列表末尾时进行循环还是关闭。
  "editor.parameterHints.cycle": true,

  // 在输入时显示含有参数文档和类型信息的小面板。
  "editor.parameterHints.enabled": true,

  // 控制是将焦点放在内联编辑器上还是放在预览小部件中的树上。
  //  - tree: 打开速览时聚焦树
  //  - editor: 打开预览时将焦点放在编辑器上
  "editor.peekWidgetDefaultFocus": "tree",

  // 控制键入时是否应自动显示建议。这可以用于在注释、字符串和其他代码中键入时进行控制。可配置快速建议以显示为虚影文本或建议小组件。另请注意控制建议是否由特殊字符触发的“#editor.suggestOnTriggerCharacters#”设置。
  "editor.quickSuggestions": {
    "other": "on",
    "comments": "off",
    "strings": "off"
  },

  // 控制显示快速建议前的等待时间 (毫秒)。
  "editor.quickSuggestionsDelay": 10,

  // 启用/禁用重命名之前预览更改的功能
  "editor.rename.enablePreview": true,

  // 已弃用，请改用 "editor.linkedEditing"。
  // 控制是否在编辑器中输入时自动重命名。
  "editor.renameOnType": false,

  // 控制编辑器是否显示控制字符。
  "editor.renderControlCharacters": true,

  // 当文件以换行符结束时, 呈现最后一行的行号。
  "editor.renderFinalNewline": "on",

  // 控制编辑器的当前行进行高亮显示的方式。
  //  - none
  //  - gutter
  //  - line
  //  - all: 同时突出显示导航线和当前行。
  "editor.renderLineHighlight": "line",

  // 控制编辑器是否仅在焦点在编辑器时突出显示当前行。
  "editor.renderLineHighlightOnlyWhenFocus": false,

  // 控制编辑器在空白字符上显示符号的方式。
  //  - none
  //  - boundary: 呈现空格字符(字词之间的单个空格除外)。
  //  - selection: 仅在选定文本上呈现空白字符。
  //  - trailing: 仅呈现尾随空格字符。
  //  - all
  "editor.renderWhitespace": "selection",

  // 控制选区是否有圆角。
  "editor.roundedSelection": true,

  // 在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。若数组为空，则不绘制标尺。
  "editor.rulers": [],

  // 控制水平滚动条的可见性。
  //  - auto: 水平滚动条仅在必要时可见。
  //  - visible: 水平滚动条将始终可见。
  //  - hidden: 水平滚动条将始终隐藏。
  "editor.scrollbar.horizontal": "auto",

  // 水平滚动条的高度。
  "editor.scrollbar.horizontalScrollbarSize": 12,

  // 控制单击按页滚动还是跳转到单击位置。
  "editor.scrollbar.scrollByPage": false,

  // 控制垂直滚动条的可见性。
  //  - auto: 垂直滚动条仅在必要时可见。
  //  - visible: 垂直滚动条将始终可见。
  //  - hidden: 垂直滚动条将始终隐藏。
  "editor.scrollbar.vertical": "auto",

  // 垂直滚动条的宽度。
  "editor.scrollbar.verticalScrollbarSize": 14,

  // 控制编辑器水平滚动时可以超过范围的字符数。
  "editor.scrollBeyondLastColumn": 4,

  // 控制编辑器是否可以滚动到最后一行之后。
  "editor.scrollBeyondLastLine": true,

  // 同时垂直和水平滚动时，仅沿主轴滚动。在触控板上垂直滚动时，可防止水平漂移。
  "editor.scrollPredominantAxis": true,

  // 控制编辑器是否应突出显示与所选内容类似的匹配项。
  "editor.selectionHighlight": true,

  // 控制是否为支持它的语言显示语义突出显示。
  //  - true: 对所有颜色主题启用语义突出显示。
  //  - false: 对所有颜色主题禁用语义突出显示。
  //  - configuredByTheme: 语义突出显示是由当前颜色主题的 "semanticHighlighting" 设置配置的。
  "editor.semanticHighlighting.enabled": "configuredByTheme",

  // 从当前所选颜色主题重写编辑器语义标记颜色和样式。
  "editor.semanticTokenColorCustomizations": {},

  // 控制加删除线被弃用的变量。
  "editor.showDeprecated": true,

  // 控制何时显示行号槽上的折叠控件。
  //  - always: 始终显示折叠控件。
  //  - never: 切勿显示折叠控件并减小装订线大小。
  //  - mouseover: 仅在鼠标位于装订线上方时显示折叠控件。
  "editor.showFoldingControls": "mouseover",

  // 控制是否淡化未使用的代码。
  "editor.showUnused": true,

  // 是否应始终选择前导和尾随空格。
  "editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

  // 控制编辑器是否使用动画滚动。
  "editor.smoothScrolling": false,

  // 控制外围代码段或文件模板片段是否显示为代码操作。
  "editor.snippets.codeActions.enabled": true,

  // 控制代码片段是否与其他建议一起显示及其排列的位置。
  //  - top: 在其他建议上方显示代码片段建议。
  //  - bottom: 在其他建议下方显示代码片段建议。
  //  - inline: 在其他建议中穿插显示代码片段建议。
  //  - none: 不显示代码片段建议。
  "editor.snippetSuggestions": "inline",

  // 保持速览编辑器处于打开状态，即使双击其中的内容或者点击 `Escape` 键也是如此。
  "editor.stablePeek": false,

  // 在编辑器顶部的滚动过程中显示嵌套的当前作用域。
  "editor.stickyScroll.enabled": false,

  // 定义要显示的最大粘滞行数。
  "editor.stickyScroll.maxLineCount": 5,

  // 在使用空格进行缩进时模拟制表符的选择行为。所选内容将始终使用制表符停止位。
  "editor.stickyTabStops": false,

  // 此设置已弃用，请改用单独的设置，如"editor.suggest.showKeywords"或"editor.suggest.showSnippets"。
  //
  "editor.suggest.filteredTypes": {},

  // 控制对建议的筛选和排序是否考虑小的拼写错误。
  "editor.suggest.filterGraceful": true,

  // 控制接受补全时是否覆盖单词。请注意，这取决于扩展选择使用此功能。
  //  - insert: 插入建议而不覆盖光标右侧的文本。
  //  - replace: 插入建议并覆盖光标右侧的文本。
  "editor.suggest.insertMode": "insert",

  // 控制排序时是否首选光标附近的字词。
  "editor.suggest.localityBonus": false,

  // 启用后，IntelliSense 筛选要求第一个字符在单词开头匹配，例如 “Console” 或 “WebContext” 上的 “c”，但 “description” 上的 _not_。禁用后，IntelliSense 将显示更多结果，但仍按匹配质量对其进行排序。
  "editor.suggest.matchOnWordStartOnly": true,

  // 此设置已弃用。现在可以调整建议小组件的大小。
  //
  "editor.suggest.maxVisibleSuggestions": 0,

  // 控制是否在编辑器中预览建议结果。
  "editor.suggest.preview": false,

  // 控制在显示小组件时是否选择建议。请注意，这仅适用于(“#editor.quickSuggestions#”和“#editor.suggestOnTriggerCharacters#”)自动触发的建议，并且始终在显式调用时选择建议，例如通过“Ctrl+Space”。
  //  - always: 自动触发 IntelliSense 时始终选择建议。
  //  - never: 自动触发 IntelliSense 时，切勿选择建议。
  //  - whenTriggerCharacter: 仅当从触发器字符触发 IntelliSense 时，才选择建议。
  //  - whenQuickSuggestion: 仅在键入时触发 IntelliSense 时才选择建议。
  "editor.suggest.selectionMode": "always",

  // 控制是否在多个工作区和窗口间共享记忆的建议选项(需要 `editor.suggestSelection`)。
  "editor.suggest.shareSuggestSelections": false,

  // 启用后，IntelliSense 将显示“类”建议。
  "editor.suggest.showClasses": true,

  // 启用后，IntelliSense 将显示“颜色”建议。
  "editor.suggest.showColors": true,

  // 启用后，IntelliSense 将显示“常量”建议。
  "editor.suggest.showConstants": true,

  // 启用后，IntelliSense 将显示“构造函数”建议。
  "editor.suggest.showConstructors": true,

  // 启用后，IntelliSense 将显示“自定义颜色”建议。
  "editor.suggest.showCustomcolors": true,

  // 启用后，IntelliSense 将显示`已弃用`建议。
  "editor.suggest.showDeprecated": true,

  // 启用后，IntelliSense 将显示 "enumMember" 建议。
  "editor.suggest.showEnumMembers": true,

  // 启用后，IntelliSense 将显示“枚举”建议。
  "editor.suggest.showEnums": true,

  // 启用后，IntelliSense 将显示“事件”建议。
  "editor.suggest.showEvents": true,

  // 启用后，IntelliSense 将显示“字段”建议。
  "editor.suggest.showFields": true,

  // 启用后，IntelliSense 将显示“文件”建议。
  "editor.suggest.showFiles": true,

  // 启用后，IntelliSense 将显示“文件夹”建议。
  "editor.suggest.showFolders": true,

  // 启用后，IntelliSense 将显示“函数”建议。
  "editor.suggest.showFunctions": true,

  // 控制是否在建议中显示或隐藏图标。
  "editor.suggest.showIcons": true,

  // 控制建议详细信息是随标签内联显示还是仅显示在详细信息小组件中。
  "editor.suggest.showInlineDetails": true,

  // 启用后，IntelliSense 将显示“接口”建议。
  "editor.suggest.showInterfaces": true,

  // 启用后，IntelliSense 将显示"问题"建议。
  "editor.suggest.showIssues": true,

  // 启用后，IntelliSense 将显示“关键字”建议。
  "editor.suggest.showKeywords": true,

  // 启用后，IntelliSense 将显示“方法”建议。
  "editor.suggest.showMethods": true,

  // 启用后，IntelliSense 将显示“模块”建议。
  "editor.suggest.showModules": true,

  // 启用后，IntelliSense 将显示“操作符”建议。
  "editor.suggest.showOperators": true,

  // 启用后，IntelliSense 将显示“属性”建议。
  "editor.suggest.showProperties": true,

  // 启用后，IntelliSense 将显示“参考”建议。
  "editor.suggest.showReferences": true,

  // 启用后，IntelliSense 将显示“片段”建议。
  "editor.suggest.showSnippets": true,

  // 控制建议小部件底部的状态栏的可见性。
  "editor.suggest.showStatusBar": false,

  // 启用后，IntelliSense 将显示“结构”建议。
  "editor.suggest.showStructs": true,

  // 启用后，IntelliSense 将显示 "typeParameter" 建议。
  "editor.suggest.showTypeParameters": true,

  // 启用后，IntelliSense 将显示“单位”建议。
  "editor.suggest.showUnits": true,

  // 启用后，IntelliSense 将显示"用户"建议。
  "editor.suggest.showUsers": true,

  // 启用后，IntelliSense 将显示“值”建议。
  "editor.suggest.showValues": true,

  // 启用后，IntelliSense 将显示“变量”建议。
  "editor.suggest.showVariables": true,

  // 启用后，IntelliSense 将显示“文本”建议。
  "editor.suggest.showWords": true,

  // 控制活动代码段是否阻止快速建议。
  "editor.suggest.snippetsPreventQuickSuggestions": true,

  // 建议小组件的字号。设置为 `0` 时，将使用 `editor.fontSize` 的值。
  "editor.suggestFontSize": 0,

  // 建议小组件的行高。设置为 `0` 时，将使用 `editor.lineHeight` 的值。最小值为 8。
  "editor.suggestLineHeight": 0,

  // 控制在键入触发字符后是否自动显示建议。
  "editor.suggestOnTriggerCharacters": true,

  // 控制在建议列表中如何预先选择建议。
  //  - first: 始终选择第一个建议。
  //  - recentlyUsed: 选择最近的建议，除非进一步键入选择其他项。例如 `console. -> console.log`，因为最近补全过 `log`。
  //  - recentlyUsedByPrefix: 根据之前补全过的建议的前缀来进行选择。例如，`co -> console`、`con -> const`。
  "editor.suggestSelection": "first",

  // 启用 Tab 补全。
  //  - on: 在按下 Tab 键时进行 Tab 补全，将插入最佳匹配建议。
  //  - off: 禁用 Tab 补全。
  //  - onlySnippets: 在前缀匹配时进行 Tab 补全。在 "quickSuggestions" 未启用时体验最好。
  "editor.tabCompletion": "off",

  // 一个制表符等于的空格数。当 `editor.detectIndentation` 打开时，将根据文件内容替代此设置。
  "editor.tabSize": 4,

  // 替代当前所选颜色主题中的编辑器语法颜色和字形。
  "editor.tokenColorCustomizations": {},

  // 删除自动插入的尾随空白符号。
  "editor.trimAutoWhitespace": true,

  // 控制单击已折叠的行后面的空内容是否会展开该行。
  "editor.unfoldOnClickAfterEndOfLine": false,

  // 定义未突出显示的允许字符。
  "editor.unicodeHighlight.allowedCharacters": {},

  // 未突出显示在允许区域设置中常见的 Unicode 字符。
  "editor.unicodeHighlight.allowedLocales": {
    "_os": true,
    "_vscode": true
  },

  // 控制是否突出显示可能与基本 ASCII 字符混淆的字符，但当前用户区域设置中常见的字符除外。
  "editor.unicodeHighlight.ambiguousCharacters": true,

  // 控制注释中的字符是否也应进行 Unicode 突出显示。
  "editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

  // 控制字符串中的字符是否也应进行 Unicode 突出显示。
  "editor.unicodeHighlight.includeStrings": true,

  // 控制是否突出显示仅保留空格或完全没有宽度的字符。
  "editor.unicodeHighlight.invisibleCharacters": true,

  // 控制是否突出显示所有非基本 ASCII 字符。只有介于 U+0020 到 U+007E 之间的字符、制表符、换行符和回车符才被视为基本 ASCII。
  "editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

  // 删除可能导致问题的异常行终止符。
  //  - auto: 自动删除异常的行终止符。
  //  - off: 忽略异常的行终止符。
  //  - prompt: 提示删除异常的行终止符。
  "editor.unusualLineTerminators": "prompt",

  // 根据制表位插入和删除空格。
  "editor.useTabStops": true,

  // 控制是否根据文档中的文字计算自动完成列表。
  "editor.wordBasedSuggestions": true,

  // 控制通过哪些文档计算基于字词的补全。
  //  - currentDocument: 仅建议活动文档中的字词。
  //  - matchingDocuments: 建议使用同一语言的所有打开的文档中的字词。
  //  - allDocuments: 建议所有打开的文档中的字词。
  "editor.wordBasedSuggestionsMode": "matchingDocuments",

  // 控制中文/日语/韩语(CJK)文本使用的断字规则。
  //  - normal: 使用默认换行规则。
  //  - keepAll: 中文/日语/韩语(CJK)文本不应使用断字功能。非 CJK 文本行为与普通文本行为相同。
  "editor.wordBreak": "normal",

  // 执行单词相关的导航或操作时作为单词分隔符的字符。
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // 控制折行的方式。
  //  - off: 永不换行。
  //  - on: 将在视区宽度处换行。
  //  - wordWrapColumn: 在 `editor.wordWrapColumn` 处折行。
  //  - bounded: 在视区宽度和 `editor.wordWrapColumn` 中的较小值处折行。
  "editor.wordWrap": "off",

  // 在 `editor.wordWrap` 为 `wordWrapColumn` 或 `bounded` 时，控制编辑器的折行列。
  "editor.wordWrapColumn": 80,

  // 控制折行的缩进。
  //  - none: 没有缩进。折行从第 1 列开始。
  //  - same: 折行的缩进量与其父级相同。
  //  - indent: 折行的缩进量比其父级多 1。
  //  - deepIndent: 折行的缩进量比其父级多 2。
  "editor.wrappingIndent": "same",

  // 控制计算包装点的算法。请注意，在辅助功能模式下，高级版将用于提供最佳体验。
  //  - simple: 假定所有字符的宽度相同。这是一种快速算法，适用于等宽字体和某些字形宽度相等的文字(如拉丁字符)。
  //  - advanced: 将包装点计算委托给浏览器。这是一个缓慢算法，可能会导致大型文件被冻结，但它在所有情况下都正常工作。
  "editor.wrappingStrategy": "simple",

  // 控制是否在“源代码管理”视图中始终显示内联操作。
  "scm.alwaysShowActions": false,

  // 控制存储库是否应在源代码管理视图中始终可见。
  "scm.alwaysShowRepositories": false,

  // 控制源代码管理视图在打开文件时是否应自动显示和选择文件。
  "scm.autoReveal": true,

  // 控制活动栏上源代码管理图标上的计数锁屏提醒。
  //  - all: 显示所有源代码管理提供程序计数锁屏提醒的总和。
  //  - focused: 显示焦点源控制提供程序的计数标记。
  //  - off: 禁用源代码管理计数徽章。
  "scm.countBadge": "all",

  // 控制默认的源代码管理仓库视图模式。
  //  - tree: 将仓库更改显示为树。
  //  - list: 将仓库更改显示为列表。
  "scm.defaultViewMode": "list",

  // 控制默认的源代码管理仓库在被视为列表时的更改排序顺序。
  //  - name: 按文件名对仓库更改进行排序。
  //  - path: 按路径对仓库更改进行排序。
  //  - status: 按源代码管理状态对仓库更改进行排序。
  "scm.defaultViewSortKey": "path",

  // 控制编辑器中差异的显示效果。
  //  - all: 显示所有可用位置中的差异装饰。
  //  - gutter: 仅在编辑器行号槽中显示差异装饰。
  //  - overview: 仅在概览标尺中显示差异装饰。
  //  - minimap: 仅在缩略图中显示差异装饰。
  //  - none: 不要显示差异装饰。
  "scm.diffDecorations": "all",

  // 控制源代码管理差异装订线修饰的行为。
  //  - diff: 单击时显示内联差异速览视图。
  //  - none: 不执行任何操作。
  "scm.diffDecorationsGutterAction": "diff",

  // 控制是否将模式用于装订线中的差异修饰。
  "scm.diffDecorationsGutterPattern": {
    "added": false,
    "modified": true
  },

  // 控制行号槽中源代码管理差异装饰器的可见性。
  //  - always: 始终显示行号槽中的差异装饰器。
  //  - hover: 仅在悬停时显示行号槽中的差异装饰器。
  "scm.diffDecorationsGutterVisibility": "always",

  // 控制装订线中差异修饰的宽度(px)(已添加或已修改)。
  "scm.diffDecorationsGutterWidth": 3,

  // 控制在源代码管理差异装订线修饰中是否忽略前导空格和尾随空格。
  //  - true: 忽略前导空格和尾随空格。
  //  - false: 不要忽略前导空格和尾随空格。
  //  - inherit: 继承自 `diffEditor.ignoreTrimWhitespace`。
  "scm.diffDecorationsIgnoreTrimWhitespace": "false",

  // 控制输入消息的字体。将 `default` 用于工作台用户界面字体系列，将 `editor` 用于 `editor.fontFamily` 的值，或者使用自定义字体系列。
  "scm.inputFontFamily": "default",

  // 控制输入消息的字号(以像素为单位)。
  "scm.inputFontSize": 13,

  // 控制源代码管理提供程序标头的计数锁屏提醒。仅在有多个提供程序时才显示这些标头。
  //  - hidden: 隐藏源代码管理提供程序计数锁屏提醒。
  //  - auto: 仅显示非零时源代码管理提供程序的计数锁屏提醒。
  //  - visible: 显示源代码管理提供程序计数锁屏提醒。
  "scm.providerCountBadge": "hidden",

  // 控制源代码管理存储库视图中存储库的排序顺序。
  //  - discovery time: 按发现时间对源代码管理存储库视图中的存储库排序。按所选顺序对源代码管理视图中的存储库排序。
  //  - name: 按仓库名称对源代码管理仓库和源代码管理视图中的仓库排序。
  //  - path: 按仓库路径对源代码管理仓库和源代码管理视图中的仓库排序。
  "scm.repositories.sortOrder": "discovery time",

  // 控制在“源代码管理存储库”部分中显示的存储库数。设置为 0，以便能够手动调整视图大小。
  "scm.repositories.visible": 10,

  // 控制是否可以在源代码管理视图中显示操作按钮。
  "scm.showActionButton": true,

  // 控制何时显示受限模式横幅。
  //  - always: 每次打开不受信任的工作区时显示横幅。
  //  - untilDismissed: 打开不受信任的工作区时显示横幅，直到关闭为止。
  //  - never: 打开不受信任的工作区时，不要显示横幅。
  "security.workspace.trust.banner": "untilDismissed",

  // 控制空窗口在 VS Code 中是否默认受信任。当与 `security.workspace.trust.untrustedFiles` 一起使用时，可以启用 VS Code 的完整功能，而无需在空窗口中进行提示。
  "security.workspace.trust.emptyWindow": true,

  // 控制是否在 VS Code 内启用工作区信任。
  "security.workspace.trust.enabled": true,

  // 控制何时显示信任工作区的启动提示。
  //  - always: 每次打开不受信任的工作区时请求信任。
  //  - once: 首次打开不受信任的工作区时请求信任。
  //  - never: 每次打开不受信任的工作区时不请求信任。
  "security.workspace.trust.startupPrompt": "once",

  // 控制如何处理在受信任的工作区中打开不受信任的文件。此设置也适用于通过 `#security.workspace.trust.emptyWindow#" 打开的空窗口中的文件。
  //  - prompt: 询问每个工作区如何处理不受信任文件。将不受信任的文件引入受信任的工作区后，将不会再次提示你。
  //  - open: 始终允许不受信任的文件引入受信任的工作区，而不显示提示。
  //  - newWindow: 在受限模式下的独立窗口中始终打开不受信任的文件，而不显示提示。
  "security.workspace.trust.untrustedFiles": "prompt",

  // 控制在工作台中单击活动栏图标时出现的行为。
  //  - toggle: 如果单击的项已可见，则隐藏边栏。
  //  - focus: 如果单击的项已可见，则将焦点放在边栏上。
  "workbench.activityBar.iconClickBehavior": "toggle",

  // 控制工作台中活动栏的可见性。
  "workbench.activityBar.visible": true,

  // 控制是否为当前工作区自动继续存储在云中的可用工作更改。
  //  - onReload: 在窗口重新加载时自动从云中继续可用的工作更改。
  //  - off: 从不尝试从云中继续工作更改。
  "workbench.cloudChanges.autoResume": "onReload",

  // 控制在使用“继续工作”时是否提示用户将工作更改存储在云中。
  //  - prompt: 通过“继续工作”，提示用户登录以在云中存储工作更改。
  //  - off: 除非用户已启用云更改，否则请勿通过“继续工作”将工作更改存储在云中。
  "workbench.cloudChanges.continueOn": "prompt",

  // 覆盖当前所选颜色主题的颜色。
  "workbench.colorCustomizations": {},

  // 指定用在工作台中的颜色主题。
  "workbench.colorTheme": "Default Dark+",

  // 控制命令面板是否应包含常用命令的列表。
  "workbench.commandPalette.experimental.suggestCommands": false,

  // 控制命令面板中保留最近使用命令的数量。设置为 0 时禁用命令历史功能。
  "workbench.commandPalette.history": 50,

  // 当再次打开命令面板时，控制是否恢复上一次输入的内容。
  "workbench.commandPalette.preserveInput": false,

  // 如果与列出的其中一个类型匹配的编辑器作为编辑器组中的第一个编辑器打开，且打开了多个组，则该组会自动锁定。锁定的组仅用于在用户手势(例如拖放等)显式选择时打开编辑器，默认情况下不使用。因此，锁定的组中的活动编辑器不太可能被意外替换为其他编辑器。
  "workbench.editor.autoLockGroups": {
    "default": false,
    "hexEditor.hexedit": false,
    "workbench.editorinputs.searchEditorInput": false,
    "imagePreview.previewEditor": false,
    "vscode.audioPreview": false,
    "vscode.videoPreview": false,
    "jsProfileVisualizer.cpuprofile.table": false,
    "jsProfileVisualizer.heapprofile.table": false,
    "latex-workshop-pdf-hook": false,
    "java.formatterSettingsEditor": false,
    "jupyter-notebook": false,
    "terminalEditor": true,
    "workbench.input.interactive": false,
    "mainThreadWebview-markdown.preview": false
  },

  // 如果在居中布局中打开了超过一组编辑器，控制是否自动将宽度调整为最大宽度值。当回到只打开了一组编辑器的状态，将自动将宽度调整为原始的居中宽度值。
  "workbench.editor.centeredLayoutAutoResize": true,

  // 控制编辑器组中最后一个选项卡关闭时这个空组的行为。若启用，将自动关闭空组。若禁用，空组仍将保留在网格布局中。
  "workbench.editor.closeEmptyGroups": true,

  // 控制在会话期间显示已打开文件的编辑器是否应在被其他进程删除或重命名时自动关闭。禁用此功能将使编辑器在此类事件中保持打开状态。请注意，从应用程序内删除将始终关闭编辑器，且永远不会关闭具有未保存更改的编辑器以保留数据。
  "workbench.editor.closeOnFileDelete": false,

  // 控制编辑器文件修饰是否应使用徽章。
  "workbench.editor.decorations.badges": true,

  // 控制编辑器文件修饰是否应使用颜色。
  "workbench.editor.decorations.colors": true,

  // 检测为二进制文件的默认编辑器。如果未定义，将向用户显示选取器。
  "workbench.editor.defaultBinaryEditor": "",

  // 控制打开的编辑器是否显示为预览编辑器。预览编辑器不会保持打开状态，在将其显式设置为保持打开(通过双击或编辑)前可以重用，并以斜体显示文件名。
  "workbench.editor.enablePreview": true,

  // 控制当从编辑器开始进行代码导航时，编辑器是否保持为预览状态。预览编辑器不会保持打开状态，在将其显式设置为保持打开(通过双击或编辑)前将会重用。当 `workbench.editor.enablePreview` 处于禁用状态时，将忽略此值。
  "workbench.editor.enablePreviewFromCodeNavigation": false,

  // 控制通过 Quick Open 打开的编辑器是否显示为预览编辑器。预览编辑器不会保持打开状态，并且在将其显式设置为保持打开(通过双击或编辑)前将会重用。启用后，在选择前按住 Ctrl 可在非预览模式下打开编辑器。当 `workbench.editor.enablePreview` 处于禁用状态时，将忽略此值。
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // 控制是否按最常使用的顺序或从左到右的顺序关闭选项卡。
  "workbench.editor.focusRecentEditorAfterClose": true,

  // 控制是否在具有未保存更改的编辑器的选项卡上绘制顶部边框。当禁用 `workbench.editor.showTabs` 时，会忽略此值。
  "workbench.editor.highlightModifiedTabs": false,

  // 允许在语言检测中使用编辑器历史记录。这会导致自动语言检测偏向于最近打开的语言，并允许自动语言检测使用较小的输入进行操作。
  "workbench.editor.historyBasedLanguageDetection": true,

  // 控制编辑器标签的格式。
  //  - default: 显示文件名。当启用选项卡且在同一组内有两个相同名称的文件时，将添加每个文件路径中可以用于区分的部分。在选项卡被禁用且编辑器活动时，将显示相对于工作区文件夹的路径。
  //  - short: 在文件的目录名之后显示文件名。
  //  - medium: 在文件相对当前工作区文件夹的路径之后显示文件名。
  //  - long: 在文件的绝对路径之后显示文件名。
  "workbench.editor.labelFormat": "default",

  // 控制是否自动检测文本编辑器中的语言，除非该语言已由语言选择器显式设置。这也可以按语言确定范围，以便你可以指定不希望关闭的语言。这对于像 Markdown 这样的语言很有用，因为它通常包含可能会欺骗语言检测的其他语言，使其认为它是嵌入语言而不是 Markdown。
  "workbench.editor.languageDetection": true,

  // 启用后，当编辑器语言与检测到的内容语言不匹配时，显示状态栏快速修复。
  "workbench.editor.languageDetectionHints": {
    "untitledEditors": true,
    "notebookEditors": true
  },

  // 控制打开的编辑器数是否应受限制。启用后，最近使用较少的编辑器将关闭，以为新打开的编辑器腾出空间。
  "workbench.editor.limit.enabled": false,

  // 控制打开的编辑器的最大数目是否应排除脏编辑器以计入配置的限制。
  "workbench.editor.limit.excludeDirty": false,

  // 控制最大打开的编辑器的限制是否应应用于每个编辑器组或所有编辑器组。
  "workbench.editor.limit.perEditorGroup": false,

  // 控制打开编辑器的最大数量。使用 `workbench.editor.limit.perEditorGroup` 设置控制每个编辑器组或跨所有组的限制。
  "workbench.editor.limit.value": 10,

  // 允许使用鼠标按钮四和五执行“返回”和“前进”命令。
  "workbench.editor.mouseBackForwardToNavigate": true,

  // 控制编辑器中“返回”和“前进”等命令的历史导航范围。
  //  - default: 浏览所有打开的编辑器和编辑器组。
  //  - editorGroup: 仅在活动编辑器组的编辑器中导航。
  //  - editor: 仅在活动编辑器中导航。
  "workbench.editor.navigationScope": "default",

  // 控制编辑器打开的位置。选择 `left` 或 `right` 可分别在当前活动编辑器的左侧或右侧打开。选择 `first` (最前) 或 `last` (最后) 打开的位置与当前活动编辑器无关。
  "workbench.editor.openPositioning": "right",

  // 控制编辑器在并排打开时(例如从资源管理器)出现的默认位置。默认在当前活动编辑器右侧打开。若更改为 "down"，则在当前活动编辑器下方打开。
  "workbench.editor.openSideBySideDirection": "right",

  // 控制固定的编辑器选项卡的大小。固定的选项卡排在所有打开的选项卡的开头，并且在取消固定之前，通常不会关闭。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
  //  - normal: 固定的选项卡会继承未固定的选项卡的外观。
  //  - compact: 固定的选项卡将以紧凑形式显示，其中只包含图标或编辑器名称的第一个字母。
  //  - shrink: 固定的选项卡缩小至紧凑的固定大小，显示编辑器名称的各部分。
  "workbench.editor.pinnedTabSizing": "normal",

  // 启用后，将编辑器历史记录考虑在内的语言检测模型将获得更高的优先级。
  "workbench.editor.preferHistoryBasedLanguageDetection": false,

  // 关闭编辑器后重新打开时，将还原最后的编辑器视图状态(例如滚动位置)。编辑器视图状态按编辑器组存储，并在组关闭时被放弃。使用 `workbench.editor.sharedViewState` 设置以跨所有编辑器组使用最后已知的视图状态，以防找不到编辑器组之前的视图状态。
  "workbench.editor.restoreViewState": true,

  // 控制是否在打开的任何可见组中显示编辑器。如果禁用，编辑器将优先在当前活动的编辑器组中打开。如果启用，将显示在已打开的编辑器，而不是在当前活动的编辑器组中再次打开。请注意，有些情况下会忽略此设置，例如，强制编辑器在特定组中打开或在当前活动组的一侧打开。
  "workbench.editor.revealIfOpen": false,

  // 控制在滚动到选项卡上方时是否打开这些选项卡。默认情况下，选项卡仅在鼠标滚动时呈现，但不打开。可通过在滚动时按住 Shift 键来更改滚动期间的此行为。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
  "workbench.editor.scrollToSwitchTabs": false,

  // 跨所有编辑器组保留最新的编辑器视图状态(例如滚动位置等)并在未找到编辑器组的特定编辑器视图状态时进行还原。
  "workbench.editor.sharedViewState": false,

  // 控制是否在打开的编辑器中显示图标。这要求同时启用文件图标主题。
  "workbench.editor.showIcons": true,

  // 控制打开的编辑器是否显示在选项卡中。
  "workbench.editor.showTabs": true,

  // 控制在编辑器组中垂直或水平拆分编辑器时的布局。
  //  - vertical: 从上到下定位编辑器。
  //  - horizontal: 从左到右定位编辑器。
  "workbench.editor.splitInGroupLayout": "horizontal",

  // 通过将编辑器或文件放到编辑器区域的边缘，控制是否可以由拖放操作拆分编辑器组。
  "workbench.editor.splitOnDragAndDrop": true,

  // 拆分编辑器组时控制编辑器组大小。
  //  - distribute: 将所有编辑器组拆分为相等的部分。
  //  - split: 将活动编辑器组拆分为相等的部分。
  "workbench.editor.splitSizing": "distribute",

  // 控制编辑器的选项卡关闭按钮的位置，或者在设置为 "off" 时禁用它们。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
  "workbench.editor.tabCloseButton": "right",

  // 控制编辑器选项卡的大小调整。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
  //  - fit: 始终将标签页保持足够大，能够完全显示编辑器标签。
  //  - shrink: 在不能同时显示所有选项卡时，允许选项卡缩小。
  "workbench.editor.tabSizing": "fit",

  // 控制编辑器标题区域中用于选项卡和面包屑的滚动条的高度。
  //  - default: 默认大小。
  //  - large: 增加大小，以便更轻松地通过鼠标抓取。
  "workbench.editor.titleScrollbarSizing": "default",

  // 控制编辑器中是否应显示无标题文本提示。
  "workbench.editor.untitled.hint": "text",

  // 控制无标题编辑器的标签格式。
  //  - content: 无标题文件的名称派生自其第一行的内容，除非它有关联的文件路径。如果行为空或不包含单词字符，它将回退到名称。
  //  - name: 无标题文件的名称不是从文件的内容派生的。
  "workbench.editor.untitled.labelFormat": "content",

  // 控制当超出可用空间时，选项卡是否应在多行之间换行，或者是否应显示滚动条。当 "#workbench.editor.showTabs#" 处于禁用状态时，将忽略此值。
  "workbench.editor.wrapTabs": false,

  // 将 glob 模式配置到编辑器(例如 `"*.hex": "hexEditor.hexedit"`)。这些优先于默认行为。
  "workbench.editorAssociations": {},

  // 在要求在编辑器中打开时进行确认之前，控制以 MB 为单位的文件的最小大小。请注意，此设置可能不适用于所有编辑器类型和环境。
  "workbench.editorLargeFileConfirmation": 1024,

  // 此设置已弃用，取而代之的是 `workbench.cloudChanges.autoResume`。
  //
  "workbench.editSessions.autoResume": null,

  // 此设置已弃用，取而代之的是 `workbench.cloudChanges.continueOn`。
  //
  "workbench.editSessions.continueOn": null,

  // 从 Microsoft 联机服务中获取要进行的实验。
  "workbench.enableExperiments": true,

  // 控制是否为当前工作区自动将可用工作更改存储在云中。
  //  - onShutdown: 在窗口关闭时自动将当前工作更改存储在云中。
  //  - off: 从不尝试在云中自动存储工作更改。
  "workbench.experimental.cloudChanges.autoStore": "off",

  // 控制是否显示与当前会话部分匹配的云更改。
  "workbench.experimental.cloudChanges.partialMatches.enabled": false,

  // 此设置已弃用，取而代之的是 `workbench.experimental.cloudChanges.autoStore`。
  //
  "workbench.experimental.editSessions.autoStore": null,

  // 此设置已弃用，取而代之的是 `workbench.experimental.cloudChanges.partialMatches.enabled`。
  //
  "workbench.experimental.editSessions.partialMatches.enabled": null,

  // 配置开启程序以用于外部 URI (即 http、https)。
  "workbench.externalUriOpeners": {},

  // 控制为工作台项显示悬停之前的延迟时间(以毫秒为单位)(例如，一些扩展提供了树状视图项)。已经可见的项可能需要刷新，然后才会反映出此设置更改。
  "workbench.hover.delay": 500,

  // 指定工作台中使用的文件图标主题；若指定为 "null"，则不显示任何文件图标。
  //  - null: 无文件图标
  //  - vs-minimal
  //  - vs-seti
  //  - material-icon-theme-wechat
  //  - material-icon-theme
  //  - vscode-icons
  "workbench.iconTheme": "vs-seti",

  // 控制布局控件是否显示在自定义标题栏中。此设置仅在将 `window.titleBarStyle` 设置为 `custom` 时才会生效。
  "workbench.layoutControl.enabled": true,

  // 控制自定义标题栏中的布局控件是显示为单个菜单按钮还是多个 UI 切换。
  //  - menu: 显示包含布局选项下拉列表的单个按钮。
  //  - toggles: 显示用于切换面板和侧边栏可见性的多个按钮。
  //  - both: 显示下拉列表和切换按钮。
  "workbench.layoutControl.type": "both",

  // 控制在工作台中搜索列表和树时使用的匹配类型。
  //  - fuzzy: 在搜索时使用模糊匹配。
  //  - contiguous: 在搜索时使用连续匹配。
  "workbench.list.defaultFindMatchType": "fuzzy",

  // 控制工作台中列表和树的默认查找模式。
  //  - highlight: 搜索时突出显示元素。进一步向上和向下导航将仅遍历突出显示的元素。
  //  - filter: 搜索时筛选元素。
  "workbench.list.defaultFindMode": "highlight",

  // 按下"Alt"时滚动速度倍增。
  "workbench.list.fastScrollSensitivity": 5,

  // 控制列表和树是否支持工作台中的水平滚动。警告: 打开此设置影响会影响性能。
  "workbench.list.horizontalScrolling": false,

  // 请改用 "workbench.list.defaultFindMode" 和 "workbench.list.typeNavigationMode"。
  // 控制工作台中的列表和树的键盘导航样式。它可为“简单”、“突出显示”或“筛选”。
  //  - simple: 简单键盘导航聚焦与键盘输入相匹配的元素。仅对前缀进行匹配。
  //  - highlight: 高亮键盘导航会突出显示与键盘输入相匹配的元素。进一步向上和向下导航将仅遍历突出显示的元素。
  //  - filter: 筛选器键盘导航将筛选出并隐藏与键盘输入不匹配的所有元素。
  "workbench.list.keyboardNavigation": "highlight",

  // 对鼠标滚轮滚动事件的 `deltaX` 和 `deltaY` 乘上的系数。
  "workbench.list.mouseWheelScrollSensitivity": 1,

  // 在通过鼠标多选树和列表条目时使用的修改键 (例如“资源管理器”、“打开的编辑器”和“源代码管理”视图)。“在侧边打开”功能所需的鼠标动作 (若可用) 将会相应调整，不与多选修改键冲突。
  //  - ctrlCmd: 映射为 `Ctrl` (Windows 和 Linux) 或 `Command` (macOS)。
  //  - alt: 映射为 `Alt` (Windows 和 Linux) 或 `Option` (macOS)。
  "workbench.list.multiSelectModifier": "ctrlCmd",

  // 控制如何使用鼠标打开树和列表中的项(若支持)。请注意，如果此设置不适用，某些树和列表可能会选择忽略它。
  "workbench.list.openMode": "singleClick",

  // 控制在滚动条中单击时是否逐页单击。
  "workbench.list.scrollByPage": false,

  // 控制列表和树是否具有平滑滚动效果。
  "workbench.list.smoothScrolling": false,

  // 控制类型导航在工作台的列表和树中的工作方式。如果设置为 "trigger"，则在运行 "list.triggerTypeNavigation" 命令后，类型导航将开始。
  "workbench.list.typeNavigationMode": "automatic",

  // 控制是否启用本地文件历史记录。启用后，所保存编辑器文件内容将存储到备份位置，以便稍后可以还原或查看内容。更改此设置不会影响现有本地文件历史记录条目。
  "workbench.localHistory.enabled": true,

  // 配置 [glob 模式](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) 以从本地文件历史记录中排除文件。更改此设置不会影响现有本地文件历史记录条目。
  "workbench.localHistory.exclude": {},

  // 控制每个文件的最大本地文件历史记录条目数。当文件的本地文件历史记录条目数超过此数目时，将丢弃最早的条目。
  "workbench.localHistory.maxFileEntries": 50,

  // 控制考虑用于本地历史记录的文件最大大小(KB)。较大的文件将不会添加到本地历史记录中。更改此设置不会影响现有本地文件历史记录条目。
  "workbench.localHistory.maxFileSize": 256,

  // 配置时间间隔(以秒为单位)，在此间隔期间，本地文件历史记录中的最后一个条目将替换为正在添加的条目。这有助于减少所添加的条目总数，例如启用自动保存时。此设置仅应用于具有相同源的条目。更改此设置不会影响现有本地文件历史记录条目。
  "workbench.localHistory.mergeWindow": 10,

  // 控制新工作区中面板(终端、调试控制台、输出、问题)的默认位置。它可以显示在编辑器区域的底部、右侧或左侧。
  "workbench.panel.defaultLocation": "bottom",

  // 控制面板是否以最大化方式打开。它可以始终以最大化方式打开、永不以最大化方式打开或以关闭前的最后一个状态打开。
  //  - always: 始终以最大化方式打开面板。
  //  - never: 永不以最大化方式打开面板。面板将以非最大化方式打开。
  //  - preserve: 以关闭面板前的状态打开面板。
  "workbench.panel.opensMaximized": "preserve",

  // 指定启用了 `window.autoDetectColorScheme` 时深色操作系统外观的首选颜色主题。
  "workbench.preferredDarkColorTheme": "Default Dark+",

  // 指定启用了 `window.autoDetectHighContrast` 时在高对比度深色模式下使用的首选颜色主题。
  "workbench.preferredHighContrastColorTheme": "Default High Contrast",

  // 指定启用了 `window.autoDetectHighContrast` 时在高对比度浅色模式下使用的首选颜色主题。
  "workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

  // 指定启用了 `window.autoDetectColorScheme` 时浅色操作系统外观的首选颜色主题。
  "workbench.preferredLightColorTheme": "Default Light+",

  // 指定使用的产品图标主题。
  //  - Default: 默认
  "workbench.productIconTheme": "Default",

  // 控制 Quick Open 是否在其失去焦点时自动关闭。
  "workbench.quickOpen.closeOnFocusLost": true,

  // 在打开 Quick Open 视图时，控制是否自动恢复上一次输入的值。
  "workbench.quickOpen.preserveInput": false,

  // 控制工作台是否应以更少的动画呈现。
  //  - on: 始终减少动作呈现。
  //  - off: 不要减少运动呈现
  //  - auto: 根据 OS 配置减少运动呈现。
  "workbench.reduceMotion": "auto",

  // 控制视图/编辑器之间拖动区域的悬停反馈延迟(以毫秒为单位)。
  "workbench.sash.hoverDelay": 300,

  // 控制视图/编辑器之间拖动区域的反馈区域大小(以像素为单位)。如果你认为很难使用鼠标调整视图的大小，请将该值调大。
  "workbench.sash.size": 4,

  // 配置默认使用的设置编辑器。
  //  - ui: 使用设置 ui 编辑器。
  //  - json: 使用 json 文件编辑器。
  "workbench.settings.editor": "ui",

  // 控制是否在设置中启用自然语言搜索。自然语言搜索由 Microsoft 联机服务提供。
  "workbench.settings.enableNaturalLanguageSearch": true,

  // 控制在打开按键绑定设置时是否同时打开显示所有默认按键绑定的编辑器。
  "workbench.settings.openDefaultKeybindings": false,

  // 控制在打开设置时是否同时打开显示所有默认设置的编辑器。
  "workbench.settings.openDefaultSettings": false,

  // 控制设置编辑器的目录在搜索时的行为。
  //  - hide: 在搜索时隐藏目录。
  //  - filter: 筛选目录为仅显示含有匹配设置的类别。单击一个类别将仅显示该类别的结果。
  "workbench.settings.settingsSearchTocBehavior": "filter",

  // 控制在将设置编辑为 json 时是否使用拆分 json 编辑器。
  "workbench.settings.useSplitJSON": false,

  // 控制主边栏和活动栏的位置。它们可以显示在工作台的左侧或右侧。辅助边栏将显示在工作台的另一侧。
  "workbench.sideBar.location": "left",

  // 在没有从上一会话中恢复出信息的情况下，控制启动时显示的编辑器。
  //  - none: 在启动时不打开编辑器。
  //  - welcomePage: 打开包含帮助开始使用 VS Code 和扩展内容的欢迎页面。
  //  - readme: 当打开包含自述文件的文件夹时，请打开自述文件，否则会回退到 'welcomePage'。请注意: 仅在作为全局 配置时才遵守此操作，如果在工作区或文件夹配置中进行设置，则此将被忽略。
  //  - newUntitledFile: 打开新的无标题文本文件(仅在打开空窗口时适用)。
  //  - welcomePageInEmptyWorkbench: 在打开空工作区时打开欢迎页面。
  "workbench.startupEditor": "welcomePage",

  // 控制工作台底部状态栏的可见性。
  "workbench.statusBar.visible": true,

  // 启用后，当没有打开编辑器时将显示水印提示。
  "workbench.tips.enabled": true,

  // 控制在单击文件夹名称时如何扩展树文件夹。请注意，如果不适用，某些树和列表可能会选择忽略此设置。
  "workbench.tree.expandMode": "singleClick",

  // 控制树缩进(以像素为单位)。
  "workbench.tree.indent": 8,

  // 控制树是否应呈现缩进参考线。
  "workbench.tree.renderIndentGuides": "onHover",

  // 启用后，在受信任的工作区中打开链接时，将显示受信任的域提示。
  "workbench.trustedDomains.promptInTrustedWorkspace": false,

  // 控制是否显示视图头部的操作项。视图头部操作项可以一直，或是仅当聚焦到和悬停在视图上时显示。
  "workbench.view.alwaysShowHeaderActions": false,

  // 启用后，入门页面将包含指向视频教程的其他链接。
  "workbench.welcomePage.experimental.videoTutorials": "off",

  // 已弃用，请使用全局 `workbench.reduceMotion`。
  // 启用后，减少欢迎页中的移动。
  "workbench.welcomePage.preferReducedMotion": false,

  // 启用后，扩展的演练将在安装扩展时打开。
  "workbench.welcomePage.walkthroughs.openOnInstall": true,

  // 如果已设置，则根据 OS 外观自动切换到首选颜色主题。如果 OS 外观为深色，则使用 `workbench.preferredDarkColorTheme#` 处指定的主题。如果外观为浅色，则使用 `#workbench.preferredLightColorTheme` 处指定的主题。
  "window.autoDetectColorScheme": false,

  // 如果已启用，则在操作系统使用高对比度主题时，将自动更改为高对比度主题；如果操作系统正在使用高对比度主题。要使用的高对比度主题是由 `workbench.preferredHighContrastColorTheme#` 和 `#workbench.preferredHighContrastLightColorTheme` 指定的。
  "window.autoDetectHighContrast": true,

  // 控制在关闭最后一个编辑器时是否关闭整个窗口。此设置仅适用于没有显示文件夹的窗口。
  "window.closeWhenEmpty": false,

  // 将命令启动器与窗口标题一起显示。仅当 `window.titleBarStyle` 设置为 `custom` 时，此设置才会生效。
  "window.commandCenter": false,

  // 控制是否在关闭窗口或退出应用程序之前显示确认对话框。
  //  - always: 始终询问确认。
  //  - keyboardOnly: 仅在已使用键绑定时请求确认。
  //  - never: 从不显式请求确认。
  "window.confirmBeforeClose": "never",

  // 控制是否通过按 Alt 键聚焦菜单栏。此设置对使用 Alt 键切换菜单栏没有任何影响。
  "window.customMenuBarAltFocus": true,

  // 调整对话框窗口的外观。
  "window.dialogStyle": "native",

  // 如果启用，当双击标题栏中的应用程序图标时，此设置将关闭窗口。该窗口将无法使用图标拖动。仅当 `window.titleBarStyle` 设置为 `自定义` 时，此设置才有效。
  "window.doubleClickIconToClose": false,

  // 控制是否可通过 Alt 键快捷键打开主菜单。如果禁用助记符，则可将这些 Alt 键快捷键绑定到编辑器命令。
  "window.enableMenuBarMnemonics": true,

  // 实验性: 启用后，窗口将通过 Electron API 启用沙盒模式。
  "window.experimental.useSandbox": false,

  // 使用平台提供的窗口控件，而不是基于 HTML 的窗口控件。需要完全重启才能应用更改。
  "window.experimental.windowControlsOverlay.enabled": true,

  // 控制菜单栏的可见性。“切换”设置表示菜单栏处于隐藏状态，只需按一下 Alt 键即可显示。“精简”设置会将菜单移到边栏中。
  //  - classic: 菜单显示在窗口顶部，并且仅在全屏模式下隐藏。
  //  - visible: 即使在全屏模式下，菜单也始终显示在窗口顶部。
  //  - toggle: 菜单处于隐藏状态，但通过按 Alt 键可在窗口顶部显示。
  //  - hidden: 菜单始终隐藏。
  //  - compact: 菜单在边栏中显示为紧凑按钮。当 `window.titleBarStyle` 为 `native` 时，会忽略此值。
  "window.menuBarVisibility": "classic",

  // 控制在已有窗口时新开窗口的尺寸。请注意，此设置对第一个打开的窗口无效。第一个窗口将始终恢复关闭前的大小和位置。
  //  - default: 在屏幕中心打开新窗口。
  //  - inherit: 以与上一个活动窗口相同的尺寸打开新窗口。
  //  - offset: 打开与上次活动窗口具有相同尺寸的新窗口，并带有偏移位置。
  //  - maximized: 打开最大化的新窗口。
  //  - fullscreen: 在全屏模式下打开新窗口。
  "window.newWindowDimensions": "default",

  // 控制是否应在使用命令行或文件对话框时在新窗口中打开文件。
  // 请注意，此设置可能会被忽略(例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时)。
  //  - on: 在新窗口中打开文件。
  //  - off: 在文件所在文件夹的已有窗口中或在上一个活动窗口中打开文件。
  //  - default: 在新窗口中打开文件，除非文件从应用程序内进行选取 (例如，通过“文件”菜单)。
  "window.openFilesInNewWindow": "off",

  // 控制打开文件夹时是在新窗口打开还是替换上一个活动窗口。
  // 注意，此设置可能会被忽略 (例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时)。
  //  - on: 在新窗口中打开文件夹。
  //  - off: 文件夹将替换上一个活动窗口。
  //  - default: 在新窗口中打开文件夹，除非文件夹从应用程序内进行选取 (例如，通过“文件”菜单)。
  "window.openFoldersInNewWindow": "default",

  // 在另一实例无参启动时，控制是打开新的空窗口或是聚焦到最后运行的实例。
  // 注意，此设置可能会被忽略 (例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时)。
  //  - on: 打开一个新的空窗口。
  //  - off: 聚焦到上一活动的运行实例。
  "window.openWithoutArgumentsInNewWindow": "on",

  // 若窗口在处于全屏模式时退出，控制其在恢复时是否还原到全屏模式。
  "window.restoreFullscreen": false,

  // 控制在第一次启动后窗口重新打开的方式。如果应用程序已在运行，则此设置不起任何作用。
  //  - preserve: 始终重新打开所有窗口。如果打开文件夹或工作区(例如从命令行打开)，它将作为新窗口打开，除非它之前已打开。如果打开文件，则这些文件将在其中一个已还原的窗口中打开。
  //  - all: 重新打开所有窗口，除非已打开文件夹、工作区或文件(例如从命令行)。
  //  - folders: 重新打开已打开文件夹或工作区的所有窗口，除非已打开文件夹、工作区或文件(例如从命令行)。
  //  - one: 重新打开上一个活动窗口，除非已打开文件夹、工作区或文件(例如从命令行)。
  //  - none: 从不重新打开窗口。如果文件夹或工作区未打开(例如从命令行)，将出现一个空窗口。
  "window.restoreWindows": "all",

  // 根据活动编辑器控制窗口标题。变量是根据上下文替换的:
  // - "${activeEditorShort}": 文件名 (例如 myFile.txt)。
  // - "${activeEditorMedium}": 相对于工作区文件夹的文件路径 (例如, myFolder/myFileFolder/myFile.txt)。
  // - "${activeEditorLong}": 文件的完整路径 (例如 /Users/Development/myFolder/myFileFolder/myFile.txt)。
  // - "${activeFolderShort}": 文件所在的文件夹名称 (例如, myFileFolder)。
  // - "${activeFolderMedium}": 相对于工作区文件夹的、包含文件的文件夹的路径, (例如 myFolder/myFileFolder)。
  // - "${activeFolderLong}": 文件所在文件夹的完整路径 (例如 /Users/Development/myFolder/myFileFolder)。
  // - "${folderName}": 文件所在工作区文件夹的名称 (例如 myFolder)。
  // - "${folderpath}": 文件所在工作区文件夹的路径 (例如 /Users/Development/myFolder)。
  // - `${rootName}`: 具有可选远程名称和工作区指示器的工作区的名称(如果适用)(例如 myFolder、myRemoteFolder [SSH] 或 myWorkspace [工作区])。
  // - `${rootNameShort}`: 已缩短的工作区名称，不包含后缀(例如 myFolder、myRemoteFolder 或 myWorkspace)。
  // - "${rootPath}": 打开的工作区或文件夹的文件路径 (例如 /Users/Development/myWorkspace)。
  // - "${profileName}": 在其中打开工作区的配置文件的名称(例如数据科学(配置文件))。如果使用默认配置文件，则忽略此选项。
  // - "${appName}": 例如 VS Code。
  // - `${remoteName}`: 例如 SSH
  // - `${dirty}`: 表明活动编辑器具有未保存更改的时间的指示器。
  // - "${separator}": 一种条件分隔符 ("-"), 仅在被包含值或静态文本的变量包围时显示。
  "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${profileName}${separator}${appName}",

  // 调整窗口标题栏的外观。在 Linux 和 Windows 上，此设置也会影响应用程序和上下文菜单的外观。更改需要完全重新启动才能应用。
  "window.titleBarStyle": "custom",

  // `window.title` 使用的分隔符。
  "window.titleSeparator": " - ",

  // 调整窗口的缩放级别。原始大小是 0，每次递增(例如 1)或递减(例如 -1)表示放大或缩小 20%。也可以输入小数以便以更精细的粒度调整缩放级别。
  "window.zoomLevel": 0,

  // 控制在打开禅模式时是否启用居中布局。
  "zenMode.centerLayout": true,

  // 控制在打开禅模式时是否将工作台切换到全屏。
  "zenMode.fullScreen": true,

  // 控制在打开禅模式时是否隐藏工作台左侧或右侧的活动栏。
  "zenMode.hideActivityBar": true,

  // 控制在打开禅模式时是否隐藏编辑器行号。
  "zenMode.hideLineNumbers": true,

  // 控制在打开禅模式时是否隐藏工作台底部的状态栏。
  "zenMode.hideStatusBar": true,

  // 控制在打开禅模式时是否隐藏工作台选项卡。
  "zenMode.hideTabs": true,

  // 控制在禅模式下退出的窗口是否应还原为禅模式。
  "zenMode.restore": true,

  // 控制在禅模式下是否应启用通知请勿打扰模式。如果为 true，则仅弹出错误通知。
  "zenMode.silentNotifications": true,

  // 控制截屏模式键盘的字体大小(以像素为单位)。
  "screencastMode.fontSize": 56,

  // 控制截屏模式下键盘覆盖显示的时长(以毫秒为单位)。
  "screencastMode.keyboardOverlayTimeout": 800,

  // 控制显示快捷方式时键盘覆盖中显示的内容。
  //  - keys: 密钥。
  //  - command: 命令标题。
  //  - commandWithGroup: 以其组为前缀的命令标题。
  //  - commandAndKeys: 命令标题和密钥。
  //  - commandWithGroupAndKeys: 命令标题和密钥，其中命令以其组为前缀。
  "screencastMode.keyboardShortcutsFormat": "commandAndKeys",

  // 控制截屏视频模式下鼠标指示器的十六进制(#RGB、#RGBA、#RRGGBB 或 #RRGGBBAA)的颜色。
  "screencastMode.mouseIndicatorColor": "#FF0000",

  // 控制截屏模式下鼠标光标的大小(以像素为单位)。
  "screencastMode.mouseIndicatorSize": 20,

  // 在屏幕广播模式下仅显示键盘快捷方式(不包括操作名称)。
  "screencastMode.onlyKeyboardShortcuts": false,

  // 控制截屏模式叠加的垂直偏移,从底部作为工作台高度的百分比。
  "screencastMode.verticalOffset": 20,

  // 配置语言的文件关联(如 `"*.extension": "html"`)。这些关联的优先级高于已安装语言的默认关联。
  "files.associations": {},

  // 启用后，编辑器将尝试在打开文件时猜测字符集编码。还可以按语言配置此设置。请注意，文本搜索不遵守此设置。仅遵守 `files.encoding`。
  "files.autoGuessEncoding": false,

  // 控制具有未保存更改的编辑器的 [自动保存](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save)。
  //  - off: 具有更改的编辑器永远不会自动保存。
  //  - afterDelay: 在配置的 `files.autoSaveDelay` 之后，会自动保存具有更改的编辑器。
  //  - onFocusChange: 当编辑器失去焦点时，会自动保存具有更改的编辑器。
  //  - onWindowChange: 当窗口失去焦点时，会自动保存具有更改的编辑器。
  "files.autoSave": "off",

  // 控制自动保存具有未保存更改的编辑器之前的延迟(以毫秒为单位)。只有当 `files.autoSave` 设置为 `afterDelay` 时才适用。
  "files.autoSaveDelay": 1000,

  // 分配给新文件的默认语言标识符。如果配置为 "${activeEditorLanguage}"，将使用当前活动文本编辑器(如果有)的语言标识符。
  "files.defaultLanguage": "",

  // 在删除文件或文件夹时，将它们移动到操作系统的“废纸篓”中 (Windows 为“回收站”)。禁用此设置将永久删除文件或文件夹。
  "files.enableTrash": true,

  // 在读取和写入文件时使用的默认字符集编码。可以按语言对此项进行配置。
  //  - utf8: UTF-8
  //  - utf8bom: UTF-8 with BOM
  //  - utf16le: UTF-16 LE
  //  - utf16be: UTF-16 BE
  //  - windows1252: Western (Windows 1252)
  //  - iso88591: Western (ISO 8859-1)
  //  - iso88593: Western (ISO 8859-3)
  //  - iso885915: Western (ISO 8859-15)
  //  - macroman: Western (Mac Roman)
  //  - cp437: DOS (CP 437)
  //  - windows1256: Arabic (Windows 1256)
  //  - iso88596: Arabic (ISO 8859-6)
  //  - windows1257: Baltic (Windows 1257)
  //  - iso88594: Baltic (ISO 8859-4)
  //  - iso885914: Celtic (ISO 8859-14)
  //  - windows1250: Central European (Windows 1250)
  //  - iso88592: Central European (ISO 8859-2)
  //  - cp852: Central European (CP 852)
  //  - windows1251: Cyrillic (Windows 1251)
  //  - cp866: Cyrillic (CP 866)
  //  - iso88595: Cyrillic (ISO 8859-5)
  //  - koi8r: Cyrillic (KOI8-R)
  //  - koi8u: Cyrillic (KOI8-U)
  //  - iso885913: Estonian (ISO 8859-13)
  //  - windows1253: Greek (Windows 1253)
  //  - iso88597: Greek (ISO 8859-7)
  //  - windows1255: Hebrew (Windows 1255)
  //  - iso88598: Hebrew (ISO 8859-8)
  //  - iso885910: Nordic (ISO 8859-10)
  //  - iso885916: Romanian (ISO 8859-16)
  //  - windows1254: Turkish (Windows 1254)
  //  - iso88599: Turkish (ISO 8859-9)
  //  - windows1258: Vietnamese (Windows 1258)
  //  - gbk: Simplified Chinese (GBK)
  //  - gb18030: Simplified Chinese (GB18030)
  //  - cp950: Traditional Chinese (Big5)
  //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
  //  - shiftjis: Japanese (Shift JIS)
  //  - eucjp: Japanese (EUC-JP)
  //  - euckr: Korean (EUC-KR)
  //  - windows874: Thai (Windows 874)
  //  - iso885911: Latin/Thai (ISO 8859-11)
  //  - koi8ru: Cyrillic (KOI8-RU)
  //  - koi8t: Tajik (KOI8-T)
  //  - gb2312: Simplified Chinese (GB 2312)
  //  - cp865: Nordic DOS (CP 865)
  //  - cp850: Western European DOS (CP 850)
  "files.encoding": "utf8",

  // 默认行尾字符。
  //  - \n: LF
  //  - \r\n: CRLF
  //  - auto: 使用具体操作系统规定的行末字符。
  "files.eol": "auto",

  // 配置 [glob 模式](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)以排除文件和文件夹。例如，文件资源管理器根据此设置决定要显示或隐藏的文件和文件夹。请参阅 `search.exclude#` 设置以定义特定于搜索的排除。请参阅 `#explorer.excludeGitIgnore` 设置以基于 `.gitignore` 忽略文件。
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true,
    "**/Thumbs.db": true
  },

  // 控制是否在会话间记住未保存的文件，以允许在退出编辑器时跳过保存提示。
  //  - off: 禁用热退出。当尝试关闭具有未保存更改的编辑器的窗口时，将显示提示。
  //  - onExit: 触发 "workbench.action.quit" 命令(命令面板、键绑定、菜单)或在 Windows/Linux 上关闭最后一个窗口时，将触发热退出。所有未打开文件夹的窗口都将在下次启动时恢复。可通过“文件”>“打开最近使用的文件”>“更多…”，访问之前打开的窗口(包含未保存的文件)列表
  //  - onExitAndWindowClose: 触发 "workbench.action.quit" 命令(命令面板、键绑定、菜单)或在 Windows/Linux 上关闭最后一个窗口时将触发热退出，还将对已打开文件夹的所有窗口触发热退出(无论是否是最后一个窗口)。所有未打开文件夹的窗口将在下次启动时恢复。可通过“文件”>“打开最近使用的文件”>“更多…”，访问之前打开的窗口(包含未保存的文件)列表
  "files.hotExit": "onExit",

  // 启用后，保存文件时在文件末尾插入一个最终新行。
  "files.insertFinalNewline": false,

  // 在打开大型文件时，控制 VS Code 可在重启后使用的内存。在命令行中指定 `--max-memory=新的大小` 参数可达到相同效果。
  "files.maxMemoryForLargeFilesMB": 4096,

  // 超时(以毫秒为单位)后，将取消创建、重命名和删除的文件参与者。使用 `0` 禁用参与者。
  "files.participants.timeout": 60000,

  // 控制是否自动保存作为重构一部分的文件
  "files.refactoring.autoSave": true,

  // 重新打开文件后，还原撤消堆栈。
  "files.restoreUndoStack": true,

  // 当文件保存到磁盘上并被另一个程序更改时，可能会发生保存冲突。 为了防止数据丢失，要求用户将编辑器中的更改与磁盘上的版本进行比较。 仅当经常遇到保存冲突错误时，才应更改此设置；如果不谨慎使用，可能会导致数据丢失。
  //  - askUser: 将拒绝保存并请求手动解决保存冲突。
  //  - overwriteFileOnDisk: 将通过在编辑器中用更改覆盖磁盘上的文件来解决保存冲突。
  "files.saveConflictResolution": "askUser",

  // 启用简单文件对话框。启用时，简单文件对话框将替换系统文件对话框。
  "files.simpleDialog.enable": false,

  // 启用后，保存文件时将删除在最终新行后的所有新行。
  "files.trimFinalNewlines": false,

  // 启用后，将在保存文件时删除行尾的空格。
  "files.trimTrailingWhitespace": false,

  // 配置要从文件监视中排除的路径或 glob 模式。路径可以是相对于被监视的文件夹，也可以是绝对路径。Glob 模式相对于被监视的文件夹进行匹配。当遇到文件观察程序进程消耗大量 CPU 时，请确保排除不太重要的大型文件夹(例如生成输出文件夹)。
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true,
    "**/.hg/store/**": true
  },

  // 配置额外路径以监视工作区内的更改。默认情况下，将以递归方式监视所有工作区文件夹，但符号链接的文件夹除外。可以显式添加绝对路径或相对路径，以支持作为符号链接的监视文件夹。将使用当前打开的工作区将相对路径解析为绝对路径。
  "files.watcherInclude": [],

  // 控制资源管理器是否应在打开文件时自动显示并选择文件。
  //  - true: 将显示和选择文件。
  //  - false: 不会显示和选择文件。
  //  - focusNoScroll: 文件不会滚动到视图中，但仍会获得焦点。
  "explorer.autoReveal": true,

  // 配置 glob 模式，以排除文件和文件夹在打开时在资源管理器中显示和选择的文件和文件夹。[此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)详细了解 glob 模式。
  "explorer.autoRevealExclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },

  // 控制资源管理器是否应以紧凑形式呈现文件夹。在此形式中，单个子文件夹将被压缩在组合的树元素中。例如，对 Java 包结构非常有用。
  "explorer.compactFolders": true,

  // 控制资源管理器是否应在通过回收站删除文件时要求确认。
  "explorer.confirmDelete": true,

  // 控制资源管理器是否应在通过拖放移动文件或文件夹时要求确认。
  "explorer.confirmDragAndDrop": true,

  // 控制资源管理器是否应在撤消时要求确认。
  //  - verbose: 资源管理器将在所有撤消操作之前进行提示。
  //  - default: 资源管理器将在破坏性撤消操作之前进行提示。
  //  - light: 聚焦时，资源管理器将不会在撤消操作之前进行提示。
  "explorer.confirmUndo": "default",

  // 复制相对文件路径时使用的路径分隔字符。
  //  - /: 使用斜杠作为路径分隔字符。
  //  - \: 使用反斜杠作为路径分隔字符。
  //  - auto: 使用操作系统特定路径分隔字符。
  "explorer.copyRelativePathSeparator": "auto",

  // 控制文件修饰是否应使用徽章。
  "explorer.decorations.badges": true,

  // 控制文件修饰是否应使用颜色。
  "explorer.decorations.colors": true,

  // 控制资源管理器是否应允许通过拖放来移动文件和文件夹。此设置仅影响从浏览器内部进行拖放。
  "explorer.enableDragAndDrop": true,

  // 控制资源管理器是否应支持撤消文件和文件夹操作。
  "explorer.enableUndo": true,

  // 控制是否应从资源管理器中分析和排除 .gitignore 中的条目。类似于 `files.exclude`。
  "explorer.excludeGitIgnore": false,

  // 控制资源管理器是否应在初始化期间展开仅包含一个文件夹的多根工作区
  "explorer.expandSingleFolderWorkspaces": true,

  // 控制是否已在资源管理器中启用文件嵌套。文件嵌套允许目录中的相关文件在单个父文件下以可视方式组合在一起。
  "explorer.fileNesting.enabled": false,

  // 控制是否自动扩展文件嵌套。要使此操作生效，必须设置 `explorer.fileNesting.enabled`。
  "explorer.fileNesting.expand": true,

  // 控制资源管理器中的文件嵌套。必须设置 `explorer.fileNesting.enabled` 才能让它生效。每个 __Item__ 都表示父模式，且可能包含匹配任意字符串的单个 `*` 字符。每个 __Value__ 都表示子模式的逗号分隔列表，这些子模式应显示嵌套在给定父级下。子模式可能包含多个特殊标记:
  // - `${capture}`: 匹配父模式的 `*` 的解析值
  // - `${basename}`: 匹配父文件的基名，即 `file.ts` 中的 `file`
  // - `${extname}`: 匹配父文件的扩展名，即 `file.ts` 中的 `ts`
  // - `${dirname}`: 匹配父文件的目录名，即 `src/file.ts` 中的 `src`
  // - `*`: 匹配任意字符串，每个子模式只能使用一次
  "explorer.fileNesting.patterns": {
    "*.ts": "${capture}.js",
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.tsx": "${capture}.ts",
    "tsconfig.json": "tsconfig.*.json",
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml"
  },

  // 选择在粘贴同名文件(夹)时要使用的重命名方式。
  //  - simple: 在重复名称的末尾附加单词“copy”，后面可能跟一个数字。
  //  - smart: 在重复名称的末尾添加一个数字。如果某个号码已经是名称的一部分，请尝试增加该号码。
  //  - disabled: 禁用增量命名。如果存在两个具有相同名称的文件，系统将提示你覆盖现有文件。
  "explorer.incrementalNaming": "simple",

  // “打开编辑器”窗格中显示的最小编辑器槽数。如果设置为 0，则“打开编辑器”窗格将根据编辑器数量动态重设大小。
  "explorer.openEditors.minVisible": 0,

  // 控制编辑器在“打开编辑器”窗格中的排序顺序。
  //  - editorOrder: 编辑器按编辑器标签显示的顺序排列。
  //  - alphabetical: 编辑器在每个编辑器组内按选项卡名称以字母顺序排序。
  //  - fullPath: 编辑器在每个编辑器组内按完整路径以字母顺序排序。
  "explorer.openEditors.sortOrder": "editorOrder",

  // “打开编辑器”窗格中显示的编辑器最大数量。如果设置为 0，将隐藏“打开编辑器”窗格。
  "explorer.openEditors.visible": 9,

  // 控制资源管理器中文件和文件夹基于属性的排序。启用 `explorer.fileNesting.enabled` 后，还控制嵌套文件的排序。
  //  - default: 按名称排列文件和文件夹。文件夹显示在文件前。
  //  - mixed: 按名称排列文件和文件夹。两者穿插显示。
  //  - filesFirst: 按名称排列文件和文件夹。文件显示在文件夹前。
  //  - type: 按拓展类型为文件和文件夹分组，然后按名称排列它们。文件夹显示在文件前。
  //  - modified: 按最后修改日期降序排列文件和文件夹。文件夹显示在文件前。
  //  - foldersNestsFiles: 文件和文件夹按其名称排序。文件夹显示在文件之前。具有嵌套子级的文件将显示在其他文件之前。
  "explorer.sortOrder": "default",

  // 在资源管理器中控制文件和文件夹名称的词典排序。
  //  - default: 将大写和小写名称混合在一起。
  //  - upper: 大写名称组合在一起，位于小写名称之前。
  //  - lower: 小写名称组合在一起，位于大写名称之前。
  //  - unicode: 名称按 unicode 顺序排序。
  "explorer.sortOrderLexicographicOptions": "default",

  // 在搜索视图中控制操作栏的位置。
  //  - auto: 当搜索视图较窄时将操作栏置于右侧，当搜索视图较宽时，将它紧接在内容之后。
  //  - right: 始终将操作栏放置在右侧。
  "search.actionsPosition": "right",

  // 控制是折叠还是展开搜索结果。
  //  - auto: 结果少于10个的文件将被展开。其他的则被折叠。
  //  - alwaysCollapse
  //  - alwaysExpand
  "search.collapseResults": "alwaysExpand",

  // 控制搜索文件修饰是否应使用徽章。
  "search.decorations.badges": true,

  // 控制搜索文件修饰是否应使用颜色。
  "search.decorations.colors": true,

  // 控制默认搜索结果视图模式。
  //  - tree: 将搜索结果显示为树。
  //  - list: 将搜索结果显示为列表。
  "search.defaultViewMode": "list",

  // 配置 [glob 模式](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)以在全文搜索和快速打开中排除文件和文件夹。从 "#files.exclude#" 设置继承所有 glob 模式。
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true
  },

  // 控制是否在搜索中跟踪符号链接。
  "search.followSymlinks": true,

  // 此设置已弃用。可以改为将搜索图标拖到新位置。
  // 控制搜索功能是显示在侧边栏，还是显示在水平空间更大的面板区域。
  "search.location": "sidebar",

  // 搜索缓存保留在从不关闭的扩展主机中，因此不再需要此设置。
  // 启用后，搜索服务进程将保持活动状态，而不是在一个小时不活动后关闭。这将使文件搜索缓存保留在内存中。
  "search.maintainFileSearchCache": false,

  // 控制搜索结果的最大数目，可将其设置为 “null”(空)，以返回无限结果。
  "search.maxResults": 20000,

  // 控制新的 `搜索: 在文件中查找` 和 `在文件夹中查找` 操作发生的位置: 是在搜索视图中，还是在搜索编辑器中。
  //  - view: 在面板或边栏的搜索视图中进行搜索。
  //  - reuseEditor: 在现有搜索编辑器(若有)中搜索，否则在新的搜索编辑器中进行搜索。
  //  - newEditor: 在新的搜索编辑器中搜索。
  "search.mode": "view",

  // 控制在快速打开中筛选时编辑器历史记录的排序顺序。
  //  - default: 历史记录条目按与筛选值的相关性排序。首先显示更相关的条目。
  //  - recency: 历史记录条目按最近时间排序。首先显示最近打开的条目。
  "search.quickOpen.history.filterSortOrder": "default",

  // 是否在 Quick Open 的文件结果中包含最近打开的文件。
  "search.quickOpen.includeHistory": true,

  // 控制 Quick Open 文件结果中是否包括全局符号搜索的结果。
  "search.quickOpen.includeSymbols": false,

  // 创建新的搜索编辑器时要使用的周围上下文行的默认数目。如果使用 "#search.searchEditor.reusePriorSearchConfiguration#"，则可将它设置为 "null" (空)，以使用搜索编辑器之前的配置。
  "search.searchEditor.defaultNumberOfContextLines": 1,

  // 配置在搜索编辑器中双击结果的效果。
  //  - selectWord: 双击选择光标下的单词。
  //  - goToLocation: 双击将在活动编辑器组中打开结果。
  //  - openLocationToSide: 双击会将编辑器组中的结果打开到一侧，如果尚不存在，则创建一个结果。
  "search.searchEditor.doubleClickBehaviour": "goToLocation",

  // 启用后，新的搜索编辑器将重用之前打开的搜索编辑器的包含、排除和标志。
  "search.searchEditor.reusePriorSearchConfiguration": false,

  // 在键入时搜索所有文件。
  "search.searchOnType": true,

  // 启用 `search.searchOnType#` 时，控制键入的字符与开始搜索之间的超时(以毫秒为单位)。禁用 `#search.searchOnType` 时不起作用。
  "search.searchOnTypeDebouncePeriod": 300,

  // 聚焦搜索视图时，将搜索查询更新为编辑器的所选文本。单击时或触发 "workbench.views.search.focus" 命令时会发生此情况。
  "search.seedOnFocus": false,

  // 当活动编辑器没有选定内容时，从离光标最近的字词开始进行种子设定搜索。
  "search.seedWithNearestWord": false,

  // 控制是否显示搜索结果所在的行号。
  "search.showLineNumbers": false,

  // 若搜索词全为小写，则不区分大小写进行搜索，否则区分大小写进行搜索。
  "search.smartCase": false,

  // 控制搜索结果的排序顺序。
  //  - default: 结果按文件夹和文件名按字母顺序排序。
  //  - fileNames: 结果按文件名排序，忽略文件夹顺序，按字母顺序排列。
  //  - type: 结果按文件扩展名的字母顺序排序。
  //  - modified: 结果按文件的最后修改日期按降序排序。
  //  - countDescending: 结果按每个文件的计数降序排序。
  //  - countAscending: 结果按每个文件的计数以升序排序。
  "search.sortOrder": "default",

  // 控制在搜索文件时是否使用全局 gitignore 文件(例如，从 `$HOME/.config/git/ignore`)。需要启用 `search.useIgnoreFiles`。
  "search.useGlobalIgnoreFiles": false,

  // 控制在搜索文件时是否使用 `.gitignore` 和 `.ignore` 文件。
  "search.useIgnoreFiles": true,

  // 控制在搜索文件时是否在父目录中使用 ".gitignore" 和 ".ignore" 文件。需要启用 "#search.useIgnoreFiles#"。
  "search.useParentIgnoreFiles": false,

  // 弃用。当使用仅 PCRE2 支持的正则表达式功能时，将自动使用 PCRE2。
  // 是否在文本搜索中使用 pcre2 正则表达式引擎。这允许使用一些高级正则表达式功能, 如前瞻和反向引用。但是, 并非所有 pcre2 功能都受支持-仅支持 javascript 也支持的功能。
  "search.usePCRE2": false,

  // 控制在选择或替换匹配项时是否打开“替换预览”视图。
  "search.useReplacePreview": true,

  // 已弃用。请考虑使用 "search.usePCRE2" 获取对高级正则表达式功能的支持。
  // 此设置已被弃用，将回退到 "search.usePCRE2"。
  "search.useRipgrep": true,

  // 此设置已弃用，请改用“update.mode”。
  // 配置是否接收自动更新。更改后需要重新启动。更新是从微软在线服务获取的。
  "update.channel": "default",

  // 启用在 Windows 上后台下载和安装新的 VS Code 版本。
  "update.enableWindowsBackgroundUpdates": true,

  // 配置是否接收自动更新。更改后需要重新启动。更新是从微软在线服务获取的。
  //  - none: 禁用更新。
  //  - manual: 禁用自动后台更新检查。如果手动检查更新，更新将可用。
  //  - start: 仅在启动时检查更新。禁用自动后台更新检查。
  //  - default: 启用自动更新检查。代码将定期自动检查更新。
  "update.mode": "default",

  // 在更新后显示发行说明。发行说明将从 Microsoft 联机服务中获取。
  "update.showReleaseNotes": true,

  // 控制是否应将 AltGraph+ 修饰符视为 Ctrl+Alt+。
  "keyboard.mapAltGrToCtrlAlt": false,

  // 要使用的代理设置。如果未设置，则将从 "http_proxy" 和 "https_proxy" 环境变量中继承。
  "http.proxy": "",

  // 要作为每个网络请求的 "Proxy-Authorization" 标头发送的值。
  "http.proxyAuthorization": null,

  // 控制是否根据提供的 CA 列表验证代理服务器证书。
  "http.proxyStrictSSL": true,

  // 对扩展使用代理支持。
  //  - off: 禁用对扩展的代理支持。
  //  - on: 为扩展启用代理支持。
  //  - fallback: 在未找到代理的情况下，启用扩展的代理支持，回退到请求选项。
  //  - override: 为扩展启用代理支持，覆盖请求选项。
  "http.proxySupport": "override",

  // 控制是否应从操作系统加载 CA 证书。(在 Windows 和 macOS 上, 关闭此窗口后需要重新加载窗口。)
  "http.systemCertificates": true,

  // 允许在任何文件中设置断点。
  "debug.allowBreakpointsEverywhere": false,

  // 自动显示调试器延迟解析的变量的值，例如 getter。
  "debug.autoExpandLazyVariables": false,

  // 如果存在活动调试会话，控制是否确认窗口关闭时间。
  //  - never: 从不确认。
  //  - always: 始终确认是否存在调试会话。
  "debug.confirmOnExit": "never",

  // 控制是否应在调试控制台中输入时接受建议。enter 还用于评估调试控制台中键入的任何内容。
  "debug.console.acceptSuggestionOnEnter": "off",

  // 控制调试控制台是否应在调试会话结束时自动关闭。
  "debug.console.closeOnEnd": false,

  // 控制调试控制台是否应折叠相同的行，并显示出现次数和徽章。
  "debug.console.collapseIdenticalLines": true,

  // 控制调试控制台中的字体系列。
  "debug.console.fontFamily": "default",

  // 控制调试控制台中的字号(以像素为单位)。
  "debug.console.fontSize": 14,

  // 控制调试控制台是否应建议以前键入的输入。
  "debug.console.historySuggestions": true,

  // 设置调试控制台中的行高(以像素为单位)。使用 0 可根据字号计算行高。
  "debug.console.lineHeight": 0,

  // 控制是否应在调试控制台中换行。
  "debug.console.wordWrap": true,

  // 在反汇编视图中显示源代码。
  "debug.disassemblyView.showSourceCode": true,

  // 调试器处于活动状态时的颜色状态栏
  "debug.enableStatusBarColor": true,

  // 控制调试器中断时编辑器是否应聚焦。
  "debug.focusEditorOnBreak": true,

  // 控制当调试器中断时，工作台窗口是否应获得焦点。
  "debug.focusWindowOnBreak": true,

  // 当处于调试过程中时，在编辑器中内联显示变量值。
  //  - on: 在调试时，始终在编辑器中内联显示变量值。
  //  - off: 在调试时，绝不在编辑器中内联显示变量值。
  //  - auto: 如果语言支持内联值位置，则在调试时在编辑器中内联显示变量值。
  "debug.inlineValues": "auto",

  // 控制应在何时打开内部调试控制台。
  "debug.internalConsoleOptions": "openOnFirstSessionStart",

  // 控制在运行预启动任务后遇到错误时应该怎么做。
  //  - debugAnyway: 忽略任务错误并开始调试。
  //  - showErrors: 显示问题视图且不开始调试。
  //  - prompt: 提示用户。
  //  - abort: 取消调试。
  "debug.onTaskErrors": "prompt",

  // 控制何时打开“调试”视图。
  "debug.openDebug": "openOnDebugBreak",

  // 在调试会话结束时自动打开资源管理器视图。
  "debug.openExplorerOnEnd": false,

  // 控制在启动调试会话前要保存哪些编辑器。
  //  - allEditorsInActiveGroup: 在启动调试会话之前，保存活动组中的所有编辑器。
  //  - nonUntitledEditorsInActiveGroup: 在启动调试会话之前，保存活动组中的所有编辑器(无标题的编辑器除外)。
  //  - none: 在启动调试会话之前，不保存任何编辑器。
  "debug.saveBeforeStart": "allEditorsInActiveGroup",

  // 控制断点是否应显示在概览标尺中。
  "debug.showBreakpointsInOverviewRuler": false,

  // 控制调试时是否应在编辑器中显示内联断点候选修饰。
  "debug.showInlineBreakpointCandidates": true,

  // 控制应在何时显示调试状态栏。
  //  - never: 从不在状态栏中显示调试
  //  - always: 始终在状态栏中显示调试
  //  - onFirstSessionStart: 仅于第一次启动调试后在状态栏中显示调试
  "debug.showInStatusBar": "onFirstSessionStart",

  // 控制调试子会话是否显示在调试工具栏中。当此设置为 false 时, 子会话上的 stop 命令也将停止父会话。
  "debug.showSubSessionsInToolBar": false,

  // 在集成或外部终端中启动新的调试会话之前，请清除终端。
  "debug.terminal.clearBeforeReusing": false,

  // 控制调试工具栏的位置。可在所有视图中“浮动”、在调试视图中“停靠”，也可“隐藏”。
  "debug.toolBarLocation": "floating",

  // 全局调试启动配置。应当作为跨工作区共享的 'launch.json' 的替代方法。
  "launch": {
    "configurations": [],
    "compounds": []
  },

  // 此设置已弃用，取而代之的是 `comments.openView`。
  // 控制评论面板应何时打开。
  "comments.openPanel": "openOnSessionStartWithComments",

  // 控制评论视图应何时打开。
  //  - never: 注释视图永远不会打开。
  //  - file: 批注视图将在具有注释的文件处于活动状态时打开。
  //  - firstFile: 如果在此会话期间尚未打开注释视图，则它将在带注释文件处于活动状态的会话期间首次打开。
  "comments.openView": "firstFile",

  // 确定是否在注释时间戳中使用相对时间，(例如"1 天前")。
  "comments.useRelativeTime": true,

  // 控制具有注释范围和注释的编辑器中注释栏和注释线程的可见性。注释仍可通过“注释”视图访问，并会导致以运行命令 “Comments: Toggle Editor Commenting” 切换注释的相同方式切换打开注释。
  "comments.visible": true,

  // 启用/禁用 HTML 标记的自动关闭。
  "html.autoClosingTags": true,

  // 启用/禁用自动创建 HTML 属性分配的引号。可通过 #html.completion.attributeDefaultValue#”配置引号类型。
  "html.autoCreateQuotes": true,

  // 控制接受完成时属性的默认值。
  //  - doublequotes: 属性值设置为 ""。
  //  - singlequotes: 属性值设置为 ''。
  //  - empty: 未设置属性值。
  "html.completion.attributeDefaultValue": "doublequotes",

  // 一个相对文件路径列表，这些路径指向采用[自定义数据格式](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md)的 JSON 文件。
  //
  // VS Code 在启动时加载自定义数据，从而增强它对你在 JSON 文件中指定的自定义 HTML 标记、属性和属性值的 HTML 支持。
  //
  // 文件路径与工作区相对，且仅考虑工作区文件夹设置。
  "html.customData": [],

  // 标记列表(用逗号隔开)，其中内容不应重新格式化。"null" 默认为 "pre" 标记。
  "html.format.contentUnformatted": "pre,code,textarea",

  // 启用或禁用默认 HTML 格式化程序。
  "html.format.enable": true,

  // 以逗号分隔的标记列表，其中的标记之前将有额外新行。若为 `null`，默认包含 `"head, body, /html"`。
  "html.format.extraLiners": "head, body, /html",

  // 对 `{{#foo}}` 和 `{{/foo}}` 进行格式化与缩进。
  "html.format.indentHandlebars": false,

  // 缩进 ``<head>`` 和 ``<body>`` 部分。
  "html.format.indentInnerHtml": false,

  // 保留在一个区块中的换行符的最大数量。若为 `null`，则没有限制。
  "html.format.maxPreserveNewLines": null,

  // 控制是否保留元素前已有的换行符。仅适用于元素前，不适用于标记内或文本。
  "html.format.preserveNewLines": true,

  // 接受 django、erb、handlebars 和 php 模板化语言标记。
  "html.format.templating": false,

  // 以逗号分隔的标记列表，其中的内容不会被重新格式化。若为 `null`，默认包含所有列于 https://www.w3.org/TR/html5/dom.html#phrasing-content 的标记。
  "html.format.unformatted": "wbr",

  // 在此字符串之间保留文本内容。
  "html.format.unformattedContentDelimiter": "",

  // 对属性进行换行。
  //  - auto: 仅在超出行长度时才对属性进行换行。
  //  - force: 对除第一个属性外的其他每个属性进行换行。
  //  - force-aligned: 对除第一个属性外的其他每个属性进行换行，并保持对齐。
  //  - force-expand-multiline: 对每个属性进行换行。
  //  - aligned-multiple: 当超出折行长度时，将属性进行垂直对齐。
  //  - preserve: 保留属性的包装。
  //  - preserve-aligned: 保留属性的包装，但对齐。
  "html.format.wrapAttributes": "auto",

  // 将包装的属性缩进到 N 个字符之后。使用 `null` 来使用默认缩进大小。如果将 `html.format.wrapAttributes` 设置为 “aligned”，则忽略此项。
  "html.format.wrapAttributesIndentSize": null,

  // 每行最大字符数(0 = 禁用)。
  "html.format.wrapLineLength": 120,

  // 在悬停时显示标记和属性文档。
  "html.hover.documentation": true,

  // 在悬停时显示 MDN 的引用。
  "html.hover.references": true,

  // 已弃用，请改用 "editor.linkedEditing"
  // 在匹配的 HTML 标记上启用/禁用镜像光标。
  "html.mirrorCursorOnMatchingTag": false,

  // 配置内置 HTML 语言支持是否建议 HTML5 标记、属性和值。
  "html.suggest.html5": true,

  // 跟踪 VS Code 与 HTML 语言服务器之间的通信。
  "html.trace.server": "off",

  // 配置内置的 HTML 语言支持是否对嵌入的脚本进行验证。
  "html.validate.scripts": true,

  // 配置内置 HTML 语言支持是否对嵌入的样式进行验证。
  "html.validate.styles": true,

  // 已弃用设置 "json.colorDecorators.enable"，请改用 "editor.colorDecorators"。
  // 启用或禁用颜色修饰器
  "json.colorDecorators.enable": true,

  // 启用或禁用默认 JSON 格式化程序。
  "json.format.enable": true,

  // 设置格式时保留所有现有新行。
  "json.format.keepLines": false,

  // 计算的大纲符号和折叠区域的最大数量(因性能原因而受限)。
  "json.maxItemsComputed": 5000,

  // 启用后，可以从 http 和 https 位置提取 JSON 架构。
  "json.schemaDownload.enable": true,

  // 将架构关联到当前项目中的 JSON 文件。
  "json.schemas": [],

  // 跟踪 VS Code 和 JSON 语言服务器之间的通信。
  "json.trace.server": "off",

  // 启用/禁用 JSON 验证。
  "json.validate.enable": true,

  // 通过按住 Shift 来启用将文件放入 Markdown 编辑器。需要启用 `editor.dropIntoEditor.enabled`。
  "markdown.editor.drop.enabled": true,

  // 定义应将文件复制到 Markdown 文档中的位置。这是从 Markdown 文档中匹配的 glob 到目标的映射。
  //
  // 目标可以使用以下变量:
  //
  // - `${documentFileName}` - Markdown 文档的完整文件名，例如 `readme.md`。
  // - `${documentBaseName}` - Markdown 文档的基名，例如 `readme`。
  // - `${documentExtName}` - Markdown 文档的扩展，例如 `md`。
  // - `${documentDirName}` - Markdown 文档的父目录的名称。
  // - `${documentWorkspaceFolder}` - Markdown 文档的工作区文件夹，例如 `/Users/me/myProject`。如果文件不属于工作区，则与 `${documentDirName}` 相同。
  // - `${fileName}` - 已删除的文件的文件名，例如 `image.png`。
  "markdown.experimental.copyFiles.destination": {},

  // 启用将文件粘贴到 Markdown 编辑器会插入 Markdown 链接。需要启用 `editor.experimental.pasteActions.enabled`。
  "markdown.experimental.editor.pasteLinks.enabled": true,

  // 控制应在哪里打开 Markdown 文件中的链接。
  //  - currentGroup: 打开活动编辑器组中的链接。
  //  - beside: 打开活动编辑器旁边的链接。
  "markdown.links.openLocation": "currentGroup",

  // 启用突出显示当前文档中的链接匹配项。
  "markdown.occurrencesHighlight.enabled": false,

  // 设置换行符在 Markdown 预览中的呈现方式。如果将其设置为 "true"，则将为段落内的新行创建一个 <br>。
  "markdown.preview.breaks": false,

  // 在 Markdown 预览中双击以切换到编辑器。
  "markdown.preview.doubleClickToSwitchToEditor": true,

  // 控制 Markdown 预览中使用的字体系列。
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

  // 控制 Markdown 预览中使用的字号(以像素为单位)。
  "markdown.preview.fontSize": 14,

  // 控制 Markdown 预览中使用的行高。此数值与字号相关。
  "markdown.preview.lineHeight": 1.6,

  // 将类似于 URL 的文本转换为 Markdown 预览中的链接。
  "markdown.preview.linkify": true,

  // 在 Markdown 预览中标记当前的编辑器选定内容。
  "markdown.preview.markEditorSelection": true,

  // 控制如何打开 Markdown 预览中其他 Markdown 文件的链接。
  //  - inPreview: 尝试在 Markdown 预览中打开链接。
  //  - inEditor: 尝试在编辑器中打开链接。
  "markdown.preview.openMarkdownLinks": "inPreview",

  // 滚动 Markdown 预览时，更新其编辑器视图。
  "markdown.preview.scrollEditorWithPreview": true,

  // 滚动 Markdown 编辑器时，更新其预览视图。
  "markdown.preview.scrollPreviewWithEditor": true,

  // 在 Markdown 预览中启用或一些与语言无关的替换和引文美化。
  "markdown.preview.typographer": false,

  // 要从 Markdown 预览使用的 CSS 样式表的 URL 或本地路径的列表。相对路径解释为相对于资源管理器中打开的文件夹。如果没有打开的文件夹，则解释为相对于 Markdown 文件的位置。所有 '\' 都需写为 '\\'。
  "markdown.styles": [],

  // 在 Markdown 文件中写入链接时启用路径建议。
  "markdown.suggest.paths.enabled": true,

  // 对 Markdown 扩展启用调试日志记录。
  "markdown.trace.extension": "off",

  // 跟踪 VS Code 和 Markdown 语言服务器之间的通信。
  "markdown.trace.server": "off",

  // 重命名/移动工作区中的文件时，请尝试更新 Markdown 文件中的链接。使用 `markdown.updateLinksOnFileMove.include` 配置触发链接更新的文件。
  //  - prompt: 每次移动文件时进行提示。
  //  - always: 始终自动更新链接。
  //  - never: 从不尝试更新链接且不提示。
  "markdown.updateLinksOnFileMove.enabled": "never",

  // 启用在工作区中移动或重命名目录时更新链接。
  "markdown.updateLinksOnFileMove.enableForDirectories": true,

  // 指定触发自动链接更新的文件的 Glob 模式。有关此功能的详细信息，请参阅 `markdown.updateLinksOnFileMove.enabled`。
  "markdown.updateLinksOnFileMove.include": [
    "**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
    "**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
  ],

  // 验证当前文件中的重复定义。
  "markdown.validate.duplicateLinkDefinitions.enabled": "warning",

  // 启用 Markdown 文件中的所有错误报告。
  "markdown.validate.enabled": false,

  // 验证指向 Markdown 文件中其他文件的链接，例如 `[link](/path/to/file.md)`。此操作将检查目标文件是否存在。需要启用 ·#markdown.validate.enabled#·。
  "markdown.validate.fileLinks.enabled": "warning",

  // 验证 Markdown 文件中其他文件中标头的链接片段部分，例如 `[link](/path/to/file.md#header)`。默认情况下从 `markdown.validate.fragmentLinks.enabled` 继承设置值。
  "markdown.validate.fileLinks.markdownFragmentLinks": "inherit",

  // 验证当前 Markdown 文件中标头的片段链接，例如“[link](#header)”。需要启用“#markdown.validate.enabled#”。
  "markdown.validate.fragmentLinks.enabled": "warning",

  // 配置不应被验证的链接。例如，添加 `/about` 不会验证链接 `[about](/about)`，而 `/assets/**/*.svg` 会允许你跳过对 `assets` 目录下 `.svg` 文件的任何链接的验证。
  "markdown.validate.ignoredLinks": [],

  // 验证 Markdown 文件中的引用链接，例如 `[link][ref]`。需要启用 `markdown.validate.enabled`。
  "markdown.validate.referenceLinks.enabled": "warning",

  // 验证当前文件中未使用的链接定义。
  "markdown.validate.unusedLinkDefinitions.enabled": "hint",

  // 控制是否启用内置 PHP 语言建议。支持对 PHP 全局变量和变量进行建议。
  "php.suggest.basic": true,

  // 启用/禁用内置的 PHP 验证。
  "php.validate.enable": true,

  // 指向 PHP 可执行文件。
  "php.validate.executablePath": null,

  // 不管 linter 是在 save 还是在 type 上运行。
  "php.validate.run": "onSave",

  // 启用/禁用 JSX 标记的自动关闭。
  "javascript.autoClosingTags": true,

  // 启用/禁用 JavaScript 格式化程序。
  "javascript.format.enable": true,

  // 定义逗号分隔符后面的空格处理。
  "javascript.format.insertSpaceAfterCommaDelimiter": true,

  // 定义构造函数关键字后面的空格处理方式。
  "javascript.format.insertSpaceAfterConstructor": false,

  // 定义匿名函数的函数关键字后面的空格处理。
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // 定义控制流语句中关键字后面的空格处理。
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // 定义空大括号中左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

  // 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // 定义非空大括号中左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // 定义非空中括号的左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // 定义非空小括号的左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // 定义模板字符串括号中左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // 定义 for 语句中分号之后的空格处理方式。
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

  // 定义二进制运算符后面的空格处理
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // 定义函数参数括号前的空格处理方式。
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

  // 定义控制块的左括号是否放置在新的一行。
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // 定义函数的左大括号是否放置在新的一行。
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

  // 定义如何处理可选分号。
  //  - ignore: 不要插入或删除任何分号。
  //  - insert: 在语句末尾插入分号。
  //  - remove: 删除不必要的分号。
  "javascript.format.semicolons": "ignore",

  // 为支持 `js/ts.implicitProjectConfig.checkJs`，已弃用此设置。
  // 启用或禁用 JavaScript 文件的语义检查。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。
  "javascript.implicitProjectConfig.checkJs": false,

  // 为支持 `js/ts.implicitProjectConfig.experimentalDecorators`，已弃用此设置。
  // 在不属于任何工程的 JavaScript 文件中启用或禁用 `experimentalDecorators`。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。
  "javascript.implicitProjectConfig.experimentalDecorators": false,

  // 启用/禁用枚举声明中成员值的嵌入提示:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  "javascript.inlayHints.enumMemberValues.enabled": false,

  // 启用/禁用函数签名上隐式返回类型的嵌入提示:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  "javascript.inlayHints.functionLikeReturnTypes.enabled": false,

  // 启用/禁用参数名称的叠加提示:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  //  - none: 禁用参数名称提示。
  //  - literals: 仅启用文本参数的参数名称提示。
  //  - all: 启用文本和非文本参数的参数名称提示。
  "javascript.inlayHints.parameterNames.enabled": "none",

  // 对于文本与参数名称完全相同的参数，抑制其参数名称提示。
  "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

  // 启用/禁用隐式参数类型的嵌入提示:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  "javascript.inlayHints.parameterTypes.enabled": false,

  // 启用/禁用属性声明中隐式类型的嵌入提示:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  "javascript.inlayHints.propertyDeclarationTypes.enabled": false,

  // 启用/禁用隐式变量类型的嵌入提示:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  "javascript.inlayHints.variableTypes.enabled": false,

  // 抑制关于名称与类型名称相同的变量的类型提示。需要在工作区中使用 TypeScript 4.8+。
  "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  // 指定要从自动导入中排除的文件的 glob 模式。需要在工作区中使用 TypeScript 4.8 或更高版本。
  "javascript.preferences.autoImportFileExcludePatterns": [],

  // 自动 import 语句中路径的首选样式。
  //  - shortest: 仅当有路径段少于相关导入路径段的不相关导入时，才首选不相关导入。
  //  - relative: 首选导入文件位置的相对路径。
  //  - non-relative: 根据在 `jsconfig.json` / `tsconfig.json` 中配置的 `baseUrl` 或 `paths` 首选不相关导入。
  //  - project-relative: 仅当相对导入路径从包或项目目录中移除后，才首选使用非相对导入。
  "javascript.preferences.importModuleSpecifier": "shortest",

  // 自动导入的首选路径结尾。
  //  - auto: 使用项目设置选择默认值。
  //  - minimal: 将 "./component/index.js" 缩短为 "./component"。
  //  - index: 将 "./component/index.js" 缩短为 "./component/index"。
  //  - js: 不要缩短路径结尾;包括".js"扩展名。
  "javascript.preferences.importModuleSpecifierEnding": "auto",

  // JSX 属性完成的首选样式。
  //  - auto: 根据属性类型，在属性名称后插入 `={}` or `=""`。请参见 `javascript.preferences.quoteStyle`，控制用于字符串属性的引号样式。
  //  - braces: 在属性名称后插入 `={}`。
  //  - none: 仅插入属性名称。
  "javascript.preferences.jsxAttributeCompletionStyle": "auto",

  // 用于快速修复的首选引文样式。
  //  - auto: 从现有代码推断引号类型
  //  - single: 始终使用单引号: `'`
  //  - double: 始终使用双引号: `"`
  "javascript.preferences.quoteStyle": "auto",

  // 设置 "typescript.preferences.renameShorthandProperties" 已被弃用，取而代之的是 "typescript.preferences.useAliasesForRenames"
  // 启用/禁用在重命名期间为对象速记属性引入别名。
  "javascript.preferences.renameShorthandProperties": true,

  // 启用/禁用在重命名期间为对象速记属性引入别名。
  "javascript.preferences.useAliasesForRenames": true,

  // 启用/禁用在 JavaScript 文件中引用 CodeLens。
  "javascript.referencesCodeLens.enabled": false,

  // 启用/禁用在 JavaScript 文件中对所有函数的 CodeLens 引用。
  "javascript.referencesCodeLens.showOnAllFunctions": false,

  // 启用/禁用自动导入建议。
  "javascript.suggest.autoImports": true,

  // 启用/禁用类成员的代码段完成。
  "javascript.suggest.classMemberSnippets.enabled": true,

  // 完成函数的参数签名。
  "javascript.suggest.completeFunctionCalls": false,

  // 启用/禁用对完成 JSDoc 注释的建议。
  "javascript.suggest.completeJSDocs": true,

  // 启用或禁用自动完成建议。
  "javascript.suggest.enabled": true,

  // 启用/禁用显示可能未定义的值的完成情况，这些值会插入可选的链式调用。需要启用严格的 Null 检查。
  "javascript.suggest.includeAutomaticOptionalChainCompletions": true,

  // 对部分键入的导入语句启用/禁用自动导入样式完成。
  "javascript.suggest.includeCompletionsForImportStatements": true,

  // 启用/禁用为 JSDoc 模板生成 `@returns` 批注。
  "javascript.suggest.jsdoc.generateReturns": true,

  // 启用/禁用在 JavaScript 建议中包含文件中的唯一名称。请注意，在使用`@ts-check`或`checkJs`进行语义检查的 JavaScript 代码中，名称建议始终处于禁用状态。
  "javascript.suggest.names": true,

  // 在 import 语句和 require 调用中，启用或禁用路径建议。
  "javascript.suggest.paths": true,

  // 启用或禁用编辑器中 JavaScript 文件的建议诊断。
  "javascript.suggestionActions.enabled": true,

  // 启用或禁用在 VS Code 中重命名或移动文件时自动更新导入路径的功能。
  //  - prompt: 在每次重命名时进行提示。
  //  - always: 始终自动更新路径。
  //  - never: 一律不要重命名路径，也不要提示。
  "javascript.updateImportsOnFileMove.enabled": "prompt",

  // 启用/禁用 JavaScript 验证。
  "javascript.validate.enable": true,

  // 启用或禁用 JavaScript 文件的语义检查。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。
  "js/ts.implicitProjectConfig.checkJs": false,

  // 在不属于任何工程的 JavaScript 文件中启用或禁用 `experimentalDecorators`。现有 `jsconfig.json` 或 `tsconfig.json` 文件将覆盖此设置。
  "js/ts.implicitProjectConfig.experimentalDecorators": false,

  // 设置程序的模块系统。查看详细信息: https://www.typescriptlang.org/tsconfig#module。
  "js/ts.implicitProjectConfig.module": "ESNext",

  // 在不属于项目的 JavaScript 和 TypeScript 文件中启用/禁用[严格函数类型](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)。现有 `jsconfig.json` 或 `tsconfig.json` 文件将替代此设置。
  "js/ts.implicitProjectConfig.strictFunctionTypes": true,

  // 在不属于项目的 JavaScript 和 TypeScript 文件中启用/禁用[严格 null 检查](https://www.typescriptlang.org/tsconfig#strictNullChecks)。现有 `jsconfig.json` 或 `tsconfig.json` 文件将替代此设置。
  "js/ts.implicitProjectConfig.strictNullChecks": true,

  // 为发出的 JavaScript 设置目标 JavaScript 语言版本并包含库声明。查看详细信息: https://www.typescriptlang.org/tsconfig#target。
  "js/ts.implicitProjectConfig.target": "ES2020",

  // 启用/禁用 JSX 标记的自动关闭。
  "typescript.autoClosingTags": true,

  // 检查是否为 [自动类型获取](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) 安装了 npm 。
  "typescript.check.npmIsInstalled": true,

  // 禁用 [自动类型获取](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) 。自动类型获取可以从 npm 提取 `@types` 包来改进外部库的 IntelliSense。
  "typescript.disableAutomaticTypeAcquisition": false,

  // 允许提示用户对 Intellisense 使用在工作区中配置的 TypeScript 版本。
  "typescript.enablePromptUseWorkspaceTsdk": false,

  // 在 Web 上启用/禁用项目范围内的 IntelliSense。要求 VS Code 在受信任的上下文中运行。
  "typescript.experimental.tsserver.web.enableProjectWideIntellisense": false,

  // 启用/禁用默认 TypeScript 格式化程序。
  "typescript.format.enable": true,

  // 定义逗号分隔符后面的空格处理。
  "typescript.format.insertSpaceAfterCommaDelimiter": true,

  // 定义构造函数关键字后面的空格处理方式。
  "typescript.format.insertSpaceAfterConstructor": false,

  // 定义匿名函数的函数关键字后面的空格处理。
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // 定义控制流语句中关键字后面的空格处理。
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // 定义空大括号中左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

  // 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // 定义非空大括号中左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // 定义非空中括号的左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // 定义非空小括号的左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // 定义模板字符串括号中左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // 定义 for 语句中分号之后的空格处理方式。
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

  // 定义 TypeScript 中类型断言后的空格处理方式。
  "typescript.format.insertSpaceAfterTypeAssertion": false,

  // 定义二进制运算符后面的空格处理
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // 定义函数参数括号前的空格处理方式。
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

  // 定义控制块的左括号是否放置在新的一行。
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // 定义函数的左大括号是否放置在新的一行。
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

  // 定义如何处理可选分号。
  //  - ignore: 不要插入或删除任何分号。
  //  - insert: 在语句末尾插入分号。
  //  - remove: 删除不必要的分号。
  "typescript.format.semicolons": "ignore",

  // 启用或禁用实现 CodeLens。此 CodeLens 显示接口的实现。
  "typescript.implementationsCodeLens.enabled": false,

  // 启用/禁用枚举声明中成员值的嵌入提示:
  // ```typescript
  //
  // enum MyValue {
  // 	A /* = 0 */;
  // 	B /* = 1 */;
  // }
  //
  // ```
  "typescript.inlayHints.enumMemberValues.enabled": false,

  // 启用/禁用函数签名上隐式返回类型的嵌入提示:
  // ```typescript
  //
  // function foo() /* :number */ {
  // 	return Date.now();
  // }
  //
  // ```
  "typescript.inlayHints.functionLikeReturnTypes.enabled": false,

  // 启用/禁用参数名称的叠加提示:
  // ```typescript
  //
  // parseInt(/* str: */ '123', /* radix: */ 8)
  //
  // ```
  //  - none: 禁用参数名称提示。
  //  - literals: 仅启用文本参数的参数名称提示。
  //  - all: 启用文本和非文本参数的参数名称提示。
  "typescript.inlayHints.parameterNames.enabled": "none",

  // 对于文本与参数名称完全相同的参数，抑制其参数名称提示。
  "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

  // 启用/禁用隐式参数类型的嵌入提示:
  // ```typescript
  //
  // el.addEventListener('click', e /* :MouseEvent */ => ...)
  //
  // ```
  "typescript.inlayHints.parameterTypes.enabled": false,

  // 启用/禁用属性声明中隐式类型的嵌入提示:
  // ```typescript
  //
  // class Foo {
  // 	prop /* :number */ = Date.now();
  // }
  //
  // ```
  "typescript.inlayHints.propertyDeclarationTypes.enabled": false,

  // 启用/禁用隐式变量类型的嵌入提示:
  // ```typescript
  //
  // const foo /* :number */ = Date.now();
  //
  // ```
  "typescript.inlayHints.variableTypes.enabled": false,

  // 抑制关于名称与类型名称相同的变量的类型提示。需要在工作区中使用 TypeScript 4.8+。
  "typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

  // 设置在报告 JavaScript 和 TypeScript 错误时使用的区域设置。默认使用 VS Code 的区域设置。
  "typescript.locale": "auto",

  // 指定为 [自动类型获取](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) 使用的 npm 可执行文件的路径。
  "typescript.npm": "",

  // 指定要从自动导入中排除的文件的 glob 模式。需要在工作区中使用 TypeScript 4.8 或更高版本。
  "typescript.preferences.autoImportFileExcludePatterns": [],

  // 自动 import 语句中路径的首选样式。
  //  - shortest: 仅当有路径段少于相关导入路径段的不相关导入时，才首选不相关导入。
  //  - relative: 首选导入文件位置的相对路径。
  //  - non-relative: 根据在 `jsconfig.json` / `tsconfig.json` 中配置的 `baseUrl` 或 `paths` 首选不相关导入。
  //  - project-relative: 仅当相对导入路径从包或项目目录中移除后，才首选使用非相对导入。
  "typescript.preferences.importModuleSpecifier": "shortest",

  // 自动导入的首选路径结尾。
  //  - auto: 使用项目设置选择默认值。
  //  - minimal: 将 "./component/index.js" 缩短为 "./component"。
  //  - index: 将 "./component/index.js" 缩短为 "./component/index"。
  //  - js: 不要缩短路径结尾;包括".js"扩展名。
  "typescript.preferences.importModuleSpecifierEnding": "auto",

  // 允许/禁止在 "package.json" 依赖项中搜索可用的自动导入。
  //  - auto: 根据预估的性能影响搜索依赖项。
  //  - on: 始终搜索依赖项。
  //  - off: 从不搜索依赖项。
  "typescript.preferences.includePackageJsonAutoImports": "auto",

  // JSX 属性完成的首选样式。
  //  - auto: 根据属性类型，在属性名称后插入 `={}` or `=""`。请参见 `typescript.preferences.quoteStyle`，控制用于字符串属性的引号样式。
  //  - braces: 在属性名称后插入 `={}`。
  //  - none: 仅插入属性名称。
  "typescript.preferences.jsxAttributeCompletionStyle": "auto",

  // 用于快速修复的首选引文样式。
  //  - auto: 从现有代码推断引号类型
  //  - single: 始终使用单引号: `'`
  //  - double: 始终使用双引号: `"`
  "typescript.preferences.quoteStyle": "auto",

  // 设置 "typescript.preferences.renameShorthandProperties" 已被弃用，取而代之的是 "typescript.preferences.useAliasesForRenames"
  // 启用/禁用在重命名期间为对象速记属性引入别名。
  "typescript.preferences.renameShorthandProperties": true,

  // 启用/禁用在重命名期间为对象速记属性引入别名。
  "typescript.preferences.useAliasesForRenames": true,

  // 在 TypeScript 文件中启用或禁用引用 CodeLens。
  "typescript.referencesCodeLens.enabled": false,

  // 启用/禁用在 TypeScript 文件中的所有函数上引用 CodeLens。
  "typescript.referencesCodeLens.showOnAllFunctions": false,

  // 将风格检查的问题报告为警告。
  "typescript.reportStyleChecksAsWarnings": true,

  // 启用/禁用自动导入建议。
  "typescript.suggest.autoImports": true,

  // 启用/禁用类成员的代码段完成。
  "typescript.suggest.classMemberSnippets.enabled": true,

  // 完成函数的参数签名。
  "typescript.suggest.completeFunctionCalls": false,

  // 启用/禁用对完成 JSDoc 注释的建议。
  "typescript.suggest.completeJSDocs": true,

  // 启用或禁用自动完成建议。
  "typescript.suggest.enabled": true,

  // 启用/禁用显示可能未定义的值的完成情况，这些值会插入可选的链式调用。需要启用严格的 Null 检查。
  "typescript.suggest.includeAutomaticOptionalChainCompletions": true,

  // 对部分键入的导入语句启用/禁用自动导入样式完成。
  "typescript.suggest.includeCompletionsForImportStatements": true,

  // 启用/禁用为 JSDoc 模板生成 `@returns` 批注。
  "typescript.suggest.jsdoc.generateReturns": true,

  // 启用/禁用对象文本中的方法的代码片段完成。需要在工作区中使用 TypeScript 4.7+。
  "typescript.suggest.objectLiteralMethodSnippets.enabled": true,

  // 在 import 语句和 require 调用中，启用或禁用路径建议。
  "typescript.suggest.paths": true,

  // 启用或禁用编辑器中 TypeScript 文件的建议诊断。
  "typescript.suggestionActions.enabled": true,

  // 启用或禁用偶尔出现的有关 JavaScript 和 TypeScript 的调查，帮助我们改善 VS Code 对两者的支持。
  "typescript.surveys.enabled": true,

  // 控制对 tsc 任务的自动检测。
  //  - on: 同时创建生成和监视任务。
  //  - off: 禁用此功能。
  //  - build: 仅创建单次运行编译任务。
  //  - watch: 仅创建编译和监视任务。
  "typescript.tsc.autoDetect": "on",

  // 指定 TypeScript 安装下用于 IntelliSense 的 tsserver 和 `lib*.d.ts` 文件的文件夹路径，例如: `./node_modules/typescript/lib`。
  //
  // - 当指定为用户设置时，`typescript.tsdk` 中的 TypeScript 版本会自动替换内置的 TypeScript 版本。
  // - 当指定为工作区设置时，`typescript.tsdk` 允许通过 `TypeScript: Select TypeScript version` 命令切换为对 IntelliSense 使用 TypeScript 的该工作区版本。
  //
  // 有关管理 TypeScript 版本的更多详细信息，请参阅 [TypeScript文档](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions)。
  "typescript.tsdk": "",

  // 允许将 TS 服务器性能跟踪保持到目录。这些跟踪文件可用于诊断 TS 服务器性能问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。
  "typescript.tsserver.enableTracing": false,

  // (实验性)启用项目范围的错误报告。
  "typescript.tsserver.experimental.enableProjectDiagnostics": false,

  // 将 TS 服务器的日志保存到一个文件。此日志可用于诊断 TS 服务器问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。
  "typescript.tsserver.log": "off",

  // 要分配给 TypeScript 服务器进程的最大内存量(MB)。
  "typescript.tsserver.maxTsServerMemory": 3072,

  // 其他用于搜索 TypeScript 语言服务插件的路径。
  "typescript.tsserver.pluginPaths": [],

  // 对发送到 TS 服务器的消息启用跟踪。此跟踪信息可用于诊断 TS 服务器问题。 跟踪信息可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。
  "typescript.tsserver.trace": "off",

  // 此设置已弃用，取而代之的是“typescript.tsserver.useSyntaxServer”。
  // 启用/禁用生成可更快地响应语法相关操作的单独 TypeScript 服务器，例如计算折叠或计算文档符号。
  "typescript.tsserver.useSeparateSyntaxServer": true,

  // 控制 TypeScript 是否启动专用服务器，以便更快地处理与语法相关的运算，如计算代码折叠。
  //  - always: 使用更加轻量级的语法服务器来处理所有 IntelliSense 运算。此语法服务器只能为打开的文件提供 IntelliSense。
  //  - never: 请不要使用专用的语法服务器。使用单个服务器来处理所有 IntelliSense 运算。
  //  - auto: 生成一个完整的服务器和一个专用于语法运算的轻量级服务器。语法服务器用于加快语法运算并在加载项目时提供 IntelliSense。
  "typescript.tsserver.useSyntaxServer": "auto",

  // 配置应使用哪些监视策略来跟踪文件和目录。
  "typescript.tsserver.watchOptions": {},

  // 启用或禁用在 VS Code 中重命名或移动文件时自动更新导入路径的功能。
  //  - prompt: 在每次重命名时进行提示。
  //  - always: 始终自动更新路径。
  //  - never: 一律不要重命名路径，也不要提示。
  "typescript.updateImportsOnFileMove.enabled": "prompt",

  // 启用/禁用 TypeScript 验证。
  "typescript.validate.enable": true,

  // 通过[转到工作区中的符号](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)来控制搜索的具体文件。
  //  - allOpenProjects: 在所有打开的 JavaScript 或 TypeScript 项目中搜索符号。
  //  - currentProject: 仅在当前 JavaScript 或 TypeScript 项目中搜索符号。
  "typescript.workspaceSymbols.scope": "allOpenProjects",

  // 打开“#testing.followRunningTest#”时，始终显示已执行的测试。如果关闭此设置，则只会显示失败的测试。
  "testing.alwaysRevealTestOnStateChange": false,

  // 配置何时自动打开错误“速览”视图。
  //  - failureAnywhere: 无论故障在何处，都自动打开。
  //  - failureInVisibleDocument: 在可见文档中测试失败时自动打开。
  //  - never: 从不自动打开。
  "testing.automaticallyOpenPeekView": "failureInVisibleDocument",

  // 控制是否在连续运行模式期间自动打开“速览”视图。
  "testing.automaticallyOpenPeekViewDuringAutoRun": false,

  // 将测试标记为过时并启动新运行后等待的时间(以毫秒为单位)。
  "testing.autoRun.delay": 1000,

  // 控制在装订线中左键单击测试修饰时要执行的操作。
  //  - run: 运行测试。
  //  - debug: 调试测试。
  //  - contextMenu: 打开上下文菜单以获取更多选项。
  "testing.defaultGutterClickAction": "run",

  // 控制是否应在“测试资源管理器”视图中遵循正在运行的测试。
  "testing.followRunningTest": true,

  // 控制是否在编辑器装订线中显示测试修饰。
  "testing.gutterEnabled": true,

  // 控制何时打开测试视图。
  //  - neverOpen: 从不自动打开测试视图
  //  - openOnTestStart: 在测试启动时打开测试视图
  //  - openOnTestFailure: 任何测试失败时打开测试视图
  "testing.openTesting": "openOnTestStart",

  // 控制是否在运行测试之前保存所有脏编辑器。
  "testing.saveBeforeTest": true,

  // 补全 CSS 属性时在行尾插入分号。
  "css.completion.completePropertyWithSemicolon": true,

  // 默认情况下，VS Code 在选择 CSS 属性后触发属性值完成。使用此设置可禁用此行为。
  "css.completion.triggerPropertyValueCompletion": true,

  // 一个相对文件路径列表，这些路径指向采用[自定义数据格式](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md)的 JSON 文件。
  //
  // VS Code 在启动时加载自定义数据，从而增强它对你在 JSON 文件中指定的自定义 CSS 属性、at 指令、伪类和伪元素的 CSS 支持。
  //
  // 这些文件路径与工作区相对，且只考虑工作区文件夹设置。
  "css.customData": [],

  // 将大括号放在规则的同一行(`折叠`)或将大括号放在自己所在行上(`展开`)。
  "css.format.braceStyle": "collapse",

  // 启用/禁用默认的 CSS 格式化程序。
  "css.format.enable": true,

  // 启用 `css.format.preserveNewLines` 后要在一个区块中保留的最大换行符数。
  "css.format.maxPreserveNewLines": null,

  // 用空白行分隔规则集。
  "css.format.newlineBetweenRules": true,

  // 用新行分隔选择器。
  "css.format.newlineBetweenSelectors": true,

  // 是否应保留元素之前的现有换行符。
  "css.format.preserveNewLines": true,

  // 确保选择器分隔符 '>'、'+'、'~' (例如 `a > b`)周围有空格字符。
  "css.format.spaceAroundSelectorSeparator": false,

  // 在 CSS 悬停时显示标记和属性文档。
  "css.hover.documentation": true,

  // 在 CSS 悬停时显示 MDN 的引用。
  "css.hover.references": true,

  // 参数数目无效。
  "css.lint.argumentsInColorFunction": "error",

  // 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。
  "css.lint.boxModel": "ignore",

  // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
  "css.lint.compatibleVendorPrefixes": "ignore",

  // 不要使用重复的样式定义。
  "css.lint.duplicateProperties": "ignore",

  // 不要使用空规则集。
  "css.lint.emptyRules": "warning",

  // 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。
  "css.lint.float": "ignore",

  // `@font-face` 规则必须定义 `src` 和 `font-family` 属性。
  "css.lint.fontFaceProperties": "warning",

  // 十六进制颜色必须由三个或六个十六进制数字组成。
  "css.lint.hexColorLength": "error",

  // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
  "css.lint.idSelector": "ignore",

  // 仅在需要支持 IE7 及更低版本时，才需要 IE hack。
  "css.lint.ieHack": "ignore",

  // 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。
  "css.lint.important": "ignore",

  // import 语句没有并行加载。
  "css.lint.importStatement": "ignore",

  // 由于 `display` 属性值，属性被忽略。例如，使用 `display: inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。
  "css.lint.propertyIgnoredDueToDisplay": "warning",

  // 通配选择符 (`*`) 的运行效率低。
  "css.lint.universalSelector": "ignore",

  // 未知的 @ 规则。
  "css.lint.unknownAtRules": "warning",

  // 未知的属性。
  "css.lint.unknownProperties": "warning",

  // 未知的供应商特定属性。
  "css.lint.unknownVendorSpecificProperties": "ignore",

  // 不根据 "unknownProperties" 规则进行验证的属性列表。
  "css.lint.validProperties": [],

  // 使用厂商特定的前缀时，同时添加标准属性。
  "css.lint.vendorPrefix": "warning",

  // 零不需要单位。
  "css.lint.zeroUnits": "ignore",

  // 跟踪 VS Code 与 CSS 语言服务器之间的通信。
  "css.trace.server": "off",

  // 启用或禁用所有验证。
  "css.validate": true,

  // 补全 CSS 属性时在行尾插入分号。
  "less.completion.completePropertyWithSemicolon": true,

  // 默认情况下，VS Code 在选择 CSS 属性后触发属性值完成。使用此设置可禁用此行为。
  "less.completion.triggerPropertyValueCompletion": true,

  // 将大括号放在规则的同一行(`折叠`)或将大括号放在自己所在行上(`展开`)。
  "less.format.braceStyle": "collapse",

  // 启用/禁用默认的 LESS 格式化程序。
  "less.format.enable": true,

  // 启用 `less.format.preserveNewLines` 后要在一个区块中保留的最大换行符数。
  "less.format.maxPreserveNewLines": null,

  // 用空白行分隔规则集。
  "less.format.newlineBetweenRules": true,

  // 用新行分隔选择器。
  "less.format.newlineBetweenSelectors": true,

  // 是否应保留元素之前的现有换行符。
  "less.format.preserveNewLines": true,

  // 确保选择器分隔符 '>'、'+'、'~' (例如 `a > b`)周围有空格字符。
  "less.format.spaceAroundSelectorSeparator": false,

  // 在 LESS 悬停时显示标记和属性文档。
  "less.hover.documentation": true,

  // 在 LESS 悬停时显示 MDN 的引用。
  "less.hover.references": true,

  // 参数数目无效。
  "less.lint.argumentsInColorFunction": "error",

  // 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。
  "less.lint.boxModel": "ignore",

  // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
  "less.lint.compatibleVendorPrefixes": "ignore",

  // 不要使用重复的样式定义。
  "less.lint.duplicateProperties": "ignore",

  // 不要使用空规则集。
  "less.lint.emptyRules": "warning",

  // 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。
  "less.lint.float": "ignore",

  // `@font-face` 规则必须定义 `src` 和 `font-family` 属性。
  "less.lint.fontFaceProperties": "warning",

  // 十六进制颜色必须由三个或六个十六进制数字组成。
  "less.lint.hexColorLength": "error",

  // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
  "less.lint.idSelector": "ignore",

  // 仅在需要支持 IE7 及更低版本时，才需要 IE hack。
  "less.lint.ieHack": "ignore",

  // 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。
  "less.lint.important": "ignore",

  // import 语句没有并行加载。
  "less.lint.importStatement": "ignore",

  // 由于 `display` 属性值，属性被忽略。例如，使用 `display: inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。
  "less.lint.propertyIgnoredDueToDisplay": "warning",

  // 通配选择符 (`*`) 的运行效率低。
  "less.lint.universalSelector": "ignore",

  // 未知的 @ 规则。
  "less.lint.unknownAtRules": "warning",

  // 未知的属性。
  "less.lint.unknownProperties": "warning",

  // 未知的供应商特定属性。
  "less.lint.unknownVendorSpecificProperties": "ignore",

  // 不根据 "unknownProperties" 规则进行验证的属性列表。
  "less.lint.validProperties": [],

  // 使用厂商特定的前缀时，同时添加标准属性。
  "less.lint.vendorPrefix": "warning",

  // 零不需要单位。
  "less.lint.zeroUnits": "ignore",

  // 启用或禁用所有验证。
  "less.validate": true,

  // 补全 CSS 属性时在行尾插入分号。
  "scss.completion.completePropertyWithSemicolon": true,

  // 默认情况下，VS Code 在选择 CSS 属性后触发属性值完成。使用此设置可禁用此行为。
  "scss.completion.triggerPropertyValueCompletion": true,

  // 将大括号放在规则的同一行(`折叠`)或将大括号放在自己所在行上(`展开`)。
  "scss.format.braceStyle": "collapse",

  // 启用/禁用默认的 SCSS 格式化程序。
  "scss.format.enable": true,

  // 启用 `scss.format.preserveNewLines` 后要在一个区块中保留的最大换行符数。
  "scss.format.maxPreserveNewLines": null,

  // 用空白行分隔规则集。
  "scss.format.newlineBetweenRules": true,

  // 用新行分隔选择器。
  "scss.format.newlineBetweenSelectors": true,

  // 是否应保留元素之前的现有换行符。
  "scss.format.preserveNewLines": true,

  // 确保选择器分隔符 '>'、'+'、'~' (例如 `a > b`)周围有空格字符。
  "scss.format.spaceAroundSelectorSeparator": false,

  // 在 SCSS 悬停时显示标记和属性文档。
  "scss.hover.documentation": true,

  // 在 SCSS 悬停时显示 MDN 的引用。
  "scss.hover.references": true,

  // 参数数目无效。
  "scss.lint.argumentsInColorFunction": "error",

  // 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。
  "scss.lint.boxModel": "ignore",

  // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
  "scss.lint.compatibleVendorPrefixes": "ignore",

  // 不要使用重复的样式定义。
  "scss.lint.duplicateProperties": "ignore",

  // 不要使用空规则集。
  "scss.lint.emptyRules": "warning",

  // 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。
  "scss.lint.float": "ignore",

  // `@font-face` 规则必须定义 `src` 和 `font-family` 属性。
  "scss.lint.fontFaceProperties": "warning",

  // 十六进制颜色必须由三个或六个十六进制数字组成。
  "scss.lint.hexColorLength": "error",

  // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
  "scss.lint.idSelector": "ignore",

  // 仅在需要支持 IE7 及更低版本时，才需要 IE hack。
  "scss.lint.ieHack": "ignore",

  // 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。
  "scss.lint.important": "ignore",

  // import 语句没有并行加载。
  "scss.lint.importStatement": "ignore",

  // 由于 `display` 属性值，属性被忽略。例如，使用 `display: inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。
  "scss.lint.propertyIgnoredDueToDisplay": "warning",

  // 通配选择符 (`*`) 的运行效率低。
  "scss.lint.universalSelector": "ignore",

  // 未知的 @ 规则。
  "scss.lint.unknownAtRules": "warning",

  // 未知的属性。
  "scss.lint.unknownProperties": "warning",

  // 未知的供应商特定属性。
  "scss.lint.unknownVendorSpecificProperties": "ignore",

  // 不根据 "unknownProperties" 规则进行验证的属性列表。
  "scss.lint.validProperties": [],

  // 使用厂商特定的前缀时，同时添加标准属性。
  "scss.lint.vendorPrefix": "warning",

  // 零不需要单位。
  "scss.lint.zeroUnits": "ignore",

  // 启用或禁用所有验证。
  "scss.validate": true,

  // 启用后，将自动检查扩展更新。若扩展存在更新，将在“扩展”视图中将其标记为过时扩展。更新将从 Microsoft 联机服务中获取。
  "extensions.autoCheckUpdates": true,

  // 控制扩展的自动更新行为。更新是从 Microsoft 联机服务中获取的。
  //  - true: 将忽略除这些更新之外的所有扩展自动下载和安装更新。
  //  - onlyEnabledExtensions: 仅对启用的扩展自动下载和安装更新，但忽略这些更新。禁用的扩展不会自动更新。
  //  - false: 扩展不会自动更新。
  "extensions.autoUpdate": true,

  // 启用后，将在离开“扩展”视图时，自动关闭扩展详细信息页面。
  "extensions.closeExtensionDetailsOnViewChange": false,

  // 当此处列出扩展名时，该扩展名处理URI时将不会显示确认提示。
  "extensions.confirmedUriHandlerExtensionIds": [],

  // 配置要在其他扩展主机进程中执行的扩展。
  "extensions.experimental.affinity": {},

  // 启用后，将使用新的 UtilityProcess Electron API 启动扩展主机。
  "extensions.experimental.useUtilityProcess": true,

  // 启用后，将不会显示扩展建议的通知。
  "extensions.ignoreRecommendations": false,

  // 已弃用此设置。使用 extensions.ignoreRecommendations 设置来控制建议通知。默认使用“扩展”视图的可见性操作来隐藏“建议”视图。
  //
  "extensions.showRecommendationsOnlyOnDemand": false,

  // 替代扩展的不受信任的工作区支持。将始终启用使用 “true” 的扩展。将始终启用使用 “limited” 的扩展，并且扩展将隐藏需要信任的功能。仅当工作区受信任时才会启用使用 “false” 的扩展。
  "extensions.supportUntrustedWorkspaces": {},

  // 替代扩展的虚拟工作区支持。
  "extensions.supportVirtualWorkspaces": {},

  // 启用 Web Worker 扩展主机。
  //  - true: Web 辅助角色扩展主机将始终启动。
  //  - false: Web 辅助角色扩展主机将永远不会启动。
  //  - auto: Web 辅助角色扩展主机将在 Web 扩展需要时启动。
  "extensions.webWorker": "auto",

  // 同步时要忽略的扩展列表。扩展的标识符始终为 "${publisher}.${name}"。例如: "vscode.csharp"。
  "settingsSync.ignoredExtensions": [],

  // 配置在同步时要忽略的设置。
  "settingsSync.ignoredSettings": [],

  // 为每个平台同步键绑定。
  "settingsSync.keybindingsPerPlatform": true,

  // 在输出视图中启用或禁用「智能滚动」。「智能滚动」会自动在你点击输出视图时锁定滚动，并在你点击最后一行时解锁滚动。
  "output.smartScroll.enabled": true,

  // 控制默认情况下是否折叠交互窗口中的代码单元格。
  "interactiveWindow.collapseCellInputCode": "fromEditor",

  // 启用的笔记本痕迹包含代码单元格时。
  "notebook.breadcrumbs.showCodeCells": true,

  // 控制焦点指示器呈现位置(是沿单元格边框，还是在左侧装订线上)。
  "notebook.cellFocusIndicator": "gutter",

  // 应在何处显示单元格工具栏，或是否隐藏它。
  "notebook.cellToolbarLocation": {
    "default": "right"
  },

  // 是否应在悬停或单击时显示单元格工具栏。
  "notebook.cellToolbarVisibility": "click",

  // 控制是否应以紧凑形式呈现笔记本编辑器。例如在打开时，它将减小左边距宽度。
  "notebook.compactView": true,

  // 控制是否应在输出工具栏中呈现输出操作。
  "notebook.consolidatedOutputButton": true,

  // 控制是否在“运行”按钮旁边的下拉列表中显示额外操作。
  "notebook.consolidatedRunButton": false,

  // 是否对笔记本使用增强的文本差异编辑器。
  "notebook.diff.enablePreview": true,

  // 隐藏元数据差异
  "notebook.diff.ignoreMetadata": false,

  // 隐藏输出差异
  "notebook.diff.ignoreOutputs": false,

  // 输出项 mime 类型的优先级列表
  "notebook.displayOrder": [],

  // 控制笔记本编辑器是否应允许通过拖放移动单元格。
  "notebook.dragAndDropEnabled": true,

  // 用于笔记本中使用的代码编辑器的设置。这可用于自定义大多数编辑器*设置。
  "notebook.editorOptionsCustomizations": {},

  // 超过限制时，为笔记本输出使用可滚动区域
  "notebook.experimental.outputScrolling": false,

  // 控制是否在笔记本编辑器中呈现全局工具栏。
  "notebook.globalToolbar": true,

  // 控制笔记本工具栏上的操作是否应呈现标签。
  "notebook.globalToolbarShowLabel": "always",

  // 控制插入单元格操作应出现的位置。
  //  - betweenCells: 在单元格之间悬停时显示的工具栏。
  //  - notebookToolbar: 位于笔记本编辑器顶部的工具栏。
  //  - both: 两个工具栏。
  //  - hidden: 插入操作不会出现在任何位置。
  "notebook.insertToolbarLocation": "both",

  // 控制要使用的内核选取器类型。
  //  - all: 显示所有内核。
  //  - mru: 试验: 显示最近使用的内核。
  "notebook.kernelPicker.type": "all",

  // 控制单元格编辑器中行号的显示。
  "notebook.lineNumbers": "off",

  // 为笔记本支持启用日志记录。
  "notebook.logging": false,

  // 控制笔记本中呈现的标记的字号(以像素为单位)。设置为 `0` 时，将使用 120% 的 `editor.fontSize`。
  "notebook.markup.fontSize": 0,

  // 启用后，当单元格编辑器中的当前光标位于第/最后一行时，光标可以导航到下/上一个单元格。
  "notebook.navigation.allowNavigateToSurroundingCells": true,

  // 启用笔记本大纲时，显示代码单元格。
  "notebook.outline.showCodeCells": false,

  // 控制文本输出中呈现的文本行数。
  "notebook.output.textLineLimit": 30,

  // 笔记本单元格输出文本的字体系列。设置为空时，将使用 `editor.fontFamily`。
  "notebook.outputFontFamily": "",

  // 笔记本单元格输出文本的字号。如果设置为 0，则使用 `editor.fontSize`。
  "notebook.outputFontSize": 0,

  // 笔记本单元格输出文本的行高。
  //  - 将使用介于 0 和 8 之间的值作为字号的乘数。
  //  - 将使用大于或等于 8 的值作为有效值。
  "notebook.outputLineHeight": 19,

  // 是否应显示单元格状态栏。
  //  - hidden: 单元格状态栏始终隐藏。
  //  - visible: 单元格状态栏始终可见。
  //  - visibleAfterExecute: 在执行单元格之前，单元格状态栏处于隐藏状态。之后，其会变为可见以显示执行状态。
  "notebook.showCellStatusBar": "visible",

  // 控制显示 Markdown 标头文件箭头的时间。
  //  - always: 折叠控件始终可见。
  //  - never: 切勿显示折叠控件并减小装订线大小。
  //  - mouseover: 折叠控件仅在鼠标悬停时可见。
  "notebook.showFoldingControls": "mouseover",

  // 是否为每个单元格使用单独的撤消/重做堆叠。
  "notebook.undoRedoPerCell": true,

  // 自动滚动交互窗口以显示执行的最后一条语句的输出。如果此值为 false，仅当最后一个单元格已滚动到此单元格时，窗口才会滚动。
  "interactiveWindow.alwaysScrollOnNewCell": true,

  // 控制是否应跨窗口重新加载还原交互窗口会话/历史记录。交互式 Windows 中使用的控制器状态是否在窗口重新加载之间持久化由提供控制器的扩展控制。
  "interactiveWindow.restore": false,

  // 是否允许终端中的组合键绑定。请注意，如果此值为 true，并且击键导致一个组合，则它将绕过 `terminal.integrated.commandsToSkipShell`，当你希望 ctrl+k 转到 shell (而不是 VS Code)时，将此设置为 false 特别有用。
  "terminal.integrated.allowChords": true,

  // 是否允许使用菜单栏助记键(如 Alt+F)来触发打开菜单栏。请注意，这将导致在设为 true 时，所有 Alt 击键跳过 shell。此设置在 macOS 不起作用。
  "terminal.integrated.allowMnemonics": false,

  // 如果启用，则当 `editor.multiCursorModifier` 设置为 `'alt'` (默认值)时，alt/option+单击会将提示光标重置于鼠标下方。此功能的有效性取决于 shell。
  "terminal.integrated.altClickMovesCursor": true,

  // 要在 Linux 上用于自动化相关终端使用(如任务和调试)的终端配置文件。如果设置了 `terminal.integrated.automationShell.linux` (现已弃用)，则当前将忽略此设置。
  "terminal.integrated.automationProfile.linux": null,

  // 要在 macOS 上用于自动化相关终端使用(如任务和调试)的终端配置文件。如果设置了 `terminal.integrated.automationShell.osx` (现已弃用)，则当前将忽略此设置。
  "terminal.integrated.automationProfile.osx": null,

  // 要用于自动化相关终端使用(如任务和调试)的终端配置文件。如果设置了 `terminal.integrated.automationShell.windows` (现已弃用)，则当前将忽略此设置。
  "terminal.integrated.automationProfile.windows": null,

  // 已弃用此方法，新的配置自动化 shell 的建议方法是使用 `terminal.integrated.automationProfile.linux` 创建终端自动化配置文件。此方法目前优先于新的自动化配置文件设置，但将来会发生更改。
  // 一个路径，设置后将替代 `terminal.integrated.shell.linux`，并忽略与自动化相关的终端使用情况(例如任务和调试)的 `shellArgs` 个值。
  "terminal.integrated.automationShell.linux": null,

  // 已弃用此方法，新的配置自动化 shell 的建议方法是使用 `terminal.integrated.automationProfile.osx` 创建终端自动化配置文件。此方法目前优先于新的自动化配置文件设置，但将来会发生更改。
  // 一个路径，设置后将替代 `terminal.integrated.shell.osx`，并忽略与自动化相关的终端使用情况(例如任务和调试)的 `shellArgs` 个值。
  "terminal.integrated.automationShell.osx": null,

  // 已弃用此方法，新的配置自动化 shell 的建议方法是使用 `terminal.integrated.automationProfile.windows` 创建终端自动化配置文件。此方法目前优先于新的自动化配置文件设置，但将来会发生更改。
  // 一个路径，设置后将替代 `terminal.integrated.shell.windows`，并忽略与自动化相关的终端使用情况(例如任务和调试)的 `shellArgs` 值。
  "terminal.integrated.automationShell.windows": null,

  // 在终端中遇到一组消息时，将自动响应这组消息。如果消息足够具体，这可能有助于自动执行常见响应。
  //
  // 备注:
  //
  // - 使用 `"Terminate batch job (Y/N)": "Y\r"` 自动响应 Windows 上的终止批处理作业提示。
  // - 消息包括转义序列，因此可能无法使用带样式的文本进行回复。
  // - 每秒只能进行一次回复。
  // - 在回复中使用 `"\r"` 来表示 Enter 键。
  // - 要取消设置默认键，请将该值设置为 null。
  // - 如果新的不适用，请重启 VS Code。
  "terminal.integrated.autoReplies": {},

  // 触发时在终端选项卡中显示响铃的毫秒数。
  "terminal.integrated.bellDuration": 1000,

  // 一组命令 ID，其键绑定将不发送至 shell，而是始终由 VS Code 进行处理。这样的话，通常由 shell 使用的键绑定的行为可如同焦点未在终端上时的行为一样，例如按 “Ctrl+P” 来启动“快速打开”。
  //
  // &nbsp;
  //
  // 默认跳过多项命令。要替代默认值并转而将相关命令的键绑定传递给 shell，请添加以 “-” 字符为前缀的命令。例如，添加“-workbench.action.quickOpen” 可使 “Ctrl+P”到达 shell。
  //
  // &nbsp;
  //
  // 在设置编辑器中查看时，下面的默认跳过命令列表会被截断。要查看完整列表，请执行 [打开默认设置 JSON](command:workbench.action.openRawDefaultSettings '打开默认设置(JSON)')，然后从下面的列表中搜索第一个命令。
  //
  // &nbsp;
  //
  // 默认跳过的命令:
  //
  // - editor.action.toggleTabFocusMode
  // - notifications.hideList
  // - notifications.hideToasts
  // - workbench.action.closeQuickOpen
  // - workbench.action.debug.continue
  // - workbench.action.debug.pause
  // - workbench.action.debug.restart
  // - workbench.action.debug.run
  // - workbench.action.debug.start
  // - workbench.action.debug.stepInto
  // - workbench.action.debug.stepOut
  // - workbench.action.debug.stepOver
  // - workbench.action.debug.stop
  // - workbench.action.firstEditorInGroup
  // - workbench.action.focusActiveEditorGroup
  // - workbench.action.focusEighthEditorGroup
  // - workbench.action.focusFifthEditorGroup
  // - workbench.action.focusFirstEditorGroup
  // - workbench.action.focusFourthEditorGroup
  // - workbench.action.focusLastEditorGroup
  // - workbench.action.focusNextPart
  // - workbench.action.focusPreviousPart
  // - workbench.action.focusSecondEditorGroup
  // - workbench.action.focusSeventhEditorGroup
  // - workbench.action.focusSixthEditorGroup
  // - workbench.action.focusThirdEditorGroup
  // - workbench.action.lastEditorInGroup
  // - workbench.action.navigateDown
  // - workbench.action.navigateLeft
  // - workbench.action.navigateRight
  // - workbench.action.navigateUp
  // - workbench.action.nextEditor
  // - workbench.action.nextEditorInGroup
  // - workbench.action.nextPanelView
  // - workbench.action.nextSideBarView
  // - workbench.action.openNextRecentlyUsedEditor
  // - workbench.action.openNextRecentlyUsedEditorInGroup
  // - workbench.action.openPreviousRecentlyUsedEditor
  // - workbench.action.openPreviousRecentlyUsedEditorInGroup
  // - workbench.action.previousEditor
  // - workbench.action.previousEditorInGroup
  // - workbench.action.previousPanelView
  // - workbench.action.previousSideBarView
  // - workbench.action.quickOpen
  // - workbench.action.quickOpenLeastRecentlyUsedEditor
  // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenPreviousEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditor
  // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
  // - workbench.action.quickOpenView
  // - workbench.action.showCommands
  // - workbench.action.tasks.build
  // - workbench.action.tasks.reRunTask
  // - workbench.action.tasks.restartTask
  // - workbench.action.tasks.runTask
  // - workbench.action.tasks.showLog
  // - workbench.action.tasks.showTasks
  // - workbench.action.tasks.terminate
  // - workbench.action.tasks.test
  // - workbench.action.terminal.acceptSelectedSuggestion
  // - workbench.action.terminal.clear
  // - workbench.action.terminal.clearSelection
  // - workbench.action.terminal.copyAndClearSelection
  // - workbench.action.terminal.copyLastCommandOutput
  // - workbench.action.terminal.copySelection
  // - workbench.action.terminal.copySelectionAsHtml
  // - workbench.action.terminal.deleteToLineStart
  // - workbench.action.terminal.deleteWordLeft
  // - workbench.action.terminal.deleteWordRight
  // - workbench.action.terminal.findNext
  // - workbench.action.terminal.findPrevious
  // - workbench.action.terminal.focus
  // - workbench.action.terminal.focusAtIndex1
  // - workbench.action.terminal.focusAtIndex2
  // - workbench.action.terminal.focusAtIndex3
  // - workbench.action.terminal.focusAtIndex4
  // - workbench.action.terminal.focusAtIndex5
  // - workbench.action.terminal.focusAtIndex6
  // - workbench.action.terminal.focusAtIndex7
  // - workbench.action.terminal.focusAtIndex8
  // - workbench.action.terminal.focusAtIndex9
  // - workbench.action.terminal.focusFind
  // - workbench.action.terminal.focusNext
  // - workbench.action.terminal.focusNextPane
  // - workbench.action.terminal.focusPrevious
  // - workbench.action.terminal.focusPreviousPane
  // - workbench.action.terminal.goToRecentDirectory
  // - workbench.action.terminal.hideFind
  // - workbench.action.terminal.hideSuggestWidget
  // - workbench.action.terminal.kill
  // - workbench.action.terminal.killEditor
  // - workbench.action.terminal.moveToEditor
  // - workbench.action.terminal.moveToLineEnd
  // - workbench.action.terminal.moveToLineStart
  // - workbench.action.terminal.moveToTerminalPanel
  // - workbench.action.terminal.navigationModeExit
  // - workbench.action.terminal.navigationModeFocusNext
  // - workbench.action.terminal.navigationModeFocusPrevious
  // - workbench.action.terminal.new
  // - workbench.action.terminal.newInActiveWorkspace
  // - workbench.action.terminal.paste
  // - workbench.action.terminal.pasteSelection
  // - workbench.action.terminal.quickFix
  // - workbench.action.terminal.resizePaneDown
  // - workbench.action.terminal.resizePaneLeft
  // - workbench.action.terminal.resizePaneRight
  // - workbench.action.terminal.resizePaneUp
  // - workbench.action.terminal.runActiveFile
  // - workbench.action.terminal.runRecentCommand
  // - workbench.action.terminal.runSelectedText
  // - workbench.action.terminal.scrollDown
  // - workbench.action.terminal.scrollDownPage
  // - workbench.action.terminal.scrollToBottom
  // - workbench.action.terminal.scrollToNextCommand
  // - workbench.action.terminal.scrollToPreviousCommand
  // - workbench.action.terminal.scrollToTop
  // - workbench.action.terminal.scrollUp
  // - workbench.action.terminal.scrollUpPage
  // - workbench.action.terminal.selectAll
  // - workbench.action.terminal.selectNextPageSuggestion
  // - workbench.action.terminal.selectNextSuggestion
  // - workbench.action.terminal.selectPrevPageSuggestion
  // - workbench.action.terminal.selectPrevSuggestion
  // - workbench.action.terminal.selectToNextCommand
  // - workbench.action.terminal.selectToNextLine
  // - workbench.action.terminal.selectToPreviousCommand
  // - workbench.action.terminal.selectToPreviousLine
  // - workbench.action.terminal.sendSequence
  // - workbench.action.terminal.showAccessibilityHelp
  // - workbench.action.terminal.sizeToContentWidth
  // - workbench.action.terminal.split
  // - workbench.action.terminal.splitInActiveWorkspace
  // - workbench.action.terminal.toggleFindCaseSensitive
  // - workbench.action.terminal.toggleFindRegex
  // - workbench.action.terminal.toggleFindWholeWord
  // - workbench.action.terminal.toggleTerminal
  // - workbench.action.toggleFullScreen
  // - workbench.action.toggleMaximizedPanel
  // - workbench.action.togglePanel
  "terminal.integrated.commandsToSkipShell": [],

  // 如果存在活动终端会话，控制是否确认窗口关闭的时间。
  //  - never: 从不确认。
  //  - always: 始终确认是否存在终端。
  //  - hasChildProcesses: 确认是否存在具有子进程的终端。
  "terminal.integrated.confirmOnExit": "never",

  // 控制是否在终端具有子进程时确认终止终端。当设置为编辑器时，如果编辑器区域中的终端具有子进程，则将标记为已更改。请注意，子进程检测可能不适用于 Git Bash 等 shell，后者不会将其进程作为 shell 的子进程运行。
  //  - never: 从不确认。
  //  - editor: 确认终端是否在编辑器中。
  //  - panel: 确认终端是否在面板中。
  //  - always: 确认终端是在编辑器中还是在面板中。
  "terminal.integrated.confirmOnKill": "editor",

  // 控制是否将在终端中选定的文本复制到剪贴板。
  "terminal.integrated.copyOnSelection": false,

  // 控制终端光标是否闪烁。
  "terminal.integrated.cursorBlinking": false,

  // 控制终端光标的样式。
  "terminal.integrated.cursorStyle": "block",

  // 控制当 `terminal.integrated.cursorStyle` 设置为 `line` 时光标的宽度。
  "terminal.integrated.cursorWidth": 1,

  // 是否为块元素和框绘图字符绘制自定义字形，而不是使用字体，这通常会产生更好的连续线条呈现效果。请注意，这不适用于 DOM 呈现器。
  "terminal.integrated.customGlyphs": true,

  // 将在其中启动终端的显式起始路径，它用作 shell 进程的当前工作目录(cwd)。如果根目录不是方便的 cwd，此路径在工作区设置中可能十分有用。
  "terminal.integrated.cwd": "",

  // 控制新建终端的显示位置。
  //  - editor: 在编辑器中创建终端
  //  - view: 在终端视图中创建终端
  "terminal.integrated.defaultLocation": "view",

  // 在 Linux 上使用的默认配置文件。如果设置了 `terminal.integrated.shell.linux` 或 `terminal.integrated.shellArgs.linux`，则当前将忽略此设置。
  "terminal.integrated.defaultProfile.linux": null,

  // 在 macOS 上使用的默认配置文件。如果设置了 `terminal.integrated.shell.osx` 或 `terminal.integrated.shellArgs.osx`，则当前将忽略此设置。
  "terminal.integrated.defaultProfile.osx": null,

  // 在 Windows 上使用的默认配置文件。如果设置了 `terminal.integrated.shell.windows` 或 `terminal.integrated.shellArgs.windows`，则当前将忽略此设置。
  //  - null: 自动检测默认值
  //  - PowerShell: $(terminal-powershell) PowerShell
  // - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
  //  - Windows PowerShell: $(terminal-powershell) Windows PowerShell
  // - path: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
  //  - Command Prompt: $(terminal-cmd) Command Prompt
  // - path: C:\Windows\System32\cmd.exe
  // - args: []
  //  - Distrod (WSL): $(terminal-linux) Distrod (WSL)
  // - path: C:\Windows\System32\wsl.exe
  // - args: ['-d','Distrod']
  //  - JavaScript 调试终端: $($(debug)) JavaScript 调试终端
  // - extensionIdentifier: ms-vscode.js-debug
  //  - MATLAB: $(variable-group) MATLAB
  // - extensionIdentifier: apommel.matlab-interactive-terminal
  "terminal.integrated.defaultProfile.windows": null,

  // 控制是否检测 "$LANG" 环境变量并将其设置为符合 UTF-8 的选项，因为 VS Code 的终端仅支持来自 shell 的 UTF-8 编码数据。
  //  - auto: 如果现有变量不存在或不以 "'.UTF-8'" 结尾，则设置 "$LANG" 环境变量。
  //  - off: 请勿设置 "$LANG" 环境变量。
  //  - on: 始终设置 "$LANG" 环境变量。
  "terminal.integrated.detectLocale": "auto",

  // 控制终端中的加粗文本是否始终使用 "bright" ANSI 颜色变量。
  "terminal.integrated.drawBoldTextInBrightColors": true,

  // 控制是否启用终端铃声，这在终端名称旁边显示为视觉对象铃铛。
  "terminal.integrated.enableBell": false,

  // 是否在终端中启用文件链接。连接可能会很慢，特别是在网络驱动器上工作时，因为将根据文件系统验证每个文件链接。更改此项将仅在新的终端中生效。
  //  - off: 始终关闭。
  //  - on: 仅当不在远程工作区中时启用。
  //  - notRemote: 始终可用。
  "terminal.integrated.enableFileLinks": "on",

  // 将多行粘贴到终端时显示警告对话框。在以下情况中，该对话框不显示:
  //
  // - 已启用带括号的粘贴模式(shell 支持本机多行粘贴)
  // - 粘贴由 shell 的读取一行数据处理(在 pwsh 的情况下)
  "terminal.integrated.enableMultiLinePasteWarning": true,

  // 跨窗口重新加载保持工作区的终端会话/历史记录。
  "terminal.integrated.enablePersistentSessions": true,

  // 具有环境变量的对象，这些变量将添加到 Linux 上的终端要使用的 VS Code 进程。如果设置为 "null"，则删除环境变量。
  "terminal.integrated.env.linux": {},

  // 具有环境变量的对象，这些变量将添加到 macOS 中的终端要使用的 VS Code 进程。如果设置为 "null"，则删除环境变量。
  "terminal.integrated.env.osx": {},

  // 具有环境变量的对象，这些变量将添加到将由 Windows 上的终端使用的 VS Code 进程。设置为 "null" 以删除环境变量。
  "terminal.integrated.env.windows": {},

  // 是否在每个终端上显示环境更改指示器，该指示器解释了使是否已进行扩展或想要对终端环境进行更改。
  //  - off: 禁用指示器。
  //  - on: 启用指示器。
  //  - warnonly: 仅当终端环境为“已过时”时，仅显示警告指示器，而不是显示指出终端环境已由扩展修改的信息指示器。
  "terminal.integrated.environmentChangesIndicator": "warnonly",

  // 在扩展想要向终端的环境贡献内容但尚未与之交互时是否自动重启终端。
  "terminal.integrated.environmentChangesRelaunch": true,

  // 按 "Alt" 时的滚动速度加倍。
  "terminal.integrated.fastScrollSensitivity": 5,

  // 控制终端的字体系列，默认为 `editor.fontFamily` 的值。
  "terminal.integrated.fontFamily": "",

  // 控制终端的字号(以像素为单位)。
  "terminal.integrated.fontSize": 14,

  // 要在终端中用于非粗体文本的字体粗细。接受“正常”和“加粗”这两个关键字，或接受 1-1000 之间的数字。
  "terminal.integrated.fontWeight": "normal",

  // 要在终端中用于粗体文本的字体粗细。接受“正常”和“加粗”这两个关键字，或接受 1-1000 之间的数字。
  "terminal.integrated.fontWeightBold": "bold",

  // 控制终端是否将使用 GPU 来进行呈现。
  //  - auto: 让 VS Code 检测哪些呈现器将提供最佳体验。
  //  - on: 在终端内启用 GPU 加速。
  //  - off: 禁用终端中的 GPU 加速。当 GPU 加速关闭时，终端的呈现速度会慢得多，但它应该能够在所有系统上可靠地工作。
  //  - canvas: 使用终端的回退画布呈现器，它使用 2d 上下文而不是在某些系统上性能更好地 Webgl。请注意，画布呈现器中的某些功能受到限制，如不透明选择。
  "terminal.integrated.gpuAcceleration": "auto",

  // 使用 `terminal.integrated.confirmOnKill` 设置时要忽略的一组流程名称。
  "terminal.integrated.ignoreProcessNames": [
    "starship",
    "oh-my-posh",
    "bash",
    "zsh"
  ],

  // 新 shell 是否应从 VS Code 继承其环境，这可能会生成登录 shell，以确保初始化 $PATH 和其他开发变量。这不会对 Windows 造成影响。
  "terminal.integrated.inheritEnv": true,

  // 控制终端的字母间距，这是一个整数值，表示要在字符之间添加的额外像素数目。
  "terminal.integrated.letterSpacing": 0,

  // 控制终端的行高，此数字乘以终端字号等于实际行高(以像素为单位)。
  "terminal.integrated.lineHeight": 1,

  // 何时应启用本地回显。这将替代 `terminal.integrated.localEchoLatencyThreshold`
  //  - on: 始终启用
  //  - off: 始终禁用
  //  - auto: 仅对远程工作区启用
  "terminal.integrated.localEchoEnabled": "auto",

  // 当在终端标题中找到其中一个程序名称时，将禁用本地回显。
  "terminal.integrated.localEchoExcludePrograms": [
    "vim",
    "vi",
    "nano",
    "tmux"
  ],

  // 网络延迟的长度(以毫秒为单位)，其中本地编辑将在终端上回显，无需等待服务器承认。如果为 '0'，则本地回显将始终开启，如果为 '-1'，则将禁用。
  "terminal.integrated.localEchoLatencyThreshold": 30,

  // 本地回显文本的终端样式；字体样式或 RGB 颜色。
  "terminal.integrated.localEchoStyle": "dim",

  // 控制在 macOS 上使用 Option+单击时是否强制选择内容。这将强制进行常规(行)选择并禁止使用列选择模式。这样，可使用常规终端选择进行复制粘贴，例如在 tmux 中启用鼠标模式时。
  "terminal.integrated.macOptionClickForcesSelection": false,

  // 控制是否将选项键视为 macOS 中的终端上的元键。
  "terminal.integrated.macOptionIsMeta": false,

  // 设置每个单元格的前景色时，将改为尝试符合指定的对比度比率。示例值:
  //
  // - 1: 不执行任何操作，使用标准主题颜色。
  // - 4.5: [符合 WCAG AA 标准(最低)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html)(默认)。
  // - 7: [符合 WCAG AAA 标准(增强)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html)。
  // - 21: 黑底白字或白底黑字。
  "terminal.integrated.minimumContrastRatio": 4.5,

  // 要在鼠标滚轮滚动事件的 "deltaY" 上使用的乘数。
  "terminal.integrated.mouseWheelScrollSensitivity": 1,

  // 当必须关闭终端进程(例如当窗口或应用程序关闭时)时，这将决定下次打开工作区时，应在何时还原以前的终端会话内容/历史记录和重新创建进程。
  //
  // 注意事项:
  //
  // - 进程当前工作目录的还原取决于是否受 shell 支持。
  // - 在关闭期间保留会话的时间有限，因此在使用高延迟远程连接时可能会中止相应会话。
  //  - onExit: 在 Windows/Linux 上关闭最后窗口后或当触发 `workbench.action.quit` 命令(命令面板、键绑定、菜单)时，恢复流程。
  //  - onExitAndWindowClose: 在 Windows/Linux 上关闭最后窗口后或当触发 `workbench.action.quit` 命令(命令面板、键绑定、菜单)或关闭窗口时，恢复流程。
  //  - never: 永远不要还原终端缓冲区或重新创建流程。
  "terminal.integrated.persistentSessionReviveProcess": "onExit",

  // 控制重新连接到永久性终端会话时将还原的最大行数。增加此数量将以占用更多内存为代价还原更多的回滚行，并增加在启动时连接到终端所需的时间。此设置需要重启才能生效，并应设置为小于或等于 `terminal.integrated.scrollback` 的值。
  "terminal.integrated.persistentSessionScrollback": 100,

  // 通过终端下拉列表创建新终端时要显示的 Linux 配置文件。请手动设置 `path` 属性(通过可选的 `args` 进行)。
  //
  // 将现有配置文件设置为 `null` 以从列表中隐藏配置文件，例如: `"bash": null`。
  "terminal.integrated.profiles.linux": {
    "bash": {
      "path": "bash",
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh"
    },
    "fish": {
      "path": "fish"
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },

  // 通过终端下拉列表创建新终端时要显示的 macOS 配置文件。请手动设置 `path` 属性(通过可选的 `args` 进行)。
  //
  // 将现有配置文件设置为 `null` 以从列表中隐藏配置文件，例如: `"bash": null`。
  "terminal.integrated.profiles.osx": {
    "bash": {
      "path": "bash",
      "args": [
        "-l"
      ],
      "icon": "terminal-bash"
    },
    "zsh": {
      "path": "zsh",
      "args": [
        "-l"
      ]
    },
    "fish": {
      "path": "fish",
      "args": [
        "-l"
      ]
    },
    "tmux": {
      "path": "tmux",
      "icon": "terminal-tmux"
    },
    "pwsh": {
      "path": "pwsh",
      "icon": "terminal-powershell"
    }
  },

  // 通过终端下拉列表创建新终端时要显示的 Windows 配置文件。使用 `source` 属性自动检测 shell 的位置。或手动设置 `path` 属性(通过可选的 `args` 进行)。
  //
  // 将现有配置文件设置为 `null` 以从列表中隐藏配置文件，例如: `"Ubuntu-20.04 (WSL)": null`。
  "terminal.integrated.profiles.windows": {
    "PowerShell": {
      "source": "PowerShell",
      "icon": "terminal-powershell"
    },
    "Command Prompt": {
      "path": [
        "${env:windir}\\Sysnative\\cmd.exe",
        "${env:windir}\\System32\\cmd.exe"
      ],
      "args": [],
      "icon": "terminal-cmd"
    },
    "Git Bash": {
      "source": "Git Bash"
    }
  },

  // 控制终端如何回应右键单击操作。
  //  - default: 显示上下文菜单。
  //  - copyPaste: 当有选定内容时复制，否则粘贴。
  //  - paste: 右键单击时粘贴。
  //  - selectWord: 选择光标下方的字词并显示上下文菜单。
  //  - nothing: 不执行任何操作并将事件传递到终端。
  "terminal.integrated.rightClickBehavior": "copyPaste",

  // 控制终端在其缓冲区中保留的最大行数。
  "terminal.integrated.scrollback": 1000,

  // 将大多数键绑定调度到终端而不是工作台，重写 `terminal.integrated.commandsToSkipShell`，也可以用于微调。
  "terminal.integrated.sendKeybindingsToShell": false,

  // 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.linux#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.linux` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
  // 终端在 Linux 上使用的 shell 的路径。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
  "terminal.integrated.shell.linux": null,

  // 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.osx#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.osx` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
  // 终端在 macOS 上使用的 shell 的路径。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
  "terminal.integrated.shell.osx": null,

  // 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.windows#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.windows` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
  // 终端在 Windows 上使用的 shell 的路径。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
  "terminal.integrated.shell.windows": null,

  // 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.linux#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.linux` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
  // 在 Linux 终端上时要使用的命令行参数。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
  "terminal.integrated.shellArgs.linux": [],

  // 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.osx#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.osx` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
  // 在 macOS 终端上时要使用的命令行参数。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
  "terminal.integrated.shellArgs.osx": [
    "-l"
  ],

  // 此项已弃用，配置默认 shell 的新推荐方法是在 `terminal.integrated.profiles.windows#` 中创建一个终端配置文件，并将其配置文件名称设置为 `#terminal.integrated.defaultProfile.windows` 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。
  // 在 Windows 终端上时要使用的命令行参数。[阅读关于配置 shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
  "terminal.integrated.shellArgs.windows": [],

  // 启用 shell 集成后，为每个命令添加修饰。
  //  - both: 在装订线(左侧)和概述标尺(右侧)中显示修饰
  //  - gutter: 在终端左侧显示装订线修饰
  //  - overviewRuler: 在终端右侧显示概述标尺修饰
  //  - never: 不显示修饰
  "terminal.integrated.shellIntegration.decorationsEnabled": "both",

  // 确定是否自动注入 shell 集成以支持增强型命令跟踪和当前工作目录检测等功能。
  //
  // Shell 集成的工作原理是使用启动脚本注入 shell。通过该脚本，VS Code 可深入了解终端内正在发生的情况。
  //
  // 受支持的 shell:
  //
  // - Linux/macOS: bash、fish、pwsh、zsh
  //  - Windows: pwsh
  //
  // 此设置仅在创建终端时适用，因此需要重启终端才能生效。
  //
  //  请注意，如果在终端配置文件中定义了自定义参数、弃用了 `editor.accessibilitySupport#`、具有 [复杂 bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex -bash-promptcommand)或其他不受支持的设置，则脚本注入可能不起作用。`#terminal.integrated.shellIntegrations.decorationsEnabled`
  "terminal.integrated.shellIntegration.enabled": true,

  // 控制要保留在终端命令历史记录中的最近使用的命令数。设置为 0 可禁用终端命令历史记录。
  "terminal.integrated.shellIntegration.history": 100,

  // 当 `terminal.integrated.shellIntegration.enabled` 设置为 `true` 时，为受支持的 shell 启用实验性终端 Intellisense 建议。如果手动安装 shell 集成，则在调用脚本之前，需要将 `VSCODE_SUGGEST` 设置为 `1`。
  "terminal.integrated.shellIntegration.suggestEnabled": false,

  // 控制在退出代码为非零时是否显示“终端进程已终止且显示退出代码”警报。
  "terminal.integrated.showExitAlert": true,

  // 是否显示终端输出中链接的悬停。
  "terminal.integrated.showLinkHover": true,

  // 控制终端是否将使用动画滚动。
  "terminal.integrated.smoothScrolling": false,

  // 控制拆分终端开始时使用的工作目录。
  //  - workspaceRoot: 新的拆分终端将使用工作区根作为工作目录。在多根工作区中，提供了要使用根文件夹的选项。
  //  - initial: 新的拆分终端将使用父终端开始时使用的工作目录。
  //  - inherited: 在 macOS 和 Linux 上，新的拆分终端将使用父终端的工作目录。在 Windows 上，这与初始行为相同。
  "terminal.integrated.splitCwd": "inherited",

  // 默认情况下要与终端图标关联的主题颜色 ID。
  "terminal.integrated.tabs.defaultColor": null,

  // 默认情况下要与终端图标关联的 codicon ID。
  //  - add: $(add)
  //  - plus: $(plus)
  //  - gist-new: $(gist-new)
  //  - repo-create: $(repo-create)
  //  - lightbulb: $(lightbulb)
  //  - light-bulb: $(light-bulb)
  //  - repo: $(repo)
  //  - repo-delete: $(repo-delete)
  //  - gist-fork: $(gist-fork)
  //  - repo-forked: $(repo-forked)
  //  - git-pull-request: $(git-pull-request)
  //  - git-pull-request-abandoned: $(git-pull-request-abandoned)
  //  - record-keys: $(record-keys)
  //  - keyboard: $(keyboard)
  //  - tag: $(tag)
  //  - tag-add: $(tag-add)
  //  - tag-remove: $(tag-remove)
  //  - person: $(person)
  //  - person-follow: $(person-follow)
  //  - person-outline: $(person-outline)
  //  - person-filled: $(person-filled)
  //  - git-branch: $(git-branch)
  //  - git-branch-create: $(git-branch-create)
  //  - git-branch-delete: $(git-branch-delete)
  //  - source-control: $(source-control)
  //  - mirror: $(mirror)
  //  - mirror-public: $(mirror-public)
  //  - star: $(star)
  //  - star-add: $(star-add)
  //  - star-delete: $(star-delete)
  //  - star-empty: $(star-empty)
  //  - comment: $(comment)
  //  - comment-add: $(comment-add)
  //  - alert: $(alert)
  //  - warning: $(warning)
  //  - search: $(search)
  //  - search-save: $(search-save)
  //  - log-out: $(log-out)
  //  - sign-out: $(sign-out)
  //  - log-in: $(log-in)
  //  - sign-in: $(sign-in)
  //  - eye: $(eye)
  //  - eye-unwatch: $(eye-unwatch)
  //  - eye-watch: $(eye-watch)
  //  - circle-filled: $(circle-filled)
  //  - primitive-dot: $(primitive-dot)
  //  - close-dirty: $(close-dirty)
  //  - debug-breakpoint: $(debug-breakpoint)
  //  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
  //  - debug-hint: $(debug-hint)
  //  - primitive-square: $(primitive-square)
  //  - edit: $(edit)
  //  - pencil: $(pencil)
  //  - info: $(info)
  //  - issue-opened: $(issue-opened)
  //  - gist-private: $(gist-private)
  //  - git-fork-private: $(git-fork-private)
  //  - lock: $(lock)
  //  - mirror-private: $(mirror-private)
  //  - close: $(close)
  //  - remove-close: $(remove-close)
  //  - x: $(x)
  //  - repo-sync: $(repo-sync)
  //  - sync: $(sync)
  //  - clone: $(clone)
  //  - desktop-download: $(desktop-download)
  //  - beaker: $(beaker)
  //  - microscope: $(microscope)
  //  - vm: $(vm)
  //  - device-desktop: $(device-desktop)
  //  - file: $(file)
  //  - file-text: $(file-text)
  //  - more: $(more)
  //  - ellipsis: $(ellipsis)
  //  - kebab-horizontal: $(kebab-horizontal)
  //  - mail-reply: $(mail-reply)
  //  - reply: $(reply)
  //  - organization: $(organization)
  //  - organization-filled: $(organization-filled)
  //  - organization-outline: $(organization-outline)
  //  - new-file: $(new-file)
  //  - file-add: $(file-add)
  //  - new-folder: $(new-folder)
  //  - file-directory-create: $(file-directory-create)
  //  - trash: $(trash)
  //  - trashcan: $(trashcan)
  //  - history: $(history)
  //  - clock: $(clock)
  //  - folder: $(folder)
  //  - file-directory: $(file-directory)
  //  - symbol-folder: $(symbol-folder)
  //  - logo-github: $(logo-github)
  //  - mark-github: $(mark-github)
  //  - github: $(github)
  //  - terminal: $(terminal)
  //  - console: $(console)
  //  - repl: $(repl)
  //  - zap: $(zap)
  //  - symbol-event: $(symbol-event)
  //  - error: $(error)
  //  - stop: $(stop)
  //  - variable: $(variable)
  //  - symbol-variable: $(symbol-variable)
  //  - array: $(array)
  //  - symbol-array: $(symbol-array)
  //  - symbol-module: $(symbol-module)
  //  - symbol-package: $(symbol-package)
  //  - symbol-namespace: $(symbol-namespace)
  //  - symbol-object: $(symbol-object)
  //  - symbol-method: $(symbol-method)
  //  - symbol-function: $(symbol-function)
  //  - symbol-constructor: $(symbol-constructor)
  //  - symbol-boolean: $(symbol-boolean)
  //  - symbol-null: $(symbol-null)
  //  - symbol-numeric: $(symbol-numeric)
  //  - symbol-number: $(symbol-number)
  //  - symbol-structure: $(symbol-structure)
  //  - symbol-struct: $(symbol-struct)
  //  - symbol-parameter: $(symbol-parameter)
  //  - symbol-type-parameter: $(symbol-type-parameter)
  //  - symbol-key: $(symbol-key)
  //  - symbol-text: $(symbol-text)
  //  - symbol-reference: $(symbol-reference)
  //  - go-to-file: $(go-to-file)
  //  - symbol-enum: $(symbol-enum)
  //  - symbol-value: $(symbol-value)
  //  - symbol-ruler: $(symbol-ruler)
  //  - symbol-unit: $(symbol-unit)
  //  - activate-breakpoints: $(activate-breakpoints)
  //  - archive: $(archive)
  //  - arrow-both: $(arrow-both)
  //  - arrow-down: $(arrow-down)
  //  - arrow-left: $(arrow-left)
  //  - arrow-right: $(arrow-right)
  //  - arrow-small-down: $(arrow-small-down)
  //  - arrow-small-left: $(arrow-small-left)
  //  - arrow-small-right: $(arrow-small-right)
  //  - arrow-small-up: $(arrow-small-up)
  //  - arrow-up: $(arrow-up)
  //  - bell: $(bell)
  //  - bold: $(bold)
  //  - book: $(book)
  //  - bookmark: $(bookmark)
  //  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
  //  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
  //  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
  //  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
  //  - debug-breakpoint-data: $(debug-breakpoint-data)
  //  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
  //  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
  //  - debug-breakpoint-log: $(debug-breakpoint-log)
  //  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
  //  - briefcase: $(briefcase)
  //  - broadcast: $(broadcast)
  //  - browser: $(browser)
  //  - bug: $(bug)
  //  - calendar: $(calendar)
  //  - case-sensitive: $(case-sensitive)
  //  - check: $(check)
  //  - checklist: $(checklist)
  //  - chevron-down: $(chevron-down)
  //  - drop-down-button: $(drop-down-button)
  //  - chevron-left: $(chevron-left)
  //  - chevron-right: $(chevron-right)
  //  - chevron-up: $(chevron-up)
  //  - chrome-close: $(chrome-close)
  //  - chrome-maximize: $(chrome-maximize)
  //  - chrome-minimize: $(chrome-minimize)
  //  - chrome-restore: $(chrome-restore)
  //  - circle: $(circle)
  //  - circle-outline: $(circle-outline)
  //  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
  //  - circle-slash: $(circle-slash)
  //  - circuit-board: $(circuit-board)
  //  - clear-all: $(clear-all)
  //  - clippy: $(clippy)
  //  - close-all: $(close-all)
  //  - cloud-download: $(cloud-download)
  //  - cloud-upload: $(cloud-upload)
  //  - code: $(code)
  //  - collapse-all: $(collapse-all)
  //  - color-mode: $(color-mode)
  //  - comment-discussion: $(comment-discussion)
  //  - compare-changes: $(compare-changes)
  //  - credit-card: $(credit-card)
  //  - dash: $(dash)
  //  - dashboard: $(dashboard)
  //  - database: $(database)
  //  - debug-continue: $(debug-continue)
  //  - debug-disconnect: $(debug-disconnect)
  //  - debug-pause: $(debug-pause)
  //  - debug-restart: $(debug-restart)
  //  - debug-start: $(debug-start)
  //  - debug-step-into: $(debug-step-into)
  //  - debug-step-out: $(debug-step-out)
  //  - debug-step-over: $(debug-step-over)
  //  - debug-stop: $(debug-stop)
  //  - debug: $(debug)
  //  - device-camera-video: $(device-camera-video)
  //  - device-camera: $(device-camera)
  //  - device-mobile: $(device-mobile)
  //  - diff-added: $(diff-added)
  //  - diff-ignored: $(diff-ignored)
  //  - diff-modified: $(diff-modified)
  //  - diff-removed: $(diff-removed)
  //  - diff-renamed: $(diff-renamed)
  //  - diff: $(diff)
  //  - discard: $(discard)
  //  - editor-layout: $(editor-layout)
  //  - empty-window: $(empty-window)
  //  - exclude: $(exclude)
  //  - extensions: $(extensions)
  //  - eye-closed: $(eye-closed)
  //  - file-binary: $(file-binary)
  //  - file-code: $(file-code)
  //  - file-media: $(file-media)
  //  - file-pdf: $(file-pdf)
  //  - file-submodule: $(file-submodule)
  //  - file-symlink-directory: $(file-symlink-directory)
  //  - file-symlink-file: $(file-symlink-file)
  //  - file-zip: $(file-zip)
  //  - files: $(files)
  //  - filter: $(filter)
  //  - flame: $(flame)
  //  - fold-down: $(fold-down)
  //  - fold-up: $(fold-up)
  //  - fold: $(fold)
  //  - folder-active: $(folder-active)
  //  - folder-opened: $(folder-opened)
  //  - gear: $(gear)
  //  - gift: $(gift)
  //  - gist-secret: $(gist-secret)
  //  - gist: $(gist)
  //  - git-commit: $(git-commit)
  //  - git-compare: $(git-compare)
  //  - git-merge: $(git-merge)
  //  - github-action: $(github-action)
  //  - github-alt: $(github-alt)
  //  - globe: $(globe)
  //  - grabber: $(grabber)
  //  - graph: $(graph)
  //  - gripper: $(gripper)
  //  - heart: $(heart)
  //  - home: $(home)
  //  - horizontal-rule: $(horizontal-rule)
  //  - hubot: $(hubot)
  //  - inbox: $(inbox)
  //  - issue-closed: $(issue-closed)
  //  - issue-reopened: $(issue-reopened)
  //  - issues: $(issues)
  //  - italic: $(italic)
  //  - jersey: $(jersey)
  //  - json: $(json)
  //  - bracket: $(bracket)
  //  - kebab-vertical: $(kebab-vertical)
  //  - key: $(key)
  //  - law: $(law)
  //  - lightbulb-autofix: $(lightbulb-autofix)
  //  - link-external: $(link-external)
  //  - link: $(link)
  //  - list-ordered: $(list-ordered)
  //  - list-unordered: $(list-unordered)
  //  - live-share: $(live-share)
  //  - loading: $(loading)
  //  - location: $(location)
  //  - mail-read: $(mail-read)
  //  - mail: $(mail)
  //  - markdown: $(markdown)
  //  - megaphone: $(megaphone)
  //  - mention: $(mention)
  //  - milestone: $(milestone)
  //  - mortar-board: $(mortar-board)
  //  - move: $(move)
  //  - multiple-windows: $(multiple-windows)
  //  - mute: $(mute)
  //  - no-newline: $(no-newline)
  //  - note: $(note)
  //  - octoface: $(octoface)
  //  - open-preview: $(open-preview)
  //  - package: $(package)
  //  - paintcan: $(paintcan)
  //  - pin: $(pin)
  //  - play: $(play)
  //  - run: $(run)
  //  - plug: $(plug)
  //  - preserve-case: $(preserve-case)
  //  - preview: $(preview)
  //  - project: $(project)
  //  - pulse: $(pulse)
  //  - question: $(question)
  //  - quote: $(quote)
  //  - radio-tower: $(radio-tower)
  //  - reactions: $(reactions)
  //  - references: $(references)
  //  - refresh: $(refresh)
  //  - regex: $(regex)
  //  - remote-explorer: $(remote-explorer)
  //  - remote: $(remote)
  //  - remove: $(remove)
  //  - replace-all: $(replace-all)
  //  - replace: $(replace)
  //  - repo-clone: $(repo-clone)
  //  - repo-force-push: $(repo-force-push)
  //  - repo-pull: $(repo-pull)
  //  - repo-push: $(repo-push)
  //  - report: $(report)
  //  - request-changes: $(request-changes)
  //  - rocket: $(rocket)
  //  - root-folder-opened: $(root-folder-opened)
  //  - root-folder: $(root-folder)
  //  - rss: $(rss)
  //  - ruby: $(ruby)
  //  - save-all: $(save-all)
  //  - save-as: $(save-as)
  //  - save: $(save)
  //  - screen-full: $(screen-full)
  //  - screen-normal: $(screen-normal)
  //  - search-stop: $(search-stop)
  //  - server: $(server)
  //  - settings-gear: $(settings-gear)
  //  - settings: $(settings)
  //  - shield: $(shield)
  //  - smiley: $(smiley)
  //  - sort-precedence: $(sort-precedence)
  //  - split-horizontal: $(split-horizontal)
  //  - split-vertical: $(split-vertical)
  //  - squirrel: $(squirrel)
  //  - star-full: $(star-full)
  //  - star-half: $(star-half)
  //  - symbol-class: $(symbol-class)
  //  - symbol-color: $(symbol-color)
  //  - symbol-customcolor: $(symbol-customcolor)
  //  - symbol-constant: $(symbol-constant)
  //  - symbol-enum-member: $(symbol-enum-member)
  //  - symbol-field: $(symbol-field)
  //  - symbol-file: $(symbol-file)
  //  - symbol-interface: $(symbol-interface)
  //  - symbol-keyword: $(symbol-keyword)
  //  - symbol-misc: $(symbol-misc)
  //  - symbol-operator: $(symbol-operator)
  //  - symbol-property: $(symbol-property)
  //  - wrench: $(wrench)
  //  - wrench-subaction: $(wrench-subaction)
  //  - symbol-snippet: $(symbol-snippet)
  //  - tasklist: $(tasklist)
  //  - telescope: $(telescope)
  //  - text-size: $(text-size)
  //  - three-bars: $(three-bars)
  //  - thumbsdown: $(thumbsdown)
  //  - thumbsup: $(thumbsup)
  //  - tools: $(tools)
  //  - triangle-down: $(triangle-down)
  //  - triangle-left: $(triangle-left)
  //  - triangle-right: $(triangle-right)
  //  - triangle-up: $(triangle-up)
  //  - twitter: $(twitter)
  //  - unfold: $(unfold)
  //  - unlock: $(unlock)
  //  - unmute: $(unmute)
  //  - unverified: $(unverified)
  //  - verified: $(verified)
  //  - versions: $(versions)
  //  - vm-active: $(vm-active)
  //  - vm-outline: $(vm-outline)
  //  - vm-running: $(vm-running)
  //  - watch: $(watch)
  //  - whitespace: $(whitespace)
  //  - whole-word: $(whole-word)
  //  - window: $(window)
  //  - word-wrap: $(word-wrap)
  //  - zoom-in: $(zoom-in)
  //  - zoom-out: $(zoom-out)
  //  - list-filter: $(list-filter)
  //  - list-flat: $(list-flat)
  //  - list-selection: $(list-selection)
  //  - selection: $(selection)
  //  - list-tree: $(list-tree)
  //  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
  //  - debug-breakpoint-function: $(debug-breakpoint-function)
  //  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
  //  - debug-stackframe-active: $(debug-stackframe-active)
  //  - circle-small-filled: $(circle-small-filled)
  //  - debug-stackframe-dot: $(debug-stackframe-dot)
  //  - debug-stackframe: $(debug-stackframe)
  //  - debug-stackframe-focused: $(debug-stackframe-focused)
  //  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
  //  - symbol-string: $(symbol-string)
  //  - debug-reverse-continue: $(debug-reverse-continue)
  //  - debug-step-back: $(debug-step-back)
  //  - debug-restart-frame: $(debug-restart-frame)
  //  - call-incoming: $(call-incoming)
  //  - call-outgoing: $(call-outgoing)
  //  - menu: $(menu)
  //  - expand-all: $(expand-all)
  //  - feedback: $(feedback)
  //  - group-by-ref-type: $(group-by-ref-type)
  //  - ungroup-by-ref-type: $(ungroup-by-ref-type)
  //  - account: $(account)
  //  - bell-dot: $(bell-dot)
  //  - debug-console: $(debug-console)
  //  - library: $(library)
  //  - output: $(output)
  //  - run-all: $(run-all)
  //  - sync-ignored: $(sync-ignored)
  //  - pinned: $(pinned)
  //  - github-inverted: $(github-inverted)
  //  - debug-alt: $(debug-alt)
  //  - server-process: $(server-process)
  //  - server-environment: $(server-environment)
  //  - pass: $(pass)
  //  - stop-circle: $(stop-circle)
  //  - play-circle: $(play-circle)
  //  - record: $(record)
  //  - debug-alt-small: $(debug-alt-small)
  //  - vm-connect: $(vm-connect)
  //  - cloud: $(cloud)
  //  - merge: $(merge)
  //  - export: $(export)
  //  - graph-left: $(graph-left)
  //  - magnet: $(magnet)
  //  - notebook: $(notebook)
  //  - redo: $(redo)
  //  - check-all: $(check-all)
  //  - pinned-dirty: $(pinned-dirty)
  //  - pass-filled: $(pass-filled)
  //  - circle-large-filled: $(circle-large-filled)
  //  - circle-large: $(circle-large)
  //  - circle-large-outline: $(circle-large-outline)
  //  - combine: $(combine)
  //  - gather: $(gather)
  //  - table: $(table)
  //  - variable-group: $(variable-group)
  //  - type-hierarchy: $(type-hierarchy)
  //  - type-hierarchy-sub: $(type-hierarchy-sub)
  //  - type-hierarchy-super: $(type-hierarchy-super)
  //  - git-pull-request-create: $(git-pull-request-create)
  //  - run-above: $(run-above)
  //  - run-below: $(run-below)
  //  - notebook-template: $(notebook-template)
  //  - debug-rerun: $(debug-rerun)
  //  - workspace-trusted: $(workspace-trusted)
  //  - workspace-untrusted: $(workspace-untrusted)
  //  - workspace-unspecified: $(workspace-unspecified)
  //  - terminal-cmd: $(terminal-cmd)
  //  - terminal-debian: $(terminal-debian)
  //  - terminal-linux: $(terminal-linux)
  //  - terminal-powershell: $(terminal-powershell)
  //  - terminal-tmux: $(terminal-tmux)
  //  - terminal-ubuntu: $(terminal-ubuntu)
  //  - terminal-bash: $(terminal-bash)
  //  - arrow-swap: $(arrow-swap)
  //  - copy: $(copy)
  //  - person-add: $(person-add)
  //  - filter-filled: $(filter-filled)
  //  - wand: $(wand)
  //  - debug-line-by-line: $(debug-line-by-line)
  //  - inspect: $(inspect)
  //  - layers: $(layers)
  //  - layers-dot: $(layers-dot)
  //  - layers-active: $(layers-active)
  //  - compass: $(compass)
  //  - compass-dot: $(compass-dot)
  //  - compass-active: $(compass-active)
  //  - azure: $(azure)
  //  - issue-draft: $(issue-draft)
  //  - git-pull-request-closed: $(git-pull-request-closed)
  //  - git-pull-request-draft: $(git-pull-request-draft)
  //  - debug-all: $(debug-all)
  //  - debug-coverage: $(debug-coverage)
  //  - run-errors: $(run-errors)
  //  - folder-library: $(folder-library)
  //  - debug-continue-small: $(debug-continue-small)
  //  - beaker-stop: $(beaker-stop)
  //  - graph-line: $(graph-line)
  //  - graph-scatter: $(graph-scatter)
  //  - pie-chart: $(pie-chart)
  //  - bracket-dot: $(bracket-dot)
  //  - bracket-error: $(bracket-error)
  //  - lock-small: $(lock-small)
  //  - azure-devops: $(azure-devops)
  //  - verified-filled: $(verified-filled)
  //  - newline: $(newline)
  //  - layout: $(layout)
  //  - layout-activitybar-left: $(layout-activitybar-left)
  //  - layout-activitybar-right: $(layout-activitybar-right)
  //  - layout-panel-left: $(layout-panel-left)
  //  - layout-panel-center: $(layout-panel-center)
  //  - layout-panel-justify: $(layout-panel-justify)
  //  - layout-panel-right: $(layout-panel-right)
  //  - layout-panel: $(layout-panel)
  //  - layout-sidebar-left: $(layout-sidebar-left)
  //  - layout-sidebar-right: $(layout-sidebar-right)
  //  - layout-statusbar: $(layout-statusbar)
  //  - layout-menubar: $(layout-menubar)
  //  - layout-centered: $(layout-centered)
  //  - layout-sidebar-right-off: $(layout-sidebar-right-off)
  //  - layout-panel-off: $(layout-panel-off)
  //  - layout-sidebar-left-off: $(layout-sidebar-left-off)
  //  - target: $(target)
  //  - indent: $(indent)
  //  - record-small: $(record-small)
  //  - error-small: $(error-small)
  //  - arrow-circle-down: $(arrow-circle-down)
  //  - arrow-circle-left: $(arrow-circle-left)
  //  - arrow-circle-right: $(arrow-circle-right)
  //  - arrow-circle-up: $(arrow-circle-up)
  //  - heart-filled: $(heart-filled)
  //  - map: $(map)
  //  - map-filled: $(map-filled)
  //  - circle-small: $(circle-small)
  //  - bell-slash: $(bell-slash)
  //  - bell-slash-dot: $(bell-slash-dot)
  //  - comment-unresolved: $(comment-unresolved)
  //  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
  //  - git-pull-request-new-changes: $(git-pull-request-new-changes)
  //  - search-fuzzy: $(search-fuzzy)
  //  - comment-draft: $(comment-draft)
  //  - dialog-error: $(dialog-error)
  //  - dialog-warning: $(dialog-warning)
  //  - dialog-info: $(dialog-info)
  //  - dialog-close: $(dialog-close)
  //  - tree-item-expanded: $(tree-item-expanded)
  //  - tree-filter-on-type-on: $(tree-filter-on-type-on)
  //  - tree-filter-on-type-off: $(tree-filter-on-type-off)
  //  - tree-filter-clear: $(tree-filter-clear)
  //  - tree-item-loading: $(tree-item-loading)
  //  - menu-selection: $(menu-selection)
  //  - menu-submenu: $(menu-submenu)
  //  - menubar-more: $(menubar-more)
  //  - scrollbar-button-left: $(scrollbar-button-left)
  //  - scrollbar-button-right: $(scrollbar-button-right)
  //  - scrollbar-button-up: $(scrollbar-button-up)
  //  - scrollbar-button-down: $(scrollbar-button-down)
  //  - toolbar-more: $(toolbar-more)
  //  - quick-input-back: $(quick-input-back)
  "terminal.integrated.tabs.defaultIcon": "terminal",

  // 控制显示在标题右侧的终端说明。根据上下文替换变量:
  // - `${cwd}`: 终端的当前工作目录
  // - `${cwdFolder}`: 终端的当前工作目录，当值与初始工作目录不同时，显示在多根工作区或单个根工作区中。在 Windows 上，仅当启用 shell 集成时才会显示此内容。
  // - `${workspaceFolder}`: 在其中启动终端的工作区
  // - `${local}`: 指示远程工作区中的本地终端
  // - `${process}`: 终端流程的名称
  // - `${separator}`: 仅在由带有值或静态文本的变量括住时才显示的一个条件分隔符 (` - `)。
  // - `${sequence}`: 进程提供给终端的名称
  // - `${task}`: 指示此终端与任务关联
  "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

  // 控制终端选项卡状态是否支持动画(例如正在进行的任务)。
  "terminal.integrated.tabs.enableAnimation": true,

  // 控制终端选项卡是否以列表的形式显示在终端的一侧。如果禁用此功能，将改为显示下拉列表。
  "terminal.integrated.tabs.enabled": true,

  // 控制是在双击时将焦点放在某个选项卡上还是单击。
  //  - singleClick: 双击终端选项卡时聚焦终端
  //  - doubleClick: 双击终端选项卡时聚焦终端
  "terminal.integrated.tabs.focusMode": "doubleClick",

  // 控制在特定条件下是否将隐藏终端选项卡视图。
  //  - never: 从不隐藏终端选项卡视图
  //  - singleTerminal: 仅打开一个终端时隐藏终端选项卡视图
  //  - singleGroup: 仅打开一个终端组时隐藏终端选项卡视图
  "terminal.integrated.tabs.hideCondition": "singleTerminal",

  // 控制终端选项卡的位置，该位置位于实际终端的左侧或右侧。
  //  - left: 在终端的左侧显示终端选项卡视图
  //  - right: 在终端的右侧显示终端选项卡视图
  "terminal.integrated.tabs.location": "right",

  // `terminal.integrated.tabs.title` 和 `terminal.integrated.tabs.title` 使用的分隔符。
  "terminal.integrated.tabs.separator": " - ",

  // 控制是否在“新建终端”按钮旁边显示“终端拆分”和“终止”按钮。
  //  - always: 始终显示操作
  //  - singleTerminal: 当终端是唯一打开的终端时显示操作
  //  - singleTerminalOrNarrow: 在终端是唯一打开的终端或选项卡视图处于窄而无文本状态时显示活动终端
  //  - never: 从不显示操作
  "terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

  // 在视图中显示活动的终端信息，当选项卡中的标题不可见时，此功能尤其有用。
  //  - always: 始终显示活动终端
  //  - singleTerminal: 当仅有一个终端打开时显示活动终端
  //  - singleTerminalOrNarrow: 仅当终端已打开或选项卡视图处于窄而无文本状态时显示活动终端
  //  - never: 从不显示活动终端
  "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

  // 控制终端标题。根据上下文替换变量:
  // - `${cwd}`: 终端的当前工作目录
  // - `${cwdFolder}`: 终端的当前工作目录，当值与初始工作目录不同时，显示在多根工作区或单个根工作区中。在 Windows 上，仅当启用 shell 集成时才会显示此内容。
  // - `${workspaceFolder}`: 在其中启动终端的工作区
  // - `${local}`: 指示远程工作区中的本地终端
  // - `${process}`: 终端流程的名称
  // - `${separator}`: 仅在由带有值或静态文本的变量括住时才显示的一个条件分隔符 (` - `)。
  // - `${sequence}`: 进程提供给终端的名称
  // - `${task}`: 指示此终端与任务关联
  "terminal.integrated.tabs.title": "${process}",

  // 制表位中的单元格数。
  "terminal.integrated.tabStopWidth": 8,

  // 控制在终端中计算字符宽度时要使用的 unicode 版本。如果遇到未占用正确空格或退格量的表情符号或其他宽字符，或删除量太大或太小，则可能希望尝试调整此设置。
  //  - 6: unicode 的版本 6。此版本较旧，因此在较旧的系统中效果更好。
  //  - 11: unicode 的版本 11。此版本可在使用新式版本 unicode 的新式系统上提供更好的支持。
  "terminal.integrated.unicodeVersion": "11",

  // 控制是否在终端下拉列表中显示 WSL 发行版
  "terminal.integrated.useWslProfiles": true,

  // 是否使用 ConPTY 进行 Windows 终端进程通信(需要 Windows 10 内部版本号 18309+)。如果此设置为 false，将使用 Winpty。
  "terminal.integrated.windowsEnableConpty": true,

  // 一个字符串，其中包含双击选择单词功能时被视为单词分隔符的所有字符。
  "terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",

  // 启用自动任务 - 请注意，任务将不会在不受信任的工作区中运行。
  //  - on: 始终
  //  - off: 从不
  "task.allowAutomaticTasks": "on",

  // 控制为所有任务提供程序扩展启用"提供任务"。如果"任务: 运行任务"命令速度较慢，则禁用任务提供程序的自动检测可能会提供帮助。单个扩展还可以提供禁用自动检测的设置。
  "task.autoDetect": "on",

  // 配置在运行任务时是否显示问题匹配器提示。设置为"true"从不提示，或使用任务类型的字典仅关闭特定任务类型的提示。
  "task.problemMatchers.neverPrompt": false,

  // 控制是否显示在“运行任务”等任务快速选取中具有详细信息的任务的详细信息。
  "task.quickOpen.detail": true,

  // 控制任务快速打开对话框中跟踪的最近项目数。
  "task.quickOpen.history": 30,

  // 使 Tasks: Run Task 命令使用速度较慢的“全部显示”行为，而不是使用任务按提供程序进行分组的速度更快的双层选取器。
  "task.quickOpen.showAll": false,

  // 控制当只有一个任务要选取时是否跳过任务快速选取。
  "task.quickOpen.skip": false,

  // 在窗口重新加载时，重新连接到具有问题匹配器的任务。
  "task.reconnection": true,

  // 在运行任务前保存所有未保存的编辑器。
  //  - always: 运行前始终保存所有编辑器。
  //  - never: 运行前绝不保存编辑器。
  //  - prompt: 提示在运行前是否保存编辑器。
  "task.saveBeforeRun": "always",

  // 配置当提供程序速度较慢时是否显示警告
  "task.slowProviderWarning": true,

  // 在终端中从资源管理器打开文件时，确定将启动哪种类型的终端
  //  - integrated: 使用 VS Code 的集成终端。
  //  - external: 使用设定的外部终端。
  "terminal.explorerKind": "integrated",

  // 自定义要在 Linux 上运行的终端。
  "terminal.external.linuxExec": "xterm",

  // 定义在 macOS 上运行的终端应用程序。
  "terminal.external.osxExec": "Terminal.app",

  // 自定义要在 Windows 上运行的终端。
  "terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

  // 启用时，将自动分析慢速呈现器
  "application.experimental.rendererProfiling": false,

  // 在打开文件时，控制是否在“问题”视图中对其进行定位。
  "problems.autoReveal": true,

  // 在文件和文件夹上显示错误和警告。
  "problems.decorations.enabled": true,

  // 控制“问题”视图的默认视图模式。
  "problems.defaultViewMode": "tree",

  // 启用后，状态栏中将显示当前问题。
  "problems.showCurrentInStatus": false,

  // 控制问题导航的顺序。
  //  - severity: 导航按严重性排序的问题
  //  - position: 导航按位置排序的问题
  "problems.sortOrder": "severity",

  // 启用/禁用导航路径。
  "breadcrumbs.enabled": true,

  // 控制是否及如何在“导航路径”视图中显示文件路径。
  //  - on: 在导航路径视图中显示文件路径。
  //  - off: 不在导航路径视图中显示文件路径。
  //  - last: 在导航路径视图中仅显示文件路径的最后一个元素。
  "breadcrumbs.filePath": "on",

  // 使用图标渲染面包屑导航项。
  "breadcrumbs.icons": true,

  // 启用后，痕迹导航栏将显示“数组”符号。
  "breadcrumbs.showArrays": true,

  // 启用后，痕迹导航栏将显示“布尔”符号。
  "breadcrumbs.showBooleans": true,

  // 启用后，痕迹导航栏显示“类”符号。
  "breadcrumbs.showClasses": true,

  // 启用后，痕迹导航栏将显示“常量”符号。
  "breadcrumbs.showConstants": true,

  // 启用后，痕迹符将显示“构造函数”符号。
  "breadcrumbs.showConstructors": true,

  // 启用后，痕迹导航栏将显示 "enumMember" 符号。
  "breadcrumbs.showEnumMembers": true,

  // 启用后，痕迹导航栏将显示“枚举”符号。
  "breadcrumbs.showEnums": true,

  // 启用后，痕迹导航栏将显示“事件”符号。
  "breadcrumbs.showEvents": true,

  // 启用后，痕迹导航栏将显示“字段”符号。
  "breadcrumbs.showFields": true,

  // 启用后，痕迹导航栏将显示“文件”符号。
  "breadcrumbs.showFiles": true,

  // 启用后，痕迹导航栏将显示“函数”符号。
  "breadcrumbs.showFunctions": true,

  // 启用后，痕迹导航栏将显示“接口”符号。
  "breadcrumbs.showInterfaces": true,

  // 启用后，痕迹导航栏将显示“键”符号。
  "breadcrumbs.showKeys": true,

  // 启用后，痕迹导航栏将显示“方法”符号。
  "breadcrumbs.showMethods": true,

  // 启用后，痕迹导航栏将显示“模块”符号。
  "breadcrumbs.showModules": true,

  // 启用后，痕迹导航栏将显示“命名空间”符号。
  "breadcrumbs.showNamespaces": true,

  // 启用后，痕迹导航栏将显示 "null" 符号。
  "breadcrumbs.showNull": true,

  // 启用后，痕迹导航栏将显示“数字”符号。
  "breadcrumbs.showNumbers": true,

  // 启用后，痕迹导航栏将显示“对象”符号。
  "breadcrumbs.showObjects": true,

  // 启用后，痕迹导航栏将显示“运算符”符号。
  "breadcrumbs.showOperators": true,

  // 启用后，痕迹导航栏将显示“包”符号。
  "breadcrumbs.showPackages": true,

  // 启用后，痕迹导航栏将显示“属性”符号。
  "breadcrumbs.showProperties": true,

  // 启用后，痕迹导航栏将显示“字符串”符号。
  "breadcrumbs.showStrings": true,

  // 启用后，痕迹导航栏将显示“结构”符号。
  "breadcrumbs.showStructs": true,

  // 启用后，痕迹导航栏将显示 "typeParameter" 符号。
  "breadcrumbs.showTypeParameters": true,

  // 启用后，痕迹导航栏将显示“变量”符号。
  "breadcrumbs.showVariables": true,

  // 控制是否及如何在“导航路径”视图中显示符号。
  //  - on: 在“导航路径”视图中显示所有符号。
  //  - off: 不在导航路径视图中显示符号。
  //  - last: 在导航路径视图中仅显示当前符号。
  "breadcrumbs.symbolPath": "on",

  // 控制“导航路径”大纲视图中符号的排序方式。
  //  - position: 以文件位置顺序显示符号大纲。
  //  - name: 以字母顺序显示符号大纲。
  //  - type: 以符号类型顺序显示符号大纲。
  "breadcrumbs.symbolSortOrder": "position",

  // 如果此设置为 false，则无论新设置的值如何，都不会发送遥测数据。由于合并到 `telemetry.telemetryLevel` 设置，目前已弃用。
  // 启用要收集的崩溃报告。这有助于我们提高稳定性。
  // 此选项需重启才可生效。
  "telemetry.enableCrashReporter": true,

  // 如果此设置为 false，则无论新设置的值如何，都不会发送遥测数据。已弃用，推荐使用 `telemetry.telemetryLevel` 设置。
  // 启用要收集的诊断数据。这有助于我们更好地了解 Visual Studio Code 的执行情况以及哪里需要改进。[阅读详细信息](https://go.microsoft.com/fwlink/?LinkId=786907)关于我们收集的内容和隐私声明。
  "telemetry.enableTelemetry": true,

  //
  // 控制 Visual Studio Code 遥测、第一方扩展遥测和参与的第三方扩展遥测。一些第三方扩展可能不遵守此设置。请查阅特定扩展的文档以确定。遥测有助于我们更好地了解 Visual Studio Code 的执行情况、需要改进的地方以及功能的使用方式。 详细了解[我们收集的数据](https://aka.ms/vscode-telemetry)和我们的[隐私声明](https://go.microsoft.com/fwlink/?LinkId=786907)。 若要使崩溃报告更改生效，必须完全重新启动应用程序。
  //
  // &nbsp;
  //
  // 下表概述了每个设置所发送的数据:
  //
  // |       | 崩溃报告 | 错误遥测 | 用法数据 |
  // |:------|:---------------------:|:---------------:|:--------------:|
  // | all   |            ✓          |        ✓        |        ✓       |
  // | error |            ✓          |        ✓        |        -       |
  // | crash |            ✓          |        -        |        -       |
  // | off   |            -          |        -        |        -       |
  //
  //
  // &nbsp;
  //
  // ****注意:*** 如果此设置为“关闭”，则无论其他遥测设置如何，都不会发送遥测数据。如果此设置为“关闭”以外的任何选项，并且使用弃用的设置禁用遥测，则不会发送遥测数据。*
  //
  //  - all: 发送使用情况数据、错误、故障报告。
  //  - error: 发送常规错误遥测和故障报告。
  //  - crash: 发送 OS 级别故障报告。
  //  - off: 禁用所有产品遥测。
  "telemetry.telemetryLevel": "all",

  // 控制大纲项是折叠还是展开。
  //  - alwaysCollapse: 折叠所有项。
  //  - alwaysExpand: 展开所有项。
  "outline.collapseItems": "alwaysExpand",

  // 使用图标呈现大纲元素。
  "outline.icons": true,

  // 对大纲元素的错误和警告使用锁屏提醒。
  "outline.problems.badges": true,

  // 对大纲元素的错误和警告使用颜色。
  "outline.problems.colors": true,

  // 显示大纲元素上的错误和警告。
  "outline.problems.enabled": true,

  // 启用后，大纲将显示 `array` 符号。
  "outline.showArrays": true,

  // 启用后，大纲将显示 `boolean` 符号。
  "outline.showBooleans": true,

  // 启用后，大纲将显示 `class` 符号。
  "outline.showClasses": true,

  // 启用后，大纲将显示`constant`符号。
  "outline.showConstants": true,

  // 启用大纲时，大纲将显示 `constructor` 符号。
  "outline.showConstructors": true,

  // 启用后，大纲将显示 `enumMember` 符号。
  "outline.showEnumMembers": true,

  // 启用后，大纲将显示 `enum` 符号。
  "outline.showEnums": true,

  // 启用后，大纲将显示 `event` 符号。
  "outline.showEvents": true,

  // 启用时，大纲将显示 `field`符号。
  "outline.showFields": true,

  // 启用后，大纲将显示 `file` 符号。
  "outline.showFiles": true,

  // 启用时，大纲将显示 `function` 符号。
  "outline.showFunctions": true,

  // 启用后，大纲将显示 `interface` 符号。
  "outline.showInterfaces": true,

  // 启用后，大纲将显示 `key`符号。
  "outline.showKeys": true,

  // 启用后，大纲将显示 `method` 符号。
  "outline.showMethods": true,

  // 启用后，大纲将显示 `module` 符号。
  "outline.showModules": true,

  // 启用后，大纲将显示 `namespace` 符号。
  "outline.showNamespaces": true,

  // 启用后，大纲将显示 `null` 符号。
  "outline.showNull": true,

  // 启用后，大纲将显示 `number` 符号。
  "outline.showNumbers": true,

  // 启用后，大纲将显示 `object` 符号。
  "outline.showObjects": true,

  // 启用时，大纲显示 `operator` 符号。
  "outline.showOperators": true,

  // 启用后，大纲将显示 `package` 符号。
  "outline.showPackages": true,

  // 启用后，大纲将显示 `property` 符号。
  "outline.showProperties": true,

  // 启用后，大纲将显示 `string` 符号。
  "outline.showStrings": true,

  // 启用后，大纲将显示`struct` 符号。
  "outline.showStructs": true,

  // 启用后，大纲将显示 `typeParameter` 符号。
  "outline.showTypeParameters": true,

  // 启用后，大纲将显示 `variable` 符号。
  "outline.showVariables": true,

  // 实验性。控制在滚动到列表结尾时，时间线视图是否将加载下一页的项目。
  "timeline.pageOnScroll": false,

  // 默认情况下以及在加载更多项目时在时间线视图中显示的项目数。如果设置为 "null" (默认值)，则将根据时间线视图的可见区域自动选择一个页面大小。
  "timeline.pageSize": null,

  // 配置要为 clojure 语言替代的设置。
  "[clojure]":  {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // 配置要为 cmake 语言替代的设置。
  "[cmake]":  {
    "editor.quickSuggestions": {
      "strings": true
    }
  },

  // 配置要为 coffeescript 语言替代的设置。
  "[coffeescript]":  {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // 配置要为 csharp 语言替代的设置。
  "[csharp]":  {
    "editor.maxTokenizationLineLength": 2500
  },

  // 配置要为 css 语言替代的设置。
  "[css]":  {
    "editor.suggest.insertMode": "replace"
  },

  // 配置要为 dockercompose 语言替代的设置。
  "[dockercompose]":  {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "advanced"
  },

  // 配置要为 dockerfile 语言替代的设置。
  "[dockerfile]":  {
    "editor.quickSuggestions": {
      "strings": true
    }
  },

  // 配置要为 dtd 语言替代的设置。
  "[dtd]":  {
    "editor.autoClosingBrackets": "never",
    "files.trimFinalNewlines": true
  },

  // 配置要为 fsharp 语言替代的设置。
  "[fsharp]":  {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // 配置要为 git-commit 语言替代的设置。
  "[git-commit]":  {
    "editor.rulers": [
      72
    ],
    "workbench.editor.restoreViewState": false
  },

  // 配置要为 git-rebase 语言替代的设置。
  "[git-rebase]":  {
    "workbench.editor.restoreViewState": false
  },

  // 配置要为 go 语言替代的设置。
  "[go]":  {
    "editor.insertSpaces": false
  },

  // 配置要为 handlebars 语言替代的设置。
  "[handlebars]":  {
    "editor.suggest.insertMode": "replace"
  },

  // 配置要为 html 语言替代的设置。
  "[html]":  {
    "editor.suggest.insertMode": "replace"
  },

  // 配置要为 jade 语言替代的设置。
  "[jade]":  {
    "diffEditor.ignoreTrimWhitespace": false
  },

  // 配置要为 java 语言替代的设置。
  "[java]":  {
    "editor.suggest.snippetsPreventQuickSuggestions": false
  },

  // 配置要为 javascript 语言替代的设置。
  "[javascript]":  {
    "editor.maxTokenizationLineLength": 2500
  },

  // 配置要为 json 语言替代的设置。
  "[json]":  {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // 配置要为 jsonc 语言替代的设置。
  "[jsonc]":  {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace"
  },

  // 配置要为 latex 语言替代的设置。
  "[latex]":  {
    "editor.formatOnPaste": false,
    "editor.suggestSelection": "recentlyUsedByPrefix"
  },

  // 配置要为 less 语言替代的设置。
  "[less]":  {
    "editor.suggest.insertMode": "replace"
  },

  // 配置要为 makefile 语言替代的设置。
  "[makefile]":  {
    "editor.insertSpaces": false
  },

  // 配置要为 markdown 语言替代的设置。
  "[markdown]":  {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    }
  },

  // 配置要为 plaintext 语言替代的设置。
  "[plaintext]":  {
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false
  },

  // 配置要为 python 语言替代的设置。
  "[python]":  {
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.wordBasedSuggestions": false
  },

  // 配置要为 scss 语言替代的设置。
  "[scss]":  {
    "editor.suggest.insertMode": "replace"
  },

  // 配置要为 search-result 语言替代的设置。
  "[search-result]":  {
    "editor.lineNumbers": "off"
  },

  // 配置要为 shellscript 语言替代的设置。
  "[shellscript]":  {
    "files.eol": "\n"
  },

  // 配置要为 svg 语言替代的设置。
  "[svg]":  {
    "editor.autoClosingBrackets": "never",
    "files.trimFinalNewlines": true
  },

  // 配置要为 wxml 语言替代的设置。
  "[wxml]":  {
    "editor.suggest.insertMode": "replace"
  },

  // 配置要为 xml 语言替代的设置。
  "[xml]":  {
    "editor.autoClosingBrackets": "never",
    "files.trimFinalNewlines": true
  },

  // 配置要为 xsl 语言替代的设置。
  "[xsl]":  {
    "editor.autoClosingBrackets": "never",
    "files.trimFinalNewlines": true
  },

  // 配置要为 yaml 语言替代的设置。
  "[yaml]":  {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": "keep",
    "diffEditor.ignoreTrimWhitespace": false,
    "editor.quickSuggestions": {
      "other": true,
      "comments": false,
      "strings": true
    }
  },

  // 当焦点移到差异审阅模式下的已删除行或下一/上一个更改时播放声音
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.diffLineDeleted": "auto",

  // 当焦点移动到差异审阅模式下的插入行或下一个/上一个更改时播放声音
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.diffLineInserted": "auto",

  // 当焦点移到差异审阅模式下修改的行或下一/上一个更改时播放声音
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.diffLineModified": "auto",

  // Deprecated. Use the specific setting for each audio cue instead (`audioCues.*`).
  //
  "audioCues.enabled": null,

  // 当有效行具有断点时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.lineHasBreakpoint": "auto",

  // 当有效行出现错误时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.lineHasError": "auto",

  // 当有效行具有可展开的折叠区域时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.lineHasFoldedArea": "auto",

  // 当有效行具有内联建议时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.lineHasInlineSuggestion": "auto",

  // 当有效行出现警告时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.lineHasWarning": "off",

  // 尝试读取包含无内嵌提示的内嵌提示的行时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.noInlayHints": "auto",

  // 在成功完成笔记本单元格执行时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.notebookCellCompleted": "auto",

  // 在笔记本单元格执行失败时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.notebookCellFailed": "auto",

  // 当调试程序在断点上停止时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.onDebugBreak": "auto",

  // 任务完成时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.taskCompleted": "auto",

  // 任务失败时播放声音(非零退出代码)。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.taskFailed": "auto",

  // 当终端快速修复可用时播放声音。
  //  - auto: 附加屏幕阅读器时，启用音频提示。
  //  - on: 启用音频提示。
  //  - off: 禁用音频提示。
  "audioCues.terminalQuickFix": "auto",

  // 音频提示音量百分比(0-100)。
  "audioCues.volume": 70,

  // 远程隧道访问注册名。如果未设置，则使用主机名。
  "remote.tunnels.access.hostNameOverride": "",

  // 启用远程隧道访问时，防止计算机睡眠。
  "remote.tunnels.access.preventSleep": false,

  // 启用后，将检测到新的正在运行的进程，并自动转发其侦听的端口。禁用此设置将不会阻止转发所有端口。即使禁用，扩展将仍然能够导致端口被转发，并且打开某些 URL 仍将导致端口被转发。
  "remote.autoForwardPorts": true,

  // 设置当 `remote.autoForwardPorts` 为 true 时自动从其转发端口的源。在 Windows 和 Mac 远程设备上，“process”选项不起作用，系统将使用“output”。需要重新加载才能生效。
  //  - process: 通过监视包含端口的已启动进程发现端口时，将自动转发该端口。
  //  - output: 通过读取终端和调试输出发现端口时，将自动转发该端口。并非所有使用端口的进程都将打印到集成终端或调试控制台，因此某些端口将丢失。根据输出转发的端口将不会被“取消转发”，除非重载或用户在“端口”视图中关闭该端口。
  "remote.autoForwardPortsSource": "process",

  // 启用后，扩展将本地下载并安装在远程上。
  "remote.downloadExtensionsLocally": false,

  // 覆盖扩展的类型。"ui" 扩展在本地计算机上安装和运行，而 "workspace" 扩展则在远程计算机上运行。通过使用此设置重写扩展的默认类型，可指定是否应在本地或远程安装和启用该扩展。
  "remote.extensionKind": {
    "pub.name": [
      "ui"
    ]
  },

  // 控制从终端和调试控制台打开具有端口的本地 URL 时是否转发它。
  "remote.forwardOnOpen": true,

  // 指定将用于端口转发的本地主机名。
  "remote.localPortHost": "localhost",

  // 对于未从设置 `remote.portsAttributes` 中获得属性的所有端口，设置其上应用的默认属性。例如:
  //
  // ```
  // {
  //   "onAutoForward": "ignore"
  // }
  // ```
  "remote.otherPortsAttributes": {},

  // 设置在转发特定端口号时应用的属性。例如:
  //
  // ```
  // "3000": {
  //   "label": "Application"
  // },
  // "40000-55000": {
  //   "onAutoForward": "ignore"
  // },
  // ".+\\/server.js": {
  //  "onAutoForward": "openPreview"
  // }
  // ```
  "remote.portsAttributes": {
    "443": {
      "protocol": "https"
    },
    "8443": {
      "protocol": "https"
    }
  },

  // 还原您在工作区中转发的端口。
  "remote.restoreForwardedPorts": true,

  //
  //  - smart: 使用默认的差异算法。
  //  - experimental: 使用实验性差异算法。
  "mergeEditor.diffAlgorithm": "experimental",

  // Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
  "mergeEditor.showDeletionMarkers": true,

  // 不应展开 Emmet 缩写的语言数组。
  "emmet.excludeLanguages": [
    "markdown"
  ],

  // 一组路径，其中每个路径都可以包含 Emmet syntaxProfiles 和/或代码片段。
  // 发生冲突时，后面路径的配置文件/代码段将重写以前的路径。
  // 有关详细信息和示例片段文件，请参见 https://code.visualstudio.com/docs/editor/emmet。
  "emmet.extensionsPath": [],

  // 在默认不受支持的语言中启用 Emmet 缩写。在此语言和 Emmet 支持的语言之间添加映射。
  //  例如: `{"vue-html": "html", "javascript": "javascriptreact"}`
  "emmet.includeLanguages": {},

  // 当设置为 `false` 时，将分析整个文件并确定当前位置能否展开 Emmet 缩写。当设置为 `true` 时，将仅在 CSS/SCSS/LESS 文件中分析当前位置周围的内容。
  "emmet.optimizeStylesheetParsing": true,

  // 用于修改 Emmet 某些操作和解析程序的行为的首选项。
  "emmet.preferences": {},

  // 将可能的 Emmet 缩写作为建议进行显示。当在样式表中或 emmet.showExpandedAbbreviation 设置为 `"never"` 时不适用。
  "emmet.showAbbreviationSuggestions": true,

  // 以建议的形式显示展开的 Emmet 缩写。
  // 选项 `"inMarkupAndStylesheetFilesOnly"` 适用于 html、haml、jade、slim、xml、xsl、css、scss、sass、less 和 stylus。
  // 无论 markup/css 如何，选项 `"always"` 都适用于文件的各个部分。
  "emmet.showExpandedAbbreviation": "always",

  // 若为 `true`，Emmet 建议将显示为代码片段。可以在 `editor.snippetSuggestions` 设置中排列其顺序。
  "emmet.showSuggestionsAsSnippets": false,

  // 为指定的语法定义配置文件或使用带有特定规则的配置文件。
  "emmet.syntaxProfiles": {},

  // 启用后，在按 Tab 时会展开 Emmet 缩写，即使未显示完成。禁用后，仍可通过按 TAB 接受显示的完成。
  "emmet.triggerExpansionOnTab": false,

  // 如果为 `true`，Emmet 将使用内联完成来建议扩展。如果要防止非内联完成项提供程序在此设置为 `true` 时频繁显示，请将 `other` 项的 `editor.quickSuggestions` 转换为 `inline` 或 `off`。
  "emmet.useInlineCompletions": false,

  // 用于 Emmet 代码片段的变量。
  "emmet.variables": {},

  // 控制是否启用强制推送 (不论 force 还是 force-with-lease)。
  "git.allowForcePush": false,

  // 控制是否允许没有运行 pre-commit 和 commit-msg 挂钩的提交。
  "git.allowNoVerifyCommit": false,

  // 始终显示“暂存的更改”资源组。
  "git.alwaysShowStagedChangesResourceGroup": false,

  // 控制所有提交的 signoff 标志。
  "git.alwaysSignOff": false,

  // 若设置为 true，则自动从当前 Git 仓库的默认远程仓库提取提交。若设置为“全部”，则从所有远程仓库进行提取。
  "git.autofetch": false,

  // 在启用“#git.autofetch#”情况下每次自动 git fetch 之间的间隔时间(以秒为单位)。
  "git.autofetchPeriod": 180,

  // 是否启用自动刷新。
  "git.autorefresh": true,

  // 配置何时自动检测存储库。
  //  - true: 扫描当前打开文件夹与当前打开文件所在文件夹的子文件夹。
  //  - false: 禁止自动扫描仓库。
  //  - subFolders: 扫描当前打开文件夹的子文件夹。
  //  - openEditors: 扫描当前打开文件的父文件夹。
  "git.autoRepositoryDetection": true,

  // 在拉取前暂存所有更改，在成功拉取后还原这些更改。
  "git.autoStash": false,

  // 创建新分支时使用的前缀。
  "git.branchPrefix": "",

  // 受保护分支的列表。默认情况下，在将更改提交到受保护分支之前会显示提示。可以使用 `git.branchProtectionPrompt` 设置控制提示。
  "git.branchProtection": [],

  // 控制是否在将更改提交到受保护的分支之前显示提示。
  //  - alwaysCommit: 始终将更改提交到受保护分支。
  //  - alwaysCommitToNewBranch: 始终将更改提交到新的分支。
  //  - alwaysPrompt: 始终在将更改提交到受保护分支之前进行提示。
  "git.branchProtectionPrompt": "alwaysPrompt",

  // 用于随机生成的分支名称的字典列表。每个值都表示用于生成分支名称段的字典。支持的词典:“形容词”、“动物”、“颜色”和“数字”。
  //  - adjectives: 随机形容词
  //  - animals: 随机动物名称
  //  - colors: 随机颜色名称
  //  - numbers: 100 和 999 之间的一个随机数
  "git.branchRandomName.dictionary": [
    "adjectives",
    "animals"
  ],

  // 控制在创建新分支时是否生成随机名称。
  "git.branchRandomName.enable": false,

  // 控制分支的排列顺序。
  "git.branchSortOrder": "committerdate",

  // 用于验证新分支名称的正则表达式。
  "git.branchValidationRegex": "",

  // 用于替换新分支名称中的空格，以及用于分隔随机生成的分支名称区段的字符。
  "git.branchWhitespaceChar": "-",

  // 控制在运行“签出到…”时列出的 git 参考类型。
  //  - local: 本地分支
  //  - tags: 标记
  //  - remote: 远程分支
  "git.checkoutType": [
    "local",
    "remote",
    "tags"
  ],

  // 控制在储藏、提交、放弃、暂存或取消暂存更改时，是否应自动关闭差异编辑器。
  "git.closeDiffOnOperation": false,

  // GIT 命令列表 (例如: commit、push)，这些命令的 `stdout` 将被记录到 [git 输出](command:git.showOutput)。如果 GIT 命令配置了客户端挂钩，那么客户端挂钩的 `stdout` 也将被记录到 [git 输出](command:git.showOutput)。
  "git.commandsToLog": [],

  // 始终确认为 "Git: Commit Empty" 命令创建空提交。
  "git.confirmEmptyCommits": true,

  // 控制在强制推送前是否进行确认。
  "git.confirmForcePush": true,

  // 控制是否在提交前要求确认而不进行验证。
  "git.confirmNoVerifyCommit": true,

  // 同步 Git 存储库前请先进行确认。
  "git.confirmSync": true,

  // 控制 Git 计数徽章。
  //  - all: 对所有更改计数。
  //  - tracked: 仅对跟踪的更改计数。
  //  - off: 关闭计数器。
  "git.countBadge": "all",

  // 控制 Git 是否在资源管理器和“打开编辑器”视图中添加颜色和小标。
  "git.decorations.enabled": true,

  // 克隆 Git 仓库的默认位置。
  "git.defaultCloneDirectory": null,

  // 控制是否自动检测 Git 子模块。
  "git.detectSubmodules": true,

  // 控制可检测到的 Git 子模块的限制。
  "git.detectSubmodulesLimit": 10,

  // 使用 GPG 或 x.509 启用提交签名。
  "git.enableCommitSigning": false,

  // 是否启用 Git。
  "git.enabled": true,

  // 在没有暂存的更改时提交所有更改。
  "git.enableSmartCommit": false,

  // 控制Git Sync命令是否出现在状态栏中。
  "git.enableStatusBarSync": true,

  // 启用后，在拉取时获取所有分支。否则，仅获取当前。
  "git.fetchOnPull": false,

  // 运行同步命令时推送附注标签。
  "git.followTagsWhenSync": false,

  // This setting is now deprecated, please use `github.gitAuthentication` instead.
  //
  "git.githubAuthentication": null,

  // 要忽略的 Git 存储库列表。
  "git.ignoredRepositories": [],

  // 忽略“旧版 Git”警告。
  "git.ignoreLegacyWarning": false,

  // 忽略“仓库中存在大量更改”的警告。
  "git.ignoreLimitWarning": false,

  // 忽略“缺失 Git”的警告。
  "git.ignoreMissingGitWarning": false,

  // 忽略拉取时发出的分支似乎已变基的警告。
  "git.ignoreRebaseWarning": false,

  // 忽略对文件树中子模块的修改。
  "git.ignoreSubmodules": false,

  // 如果 Windows 上安装了 Git 2.25 - 2.26，则忽略警告。
  "git.ignoreWindowsGit27Warning": false,

  // 控制何时显示提交消息输入验证。
  "git.inputValidation": "warn",

  // 控制显示提交消息长度警告的长度阈值。
  "git.inputValidationLength": 72,

  // 控制显示警告的提交消息主题长度阈值。请取消设置它以继承 "config.inputValidationLength" 的值。
  "git.inputValidationSubjectLength": 50,

  // 打开当前处于冲突状态的文件的合并编辑器。
  "git.mergeEditor": false,

  // 控制是否在克隆后自动打开仓库。
  //  - always: 始终在当前窗口中打开。
  //  - alwaysNewWindow: 始终在新窗口中打开。
  //  - whenNoFolderOpen: 只有在没有打开任何文件夹时，才在当前窗口中打开。
  //  - prompt: 始终提示操作。
  "git.openAfterClone": "prompt",

  // 控制单击更改时是否应打开差异编辑器。否则将打开常规编辑器。
  "git.openDiffOnClick": true,

  // 控制是应打开工作区父文件夹中的存储库还是打开的文件。
  //  - always: 始终在工作区的父文件夹中打开存储库或打开文件。
  //  - never: 切勿在工作区的父文件夹中打开存储库或打开文件。
  //  - prompt: 在打开存储库之前提示工作区的父文件夹或打开文件。
  "git.openRepositoryInParentFolders": "prompt",

  // 控制是否在运行 git 命令后乐观地更新源代码管理视图的状态。
  "git.optimisticUpdate": true,

  // Git 可执行文件的路径和文件名，例如 "C:\Program Files\Git\bin\git.exe" (Windows)。这也可以是一个包含多个要查找的路径的字符串值数组。
  "git.path": null,

  // 成功提交后运行 git 命令。
  //  - none: 提交后不要运行任何命令。
  //  - push: 成功提交后运行 'git push'。
  //  - sync: 成功提交后运行 'git pull' 和 'git push' 命令。
  "git.postCommitCommand": "none",

  // 控制 Git 是否在提交之前检查未保存的文件。
  //  - always: 检查是否有任何未保存的文件。
  //  - staged: 只检查未保存的已暂存文件。
  //  - never: 禁用此检查。
  "git.promptToSaveFilesBeforeCommit": "always",

  // 控制 Git 是否在储藏更改之前检查未保存的文件。
  //  - always: 检查是否有任何未保存的文件。
  //  - staged: 只检查未保存的已暂存文件。
  //  - never: 禁用此检查。
  "git.promptToSaveFilesBeforeStash": "always",

  // 提取时修剪。
  "git.pruneOnFetch": false,

  // 控制没有传出提交的分支在签出之前是否快速转发。
  "git.pullBeforeCheckout": false,

  // 拉取时提取所有标签。
  "git.pullTags": true,

  // 在运行“同步”命令时，强制 Git 使用“变基”。
  "git.rebaseWhenSync": false,

  // 记住提交后运行的最后一个 git 命令。
  "git.rememberPostCommitCommand": false,

  // 当 `git.autoRepositoryDetection` 设置为 `true` 或 `subFolders` 时扫描 Git 仓库时忽略的文件夹列表。
  "git.repositoryScanIgnoredFolders": [
    "node_modules"
  ],

  // 在将 `git.autoRepositoryDetection` 设置为 `true` 或 `subFolders` 时，控制扫描工作区文件夹以查找 Git 仓库时使用的深度。如果不进行限制，可以设置为 `-1`。
  "git.repositoryScanMaxDepth": 1,

  // 控制在是要求进行显式 Git 用户配置，还是允许 Git 在缺少配置时进行猜测。
  "git.requireGitUserConfig": true,

  // 在其中搜索 Git 存储库的路径的列表。
  "git.scanRepositories": [],

  // 控制操作按钮是否显示在“源代码管理”视图中。
  "git.showActionButton": {
    "commit": true,
    "publish": true,
    "sync": true
  },

  // 控制是否在 Git 源控制面板中显示提交输入。
  "git.showCommitInput": true,

  // 控制是否在 Git 更改视图中显示内联“打开文件”操作。
  "git.showInlineOpenFileAction": true,

  // 控制 Git 操作是否显示进度提示。
  "git.showProgress": true,

  // 控制在推送成功时是否显示通知。
  "git.showPushSuccessNotification": false,

  // 控制哪些更改由Smart Commit自动暂存。
  //  - all: 自动暂存所有更改。
  //  - tracked: 仅自动暂存跟踪的更改。
  "git.smartCommitChanges": "all",

  // 控制如何限制可从 Git 状态命令分析的更改数。可以设置为 0 表示无限制。
  "git.statusLimit": 10000,

  // 建议启用智能提交(在无暂存更改时提交所有更改)。
  "git.suggestSmartCommit": true,

  // 控制在运行同步操作时是否出现通知，允许用户取消操作。
  "git.supportCancellation": false,

  // 控制是否启用 VS Code 作为集成终端中生成的 Git 进程的身份验证处理程序。请注意: 需要重启终端才能选取此设置中的更改。
  "git.terminalAuthentication": true,

  // 控制是否使 VS Code 成为集成终端中产生的 Git 进程的 Git 编辑器。请注意: 需要重启终端才能选择此设置中的更改。
  "git.terminalGitEditor": false,

  // 控制在日程表视图中项目使用的日期。
  //  - committed: 使用提交日期
  //  - authored: 使用创作日期
  "git.timeline.date": "committed",

  // 控制是否在日程表视图中显示提交作者。
  "git.timeline.showAuthor": true,

  // 控制是否在时间线视图中显示未提交的更改。
  "git.timeline.showUncommitted": false,

  // 控制未跟踪的更改的行为。
  //  - mixed: 所有更改，无论是跟踪的还是未跟踪的，都会一起出现并表现出相同的行为。
  //  - separate: 未跟踪的更改单独显示在“源代码管理”视图中。它们也被排除在几个操作之外。
  //  - hidden: 未跟踪的更改被隐藏，并从多个操作中排除。
  "git.untrackedChanges": "mixed",

  // 控制是否将提交输入框中的消息用作默认储藏消息。
  "git.useCommitInputAsStashMessage": false,

  // 控制当提交输入框中未提供消息时，是否将使用全文编辑器来创作提交消息。
  "git.useEditorAsCommitInput": true,

  // 控制是否使用更安全的 force-with-lease 进行强制推送。
  "git.useForcePushWithLease": true,

  // 控制是否应覆盖 GIT_ASKPASS 以使用集成版本。
  "git.useIntegratedAskPass": true,

  // 启用`git.useEditorAsCommitInput`时启用详细输出。
  "git.verboseCommit": false,

  // 控制是否在 VS Code 中为 git 命令启用自动 GitHub 身份验证。
  "github.gitAuthentication": true,

  // 控制用于克隆 GitHub 仓库的协议
  "github.gitProtocol": "https",

  // GitHub Enterprise Server URI
  "github-enterprise.uri": "",

  // Grunt 任务检测的控制启用。Grunt 任务检测可能会导致执行任何打开的工作区中的文件。
  "grunt.autoDetect": "off",

  // Gulp 任务检测的控制启用。Gulp 任务检测可能会导致执行任何打开的工作区中的文件。
  "gulp.autoDetect": "off",

  // 启用/禁用将图像粘贴到 ipynb 笔记本文件中的 Markdown 单元格中。粘贴的图像会作为附件插入到单元格。
  "ipynb.pasteImagesAsAttachments.enabled": true,

  // Jake 任务检测的控制启用。Jake 任务检测可能会导致执行任何打开的工作区中的文件。
  "jake.autoDetect": "off",

  // 在内置 Markdown 预览中启用/禁用呈现数学。
  "markdown.math.enabled": true,

  // 是否在解决合并冲突后自动转到下一个合并冲突。
  "merge-conflict.autoNavigateNextConflict.enabled": false,

  // 为编辑器中的合并冲突区域创建 CodeLens。
  "merge-conflict.codeLens.enabled": true,

  // 为编辑器中的合并冲突区域创建提示小标。
  "merge-conflict.decorators.enabled": true,

  // 控件在比较合并冲突中的更改时应在何处打开差异视图。
  //  - Current: 在当前的编辑器组中打开差异视图。
  //  - Beside: 在当前编辑器组旁边打开差异视图。
  //  - Below: 在当前编辑器组下方打开差异视图。
  "merge-conflict.diffViewPosition": "Current",

  // 配置在 "#debug.node.autoAttach#" 处于启用状态时自动附加和调试的进程。无论此设置如何，都始终附加到启动的带有 "--inspect" 标志的节点进程。
  //  - always: 自动附加到终端中启动的每个 Node.js 进程。
  //  - smart: 运行不在 node_modules 文件夹中的脚本时自动附加。
  //  - onlyWithFlag: 仅在给定 "--inspect" 时自动附加。
  //  - disabled: 自动附加被禁用，且不在状态栏中显示。
  "debug.javascript.autoAttachFilter": "disabled",

  // 配置 glob 模式，以确定何时附加智能 `debug.javascript.autoAttachFilter` 模式。`$KNOWN_TOOLS$` 被替换为常见测试和代码运行器的名称的列表。[在 VS Code 文档中阅读更多内容](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns)。
  "debug.javascript.autoAttachSmartPattern": [
    "${workspaceFolder}/**",
    "!**/node_modules/**",
    "**/$KNOWN_TOOLS$/**"
  ],

  // 调试远程 Web 应用时，配置是否自动将远程服务器通过隧道传输到本地计算机。
  "debug.javascript.automaticallyTunnelRemoteServer": true,

  // 在条件断点引发错误时是否停止。
  "debug.javascript.breakOnConditionalError": false,

  // 在 npm 脚本中应显示“运行”和“调试”代码的位置。 它可以在脚本部分的“全部”、脚本、脚本部分的“顶部”或“从不”上面。
  "debug.javascript.codelens.npmScripts": "top",

  // 调试时从调试终端内部单击链接使用的选项。可设置为"false"以禁用此行为。
  "debug.javascript.debugByLinkOptions": "on",

  // 用于启动配置的默认 "runtimeExecutable" (如果未指定)。这可用于配置 Node.js 或浏览器安装项的自定义路径。
  "debug.javascript.defaultRuntimeExecutable": {
    "pwa-node": "node"
  },

  // 通过 `Debug: Attach to Node.js Process` 命令调试进程时使用的默认选项
  "debug.javascript.pickAndAttachOptions": {},

  // 在调试器中加载资源(如源映射)时可使用的请求选项。例如，如果你的源映射需要身份验证或使用自签名证书，则可能需要配置此设置。选项用于创建使用 [`got`](https://github.com/sindresorhus/got) 库的请求。
  //
  // 可通过传递 `{ "https": { "rejectUnauthorized": false } }` 来实现禁用证书验证的常见情况。
  "debug.javascript.resourceRequestOptions": {},

  // JavaScript 调试终端和 npm 脚本的默认启动选项。
  "debug.javascript.terminalOptions": {},

  // 配置是否会自动取消映射无法读取源文件的源映射文件。如果这是 false (默认)，系统会显示提示。
  "debug.javascript.unmapMissingSources": false,

  // 控制是否自动检测 npm 脚本。
  "npm.autoDetect": "on",

  // 从资源管理器上下文菜单中启用运行文件夹中包含的 NPM 脚本。
  "npm.enableRunFromFolder": false,

  // The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
  // 在没有顶级 "package.json" 文件时，为 npm 脚本启用资源管理器视图。
  "npm.enableScriptExplorer": false,

  // 配置应从自动脚本检测中排除的文件夹的 glob 模式。
  "npm.exclude": "",

  // 从 https://registry.npmjs.org 和 https://registry.bower.io 获取数据，以提供自动补全和 npm 依赖项上的悬停功能信息。
  "npm.fetchOnlinePackageInfo": true,

  // 用于运行脚本的程序包管理器。
  //  - auto: 根据锁定文件和已安装的包管理器，自动检测用于运行脚本的包管理器。
  //  - npm: 使用 npm 作为运行脚本的包管理器。
  //  - yarn: 使用 yarn 作为运行脚本的包管理器。
  //  - pnpm: 使用 pnpm 作为运行脚本的包管理器。
  "npm.packageManager": "auto",

  // 使用 `--silent` 选项运行 npm 命令。
  "npm.runSilent": false,

  // NPM 脚本资源管理器中使用的默认单击操作: `open` 或 `run`，默认值为 `open`。
  "npm.scriptExplorerAction": "open",

  // 正则表达式的数组，指示应从 NPM 脚本视图中排除哪些脚本。
  "npm.scriptExplorerExclude": [],

  // 使用脚本的“运行”和“调试”命令显示悬停。
  "npm.scriptHover": true,

  // 控制在选择代码信息指示器引用时是否调用“速览引用”或“查找引用”。
  //  - peek: 在速览编辑器中显示引用。
  //  - view: 在单独的视图中显示引用。
  "references.preferredLocation": "peek",

  // 启用/禁用在简单浏览器中聚焦时显示的浮动指示器。
  "simpleBrowser.focusLockIndicator.enabled": true,

  // Wrapping of operators with spaces.
  //  - all_operators: Wrap all operators with spaces.
  //  - exclude_pow: Wrap all operators with spaces, except ^ and .^
  //  - no_spaces: Don't wrap any operators with spaces. (not recommended)
  "matlab-formatter.addSpaces": "all_operators",

  // optional custom path to matlab formatter (requires restarting vscode)
  "matlab-formatter.formatterPath": "",

  // indentation mode
  //  - all_functions: Add indentation inside all functions and classdefs
  //  - only_nested_functions: Only add indentation inside nested functions and class-methods
  //  - classic: No indentation of functions and classes (not recommended)
  "matlab-formatter.indentMode": "all_functions",

  // number of spaces used for indentation
  "matlab-formatter.indentwidth": 4,

  // Indentation of matrices
  //  - aligned: Keep rows of a matrix aligned.
  //  - simple: Use simpe indentation for matrices
  "matlab-formatter.matrixIndent": "aligned",

  // optional custom path to python executable (requires restarting vscode)
  "matlab-formatter.pythonPath": "",

  // add newlines before and after blocks (for, if, etc.)
  "matlab-formatter.separateBlocks": true,

  // Decides whether to make the cursor fall back onto your editor when you execute the command 'Run current selection'
  "matlab-interactive-terminal.CursorBack": "true",

  // Specifies the path to the Python executable to use (if leaved blank, Python in PATH is used)
  "matlab-interactive-terminal.pythonPath": null,

  // Displays Unicode characters (ex: CJK characters) in MATLAB output (N.B.: output will not be in real time)
  "matlab-interactive-terminal.unicodeSwitch": "false",

  // The HTML attributes for which to provide class completions, hover previews, linting etc.
  "tailwindCSS.classAttributes": [
    "class",
    "className",
    "ngClass"
  ],

  // Enable code actions.
  "tailwindCSS.codeActions": true,

  // Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.
  "tailwindCSS.colorDecorators": true,

  // Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`
  "tailwindCSS.emmetCompletions": false,

  //
  "tailwindCSS.experimental.classRegex": [],

  // Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to.
  "tailwindCSS.experimental.configFile": null,

  // Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `files.exclude` setting.
  "tailwindCSS.files.exclude": [
    "**/.git/**",
    "**/node_modules/**",
    "**/.hg/**",
    "**/.svn/**"
  ],

  // Enable hovers.
  "tailwindCSS.hovers": true,

  // Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.
  //  E.g.: `{"plaintext": "html"}`
  "tailwindCSS.includeLanguages": {},

  // Enable the Node.js inspector agent for the language server and listen on the specified port.
  "tailwindCSS.inspectPort": null,

  // Class names on the same HTML element which apply the same CSS property or properties
  "tailwindCSS.lint.cssConflict": "warning",

  // Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)
  "tailwindCSS.lint.invalidApply": "error",

  // Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)
  "tailwindCSS.lint.invalidConfigPath": "error",

  // Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)
  "tailwindCSS.lint.invalidScreen": "error",

  // Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)
  "tailwindCSS.lint.invalidTailwindDirective": "error",

  // Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)
  "tailwindCSS.lint.invalidVariant": "error",

  // Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)
  "tailwindCSS.lint.recommendedVariantOrder": "warning",

  // Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `tailwindCSS.showPixelEquivalents`.
  "tailwindCSS.rootFontSize": 16,

  // Show `px` equivalents for `rem` CSS values.
  "tailwindCSS.showPixelEquivalents": true,

  // Enable autocomplete suggestions.
  "tailwindCSS.suggestions": true,

  // Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings
  "tailwindCSS.validate": true,

  // If defined, unmapped absolute path imports are based on this location.  Takes priority over 'absolutePathToWorkspace' if both are defined
  "path-intellisense.absolutePathTo": "",

  // Sets an absolute path to the current workspace
  "path-intellisense.absolutePathToWorkspace": true,

  // Automatically adds slash after directory
  "path-intellisense.autoSlashAfterDirectory": false,

  // Automatically triggers next suggestion after previous suggestion
  "path-intellisense.autoTriggerNextSuggestion": false,

  // Adds the file extension to a import statements
  "path-intellisense.extensionOnImport": false,

  // Ignores tsconfig file for mappings
  "path-intellisense.ignoreTsConfigBaseUrl": false,

  // Mappings for paths.  The values should be interpreted as absolute paths (and can use '${workspaceFolder}')
  "path-intellisense.mappings": {},

  // Show hidden files
  "path-intellisense.showHiddenFiles": false,

  // Shows suggestions when the import starts with a forward slash ('/')
  "path-intellisense.showOnAbsoluteSlash": true,

  // Set max length of the column to align words after `as`  /自定义当你的字段长度超过多少字符，不参加as对齐(整个字段长度包括as后面的列名)
  "extension.as_loc_cnt": 150,

  // Use whitespace to replace Tab in the indentation of subquery  /在子查询缩进场景中，把制表符替换成四个空格
  "extension.bracket_char": false,

  // Fix the comma location to the end of the line/把逗号放在字段后面(不建议开启)
  "extension.comma_location": false,

  // Convert keywords to uppercase/将关键词转变为大写
  "extension.uppercase": true,

  // Number of seconds the list of `.gitignore` files retrieved from github will be cached
  "gitignore.cacheExpirationInterval": 3600,

  // 微信开发者工具 IDE 的安装路径，若安装时自定义了路径，请配置此选项
  "miniprogram.idePath": "",

  // 小程序运行目录的相对路径，适用于 Taro、Uni 等框架需指定编译后的产物目录。请在工作区配置此选项
  "miniprogram.miniprogramPath": "",

  // Sets an absolute path to the current workspace
  "universal-path-intellisense.absolutePathToWorkspace": true,

  // Automatically adds slash after directory
  "universal-path-intellisense.autoSlashAfterDirectory": false,

  // Adds the file extension to a import statements
  "universal-path-intellisense.extensionOnImport": true,

  // Mappings for paths
  "universal-path-intellisense.mappings": {},

  // the files which will no be imported with file extension
  "universal-path-intellisense.noExtensionFileWhiteList": [
    "js",
    "ts",
    "wxml",
    "json"
  ],

  // Show hidden files
  "universal-path-intellisense.showHiddenFiles": false,

  // Enable/disable autoclosing of HTML tags.
  "wxml.autoClosingTags": true,

  // A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
  //
  // VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
  //
  // The file paths are relative to workspace and only workspace folder settings are considered.
  "wxml.customData": [],

  // List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
  "wxml.format.contentUnformatted": "pre,code,textarea",

  // Enable/disable default HTML formatter.
  "wxml.format.enable": true,

  // End with a newline.
  "wxml.format.endWithNewline": false,

  // List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
  "wxml.format.extraLiners": "head, body, /wxml",

  // Format and indent `{{#foo}}` and `{{/foo}}`.
  "wxml.format.indentHandlebars": false,

  // Indent `<head>` and `<body>` sections.
  "wxml.format.indentInnerWxml": false,

  // Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
  "wxml.format.maxPreserveNewLines": null,

  // Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
  "wxml.format.preserveNewLines": true,

  // Honor django, erb, handlebars and php templating language tags.
  "wxml.format.templating": false,

  // List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
  "wxml.format.unformatted": "wbr",

  // Keep text content together between this string.
  "wxml.format.unformattedContentDelimiter": "",

  // Wrap attributes.
  //  - auto: Wrap attributes only when line length is exceeded.
  //  - force: Wrap each attribute except first.
  //  - force-aligned: Wrap each attribute except first and keep aligned.
  //  - force-expand-multiline: Wrap each attribute.
  //  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
  //  - preserve: Preserve wrapping of attributes
  //  - preserve-aligned: Preserve wrapping of attributes but align.
  "wxml.format.wrapAttributes": "auto",

  // Alignment size when using 'force aligned' and 'aligned multiple' in `html.format.wrapAttributes` or `null` to use the default indent size.
  "wxml.format.wrapAttributesIndentSize": "null",

  // Maximum amount of characters per line (0 = disable).
  "wxml.format.wrapLineLength": 120,

  // Deprecated in favor of `editor.renameOnType`
  // Enable/disable mirroring cursor on matching HTML tag.
  "wxml.mirrorCursorOnMatchingTag": false,

  // Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
  "wxml.suggest.wxml5": true,

  // Traces the communication between VS Code and the HTML language server.
  "wxml.trace.server": "off",

  // Controls whether the built-in HTML language support validates embedded scripts.
  "wxml.validate.scripts": true,

  // Controls whether the built-in HTML language support validates embedded styles.
  "wxml.validate.styles": true,

  // The prefix that is used for each comment line except for first and last.
  "doxdocgen.c.commentPrefix": " * ",

  // Smart text snippet for factory methods/functions.
  "doxdocgen.c.factoryMethodText": "Create a {name} object",

  // The first line of the comment that gets generated. If empty it won't get generated at all.
  "doxdocgen.c.firstLine": "/**",

  // Smart text snippet for getters.
  "doxdocgen.c.getterText": "Get the {name} object",

  // The last line of the comment that gets generated. If empty it won't get generated at all.
  "doxdocgen.c.lastLine": " */",

  // Smart text snippet for setters.
  "doxdocgen.c.setterText": "Set the {name} object",

  // Doxygen comment trigger. This character sequence triggers generation of Doxygen comments.
  "doxdocgen.c.triggerSequence": "/**",

  // Smart text snippet for constructors.
  "doxdocgen.cpp.ctorText": "Construct a new {name} object",

  // Smart text snippet for destructors.
  "doxdocgen.cpp.dtorText": "Destroy the {name} object",

  // The template of the template parameter Doxygen line(s) that are generated. If empty it won't get generated at all.
  "doxdocgen.cpp.tparamTemplate": "@tparam {param} ",

  // File copyright documentation tag.  Array of strings will be converted to one line per element. Can template `{year}`.
  "doxdocgen.file.copyrightTag": [
    "@copyright Copyright (c) {year}"
  ],

  // Additional file documentation.  Array of strings will be converted to one line per element. Can template `{year}`, `{date}`, `{author}`, `{email}` and `{file}`. You have to specify the prefix.
  "doxdocgen.file.customTag": [],

  // The order to use for the file comment. Values can be used multiple times. Valid values are `file`, `author`, `brief`, `version`, `date`, `empty`, `copyright` and `custom`.
  "doxdocgen.file.fileOrder": [
    "file",
    "author",
    "brief",
    "version",
    "date",
    "empty",
    "copyright",
    "empty",
    "custom"
  ],

  // The template for the file parameter in Doxygen.
  "doxdocgen.file.fileTemplate": "@file {name}",

  // Version number for the file.
  "doxdocgen.file.versionTag": "@version 0.1",

  // Set the e-mail address of the author.  Replaces `{email}`.
  "doxdocgen.generic.authorEmail": "you@domain.com",

  // Set the name of the author.  Replaces `{author}`.
  "doxdocgen.generic.authorName": "your name",

  // Set the style of the author tag and your name.  Can template `{author}` and `{email}`.
  "doxdocgen.generic.authorTag": "@author {author} ({email})",

  // If this is enabled, the documentation for a `bool` return value will be split into `true` and `false` entries.
  "doxdocgen.generic.boolReturnsTrueFalse": true,

  // The template of the brief Doxygen line that is generated. If empty it won't get generated at all.
  "doxdocgen.generic.briefTemplate": "@brief {text}",

  // Provide intellisense and snippet for doxygen commands
  "doxdocgen.generic.commandSuggestion": true,

  // Add `\` in doxygen command suggestion for better readbility (need to enable commandSuggestion)
  "doxdocgen.generic.commandSuggestionAddPrefix": false,

  // Custom tags to be added to the generic order. One tag per line will be added. Can template `{year}`, `{date}`, `{author}`, `{email}` and `{file}`. You have to specify the prefix.
  "doxdocgen.generic.customTags": [],

  // The format to use for the date.
  "doxdocgen.generic.dateFormat": "YYYY-MM-DD",

  // The template for the date parameter in Doxygen.
  "doxdocgen.generic.dateTemplate": "@date {date}",

  // Array of keywords that should be removed from the input prior to parsing.
  "doxdocgen.generic.filteredKeywords": [],

  // Decide if you want to get smart text for certain commands.
  "doxdocgen.generic.generateSmartText": true,

  // Whether include type information at return.
  "doxdocgen.generic.includeTypeAtReturn": true,

  // How many lines the plugin should look for to find the end of the declaration. Please be aware that setting this value too low could improve the speed of comment generation by a very slim margin but the plugin also may not correctly detect all declarations or definitions anymore.
  "doxdocgen.generic.linesToGet": 20,

  // The order to use for the comment generation. Values can be used multiple times. Valid values are `brief`, `empty`, `tparam`, `param`, `return`, `custom`, `author`, `date`, `version` and `copyright`.
  "doxdocgen.generic.order": [
    "brief",
    "empty",
    "tparam",
    "param",
    "return",
    "custom"
  ],

  // The template of the param Doxygen line(s) that are generated. If empty it won't get generated at all.
  "doxdocgen.generic.paramTemplate": "@param {param} ",

  // The template of the return Doxygen line that is generated. If empty it won't get generated at all.
  "doxdocgen.generic.returnTemplate": "@return {type} ",

  // Decide if the values put into `{name}` should be split according to their casing.
  "doxdocgen.generic.splitCasingSmartText": true,

  // Substitute `{email}` with `git config --get user.email`.
  "doxdocgen.generic.useGitUserEmail": false,

  // Substitute `{author}` with `git config --get user.name`.
  "doxdocgen.generic.useGitUserName": false,

  // Controls whether Dash should search the keyword in exact docsets specified in docset setting.
  "dash.exactDocset": false,

  // Set mapping of file name to dash docset (supports glob pattern).
  "dash.fileNameToDocsetMap": {
    "[dD]ocker*": [
      "docker"
    ],
    "Vagrantfile": [
      "vagrant"
    ],
    "gruntfile.js": [
      "grunt"
    ],
    "gulpfile.js": [
      "gulp"
    ],
    "*.ino": [
      "arduino"
    ]
  },

  // Set mapping of languageId to dash docset.
  "dash.languageIdToDocsetMap": {
    "ansible": [
      "ansible"
    ],
    "ansible-advanced": [
      "ansible"
    ],
    "css": [
      "css",
      "bootstrap",
      "foundation",
      "less",
      "awesome",
      "cordova",
      "phonegap"
    ],
    "clojure": [
      "clojure"
    ],
    "cmake": [
      "cmake"
    ],
    "coffee": [
      "coffee"
    ],
    "cpp": [
      "cpp",
      "net",
      "boost",
      "qt",
      "cvcpp",
      "cocos2dx",
      "c",
      "manpages"
    ],
    "csharp": [
      "net",
      "mono",
      "unity3d"
    ],
    "dart": [
      "dartlang",
      "polymerdart",
      "angulardart"
    ],
    "elixir": [
      "elixir"
    ],
    "elm": [
      "elm"
    ],
    "erlang": [
      "erlang"
    ],
    "go": [
      "go",
      "godoc"
    ],
    "gradle": [
      "gradle"
    ],
    "haskell": [
      "haskell"
    ],
    "haml": [
      "haml"
    ],
    "html": [
      "html",
      "svg",
      "css",
      "bootstrap",
      "foundation",
      "awesome",
      "statamic",
      "javascript",
      "jquery",
      "jqueryui",
      "jquerym",
      "angularjs",
      "backbone",
      "marionette",
      "meteor",
      "moo",
      "prototype",
      "ember",
      "lodash",
      "underscore",
      "sencha",
      "extjs",
      "knockout",
      "zepto",
      "cordova",
      "phonegap",
      "yui"
    ],
    "jade": [
      "jade"
    ],
    "java": [
      "java",
      "javafx",
      "grails",
      "groovy",
      "playjava",
      "spring",
      "cvj",
      "processing"
    ],
    "javascript": [
      "javascript",
      "jquery",
      "jqueryui",
      "jquerym",
      "react",
      "angularjs",
      "backbone",
      "marionette",
      "meteor",
      "sproutcore",
      "moo",
      "prototype",
      "bootstrap",
      "foundation",
      "lodash",
      "underscore",
      "ember",
      "sencha",
      "extjs",
      "titanium",
      "knockout",
      "zepto",
      "yui",
      "d3",
      "svg",
      "dojo",
      "coffee",
      "nodejs",
      "express",
      "grunt",
      "mongoose",
      "moment",
      "require",
      "awsjs",
      "jasmine",
      "sails",
      "sinon",
      "chai",
      "html",
      "css",
      "cordova",
      "phonegap",
      "unity3d"
    ],
    "javascriptreact": [
      "react"
    ],
    "julia": [
      "julia"
    ],
    "kotlin": [
      "androidktx",
      "kotlin"
    ],
    "latex": [
      "latex"
    ],
    "less": [
      "less"
    ],
    "lua": [
      "lua",
      "corona"
    ],
    "markdown": [
      "markdown"
    ],
    "objective-c": [
      "iphoneos",
      "macosx",
      "watchos",
      "tvos",
      "appledoc",
      "cocos2d",
      "cocos3d",
      "kobold2d",
      "sparrow",
      "c",
      "manpages"
    ],
    "perl": [
      "perl",
      "manpages"
    ],
    "php": [
      "php",
      "wordpress",
      "drupal",
      "zend",
      "laravel",
      "yii",
      "joomla",
      "ee",
      "codeigniter",
      "cakephp",
      "phpunit",
      "symfony",
      "typo3",
      "twig",
      "smarty",
      "craft",
      "phpp",
      "html",
      "statamic",
      "mysql",
      "sqlite",
      "mongodb",
      "psql",
      "redis"
    ],
    "pde": [
      "processing"
    ],
    "puppet": [
      "puppet"
    ],
    "python": [
      "python",
      "django",
      "twisted",
      "sphinx",
      "flask",
      "tornado",
      "sqlalchemy",
      "numpy",
      "scipy",
      "salt",
      "pandas",
      "matplotlib",
      "cvp"
    ],
    "r": [
      "r"
    ],
    "ruby": [
      "ruby",
      "rubygems",
      "rails"
    ],
    "rust": [
      "rust"
    ],
    "sass": [
      "sass",
      "compass",
      "bourbon",
      "neat",
      "susy",
      "css"
    ],
    "scala": [
      "scala",
      "akka",
      "playscala"
    ],
    "shellscript": [
      "bash",
      "manpages"
    ],
    "sql": [
      "mysql",
      "sqlite",
      "psql"
    ],
    "stylus": [
      "stylus"
    ],
    "swift": [
      "swift",
      "iphoneos",
      "macosx",
      "watchos",
      "tvos",
      "appledoc"
    ],
    "tcl": [
      "tcl"
    ],
    "typescript": [
      "typescript",
      "javascript"
    ],
    "yaml": [
      "chef",
      "ansible"
    ],
    "haxe": [
      "haxe"
    ],
    "terraform": [
      "terraform"
    ]
  },

  // List of languages which suggestions are desired.
  "css.enabledLanguages": [
    "html"
  ],

  // List of local or remote style sheets for suggestions.
  "css.styleSheets": [],

  // Whether to clear previous output before each run.
  "code-runner.clearPreviousOutput": false,

  // Set the custom command to run.
  "code-runner.customCommand": "echo Hello",

  // Set the working directory.
  "code-runner.cwd": "",

  // Set the default language to run.
  "code-runner.defaultLanguage": "",

  // Whether to enable AppInsights to track user telemetry data.
  "code-runner.enableAppInsights": true,

  // Set the executor of each language.
  "code-runner.executorMap": {
    "javascript": "node",
    "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
    "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "zig": "zig run",
    "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "php": "php",
    "python": "python -u",
    "perl": "perl",
    "perl6": "perl6",
    "ruby": "ruby",
    "go": "go run",
    "lua": "lua",
    "groovy": "groovy",
    "powershell": "powershell -ExecutionPolicy ByPass -File",
    "bat": "cmd /c",
    "shellscript": "bash",
    "fsharp": "fsi",
    "csharp": "scriptcs",
    "vbscript": "cscript //Nologo",
    "typescript": "ts-node",
    "coffeescript": "coffee",
    "scala": "scala",
    "swift": "swift",
    "julia": "julia",
    "crystal": "crystal",
    "ocaml": "ocaml",
    "r": "Rscript",
    "applescript": "osascript",
    "clojure": "lein exec",
    "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
    "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
    "racket": "racket",
    "scheme": "csi -script",
    "ahk": "autohotkey",
    "autoit": "autoit3",
    "dart": "dart",
    "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    "d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
    "haskell": "runghc",
    "nim": "nim compile --verbosity:0 --hints:off --run",
    "lisp": "sbcl --script",
    "kit": "kitc --run",
    "v": "v run",
    "sass": "sass --style expanded",
    "scss": "scss --style expanded",
    "less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
    "FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    "sml": "cd $dir && sml $fileName"
  },

  // Set the executor of each file extension.
  "code-runner.executorMapByFileExtension": {
    ".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
    ".vbs": "cscript //Nologo",
    ".scala": "scala",
    ".jl": "julia",
    ".cr": "crystal",
    ".ml": "ocaml",
    ".zig": "zig run",
    ".exs": "elixir",
    ".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
    ".rkt": "racket",
    ".scm": "csi -script",
    ".ahk": "autohotkey",
    ".au3": "autoit3",
    ".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
    ".kts": "kotlinc -script",
    ".dart": "dart",
    ".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    ".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
    ".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
    ".hs": "runhaskell",
    ".nim": "nim compile --verbosity:0 --hints:off --run",
    ".csproj": "dotnet run --project",
    ".fsproj": "dotnet run --project",
    ".lisp": "sbcl --script",
    ".kit": "kitc --run",
    ".v": "v run",
    ".vsh": "v run",
    ".sass": "sass --style expanded",
    ".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
    ".ring": "ring",
    ".sml": "cd $dir && sml $fileName"
  },

  // Set the executor by glob.
  "code-runner.executorMapByGlob": {
    "pom.xml": "cd $dir && mvn clean package"
  },

  // Whether to use the directory of the file to be executed as the working directory.
  "code-runner.fileDirectoryAsCwd": false,

  // Whether to ignore selection to always run entire file.
  "code-runner.ignoreSelection": false,

  // Set the mapping of languageId to file extension.
  "code-runner.languageIdToFileExtensionMap": {
    "bat": ".bat",
    "powershell": ".ps1",
    "typescript": ".ts"
  },

  // Whether to preserve focus on code editor after code run is triggered.
  "code-runner.preserveFocus": true,

  // Whether to respect Shebang to run code.
  "code-runner.respectShebang": true,

  // Whether to run code in Integrated Terminal.
  "code-runner.runInTerminal": false,

  // Whether to save all files before running.
  "code-runner.saveAllFilesBeforeRun": false,

  // Whether to save the current file before running.
  "code-runner.saveFileBeforeRun": false,

  // Whether to show extra execution message like [Running] ... and [Done] ...
  "code-runner.showExecutionMessage": true,

  // Whether to show 'Run Code' command in editor context menu.
  "code-runner.showRunCommandInEditorContextMenu": true,

  // Whether to show 'Run Code' command in explorer context menu.
  "code-runner.showRunCommandInExplorerContextMenu": true,

  // Whether to show 'Run Code' icon in editor title menu.
  "code-runner.showRunIconInEditorTitleMenu": true,

  // Whether to show 'Stop code run' icon in the editor title menu when code is running.
  "code-runner.showStopIconInEditorTitleMenu": true,

  // Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
  "code-runner.temporaryFileName": "tempCodeRunnerFile",

  // For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
  "code-runner.terminalRoot": "",

  // This allows to pass a configuration settings file for the mlint linter. Enter the full path for the linter settings file to use.
  "matlab.linterConfig": null,

  // This sets the encoding for the linting, default is utf8. Use if your console uses a different encoding.
  "matlab.linterEncoding": "utf8",

  // Run the linting on save of file.
  "matlab.lintOnSave": true,

  // The path to the matlab executable.
  "matlab.matlabpath": null,

  // The path to the mlint executable
  "matlab.mlintpath": null,

  // Whether to typecheck the entire project on load. It could drive to bad performance in large projects.
  "haskell.checkProject": true,

  // The formatter to use when formatting a document or range. Ensure the plugin is enabled.
  "haskell.formattingProvider": "ormolu",

  // Manually set a ghcup executable path.
  "haskell.ghcupExecutablePath": "",

  // If set, redirects the logs to a file.
  "haskell.logFile": "",

  // How to manage/find HLS installations.
  //  - GHCup: Will use ghcup and manage Haskell toolchain in the default location (usually '~/.ghcup')
  //  - PATH: Discovers HLS and other executables in system PATH
  "haskell.manageHLS": "PATH",

  // Maximum number of completions sent to the editor.
  "haskell.maxCompletions": 40,

  // An optional URL to override where ghcup checks for tool download info (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/ghcup-0.0.7.yaml)
  "haskell.metadataURL": "",

  // When opening 'Documentation' for external libraries, open in hackage by default. Set to false to instead open in vscode.
  "haskell.openDocumentationInHackage": true,

  // When opening 'Source' for external libraries, open in hackage by default. Set to false to instead open in vscode.
  "haskell.openSourceInHackage": true,

  // Enables alternateNumberFormat plugin
  "haskell.plugin.alternateNumberFormat.globalOn": true,

  // Enables callHierarchy plugin
  "haskell.plugin.callHierarchy.globalOn": true,

  // Enables changeTypeSignature plugin
  "haskell.plugin.changeTypeSignature.globalOn": true,

  // Enables class code actions
  "haskell.plugin.class.codeActionsOn": true,

  // Enables class code lenses
  "haskell.plugin.class.codeLensOn": true,

  // Enable the diff output (WAS/NOW) of eval lenses
  "haskell.plugin.eval.config.diff": true,

  // Enable marking exceptions with `*** Exception:` similarly to doctest and GHCi.
  "haskell.plugin.eval.config.exception": false,

  // Enables eval plugin
  "haskell.plugin.eval.globalOn": true,

  // Enables explicitFixity plugin
  "haskell.plugin.explicitFixity.globalOn": true,

  // Call out to an external "fourmolu" executable, rather than using the bundled library
  "haskell.plugin.fourmolu.config.external": false,

  // Enables gadt plugin
  "haskell.plugin.gadt.globalOn": true,

  // Enables ghcide-code-actions-bindings plugin
  "haskell.plugin.ghcide-code-actions-bindings.globalOn": true,

  // Enables ghcide-code-actions-fill-holes plugin
  "haskell.plugin.ghcide-code-actions-fill-holes.globalOn": true,

  // Enables ghcide-code-actions-imports-exports plugin
  "haskell.plugin.ghcide-code-actions-imports-exports.globalOn": true,

  // Enables ghcide-code-actions-type-signatures plugin
  "haskell.plugin.ghcide-code-actions-type-signatures.globalOn": true,

  // Extends the import list automatically when completing a out-of-scope identifier
  "haskell.plugin.ghcide-completions.config.autoExtendOn": true,

  // Inserts snippets when using code completions
  "haskell.plugin.ghcide-completions.config.snippetsOn": true,

  // Enables ghcide-completions plugin
  "haskell.plugin.ghcide-completions.globalOn": true,

  // Enables ghcide-hover-and-symbols hover
  "haskell.plugin.ghcide-hover-and-symbols.hoverOn": true,

  // Enables ghcide-hover-and-symbols symbols
  "haskell.plugin.ghcide-hover-and-symbols.symbolsOn": true,

  // Control how type lenses are shown
  //  - always: Always displays type lenses of global bindings
  //  - exported: Only display type lenses of exported global bindings
  //  - diagnostics: Follows error messages produced by GHC about missing signatures
  "haskell.plugin.ghcide-type-lenses.config.mode": "always",

  // Enables ghcide-type-lenses plugin
  "haskell.plugin.ghcide-type-lenses.globalOn": true,

  // Enables haddockComments plugin
  "haskell.plugin.haddockComments.globalOn": true,

  // Enables hlint code actions
  "haskell.plugin.hlint.codeActionsOn": true,

  // Flags used by hlint
  "haskell.plugin.hlint.config.flags": [],

  // Enables hlint diagnostics
  "haskell.plugin.hlint.diagnosticsOn": true,

  // Enables importLens code actions
  "haskell.plugin.importLens.codeActionsOn": true,

  // Enables importLens code lenses
  "haskell.plugin.importLens.codeLensOn": true,

  // Enables moduleName plugin
  "haskell.plugin.moduleName.globalOn": true,

  // Enables pragmas code actions
  "haskell.plugin.pragmas.codeActionsOn": true,

  // Enables pragmas completions
  "haskell.plugin.pragmas.completionOn": true,

  // Enables qualifyImportedNames plugin
  "haskell.plugin.qualifyImportedNames.globalOn": true,

  // Enables refineImports code actions
  "haskell.plugin.refineImports.codeActionsOn": true,

  // Enables refineImports code lenses
  "haskell.plugin.refineImports.codeLensOn": true,

  // Enable experimental cross-module renaming
  "haskell.plugin.rename.config.crossModule": false,

  // Enables rename plugin
  "haskell.plugin.rename.globalOn": true,

  // Enables retrie plugin
  "haskell.plugin.retrie.globalOn": true,

  // Enables splice plugin
  "haskell.plugin.splice.globalOn": true,

  // Enables tactics code actions
  "haskell.plugin.tactics.codeActionsOn": true,

  // Enables tactics code lenses
  "haskell.plugin.tactics.codeLensOn": true,

  // The depth of the search tree when performing "Attempt to fill hole". Bigger values will be able to derive more solutions, but will take exponentially more time.
  "haskell.plugin.tactics.config.auto_gas": 4,

  // The severity to use when showing hole diagnostics. These are noisy, but some editors don't allow jumping to all severities.
  //  - 1: error
  //  - 2: warning
  //  - 3: info
  //  - 4: hint
  //  - null: none
  "haskell.plugin.tactics.config.hole_severity": null,

  // Maximum number of `Use constructor <x>` code actions that can appear
  "haskell.plugin.tactics.config.max_use_ctor_actions": 5,

  // Should Wingman emit styling markup when showing metaprogram proof states?
  "haskell.plugin.tactics.config.proofstate_styling": true,

  // The timeout for Wingman actions, in seconds
  "haskell.plugin.tactics.config.timeout_duration": 2,

  // Enables tactics hover
  "haskell.plugin.tactics.hoverOn": true,

  // Prompt before performing any downloads.
  "haskell.promptBeforeDownloads": "true",

  // An optional path where downloaded metadata will be stored. Check the default value [here](https://github.com/haskell/vscode-haskell#downloaded-binaries)
  "haskell.releasesDownloadStoragePath": "",

  // An optional URL to override where ghcup checks for HLS-GHC compatibility list (usually at: https://raw.githubusercontent.com/haskell/ghcup-metadata/master/hls-metadata-0.0.1.json)
  "haskell.releasesURL": "",

  // Define environment variables for the language server.
  "haskell.serverEnvironment": {},

  // Manually set a language server executable. Can be something on the $PATH or the full path to the executable itself. Works with `~,` `${HOME}` and `${workspaceFolder}`.
  "haskell.serverExecutablePath": "",

  // Pass additional arguments to the language server.
  "haskell.serverExtraArgs": "",

  // When manageHLS is set to GHCup, this can overwrite the automatic toolchain configuration with a more specific one. When a tool is omitted, the extension will manage the version (for 'ghc' we try to figure out the version the project requires). The format is '{"tool": "version", ...}'. 'version' accepts all identifiers that 'ghcup' accepts.
  "haskell.toolchain": {},

  // Sets the log level in the client side.
  "haskell.trace.client": "info",

  // Traces the communication between VS Code and the language server.
  "haskell.trace.server": "off",

  // Whether to upgrade GHCup automatically when 'manageHLS' is set to 'GHCup'.
  "haskell.upgradeGHCup": true,

  // When `latex-workshop.bibtex-fields.sort.enabled` is true, these fields are put at the top, in the order defined by the array.
  "latex-workshop.bibtex-entries.first": [
    "string",
    "xdata"
  ],

  // When `latex-workshop.bibtex-fields.sort.enabled` is true, sort fields according the order defined here and then alphabetically for non listed fields.
  "latex-workshop.bibtex-fields.order": [],

  // Sort fields inside every entry. The sorting order is defined by `latex-workshop.bibtex-fields.order`. This variable only has effect when formatting bibtex aligns fields. It is not possible to sort entries without aligning them.
  "latex-workshop.bibtex-fields.sort.enabled": false,

  // Align equal signs when calling VSCode format on a .bib file.
  "latex-workshop.bibtex-format.align-equal.enabled": true,

  // Determines if field names should be formatted like 'AUTHOR' or 'author'.
  "latex-workshop.bibtex-format.case": "lowercase",

  // How to handle duplicates found by the bibtex sorting functions. Duplicates are decided according to the `bibtex-format.sortby` config.
  "latex-workshop.bibtex-format.handleDuplicates": "Highlight Duplicates",

  // Sort content when calling VSCode format on a .bib file.
  "latex-workshop.bibtex-format.sort.enabled": false,

  // An array of strings to sort by. Either a bibtex field name (title, author, year, etc.), or `"year-desc"` to sort by year in descending order, or `"key"` for the entry key, or `"type"` for the entry type (article, book, misc, etc.). E.g. `["author", "year-desc", "title"]`.
  "latex-workshop.bibtex-format.sortby": [
    "key"
  ],

  // Surround each field value with either {Curly braces} or "Quotation marks".
  "latex-workshop.bibtex-format.surround": "Curly braces",

  // Indentation for each field. The string can be `"tab"` or of the form `"X spaces"` or simply `"X"` where `X` is a number.
  "latex-workshop.bibtex-format.tab": "2 spaces",

  // Keep the trailing comma of the last field item.
  "latex-workshop.bibtex-format.trailingComma": false,

  // Defines the maximum bibtex file size for the extension to parse in MB.
  "latex-workshop.bibtex.maxFileSize": 5,

  // Use alternative keymap combo, i.e., `ctrl`+`l` `alt`+`key`, to replace the default `ctrl`/`cmd`+`alt` shortcuts.
  "latex-workshop.bind.altKeymap.enabled": false,

  // Enable the automatic insertion of `\item` on a newline when pressing `Enter` in a line starting in `\item`.
  "latex-workshop.bind.enter.key": true,

  // Enable checking for duplicated labels. A new check is triggered every time the intellisense data is updated, see `latex-workshop.intellisense.update.aggressive.enabled`.
  "latex-workshop.check.duplicatedLabels.enabled": true,

  // Delay to wait for GitHub Codespaces Authentication of port forwarding to be resolved, in milliseconds.
  "latex-workshop.codespaces.portforwarding.openDelay": 20000,

  // Enable docker-based LaTeX distribution support. Do not set this item to `true` unless you are aware of what it means. This extension will use the images defined in `latex-workshop.docker.image.latex` to execute `latexmk`, `synctex`, `texcount`, and `latexindent`.
  "latex-workshop.docker.enabled": false,

  // Define the image for `latexmk`, `synctex`, `texcount`, and `latexindent`.
  "latex-workshop.docker.image.latex": "",

  // Enable Hover on Citations.
  "latex-workshop.hover.citation.enabled": true,

  // Enable Hover on Commands to show the possible signatures.
  "latex-workshop.hover.command.enabled": true,

  // The color of cursor in Hover Preview.
  "latex-workshop.hover.preview.cursor.color": "auto",

  // Render cursor in Hover Preview at the current position.
  "latex-workshop.hover.preview.cursor.enabled": true,

  // Cursor symbol in Hover Preview.
  "latex-workshop.hover.preview.cursor.symbol": "\\!|\\!",

  // Enable Hover Preview.
  "latex-workshop.hover.preview.enabled": true,

  // MathJax extensions to load for Hover Preview. See [the list](https://docs.mathjax.org/en/latest/input/tex/extensions/index.html). Note that the following extensions are loaded by default: `ams`, `color`, `newcommand`, `noerrors`, and `noundefined`. They cannot be disabled.
  "latex-workshop.hover.preview.mathjax.extensions": [],

  // Maximum number of lines between the beginning of the math environment and the cursor position to allow preview.
  "latex-workshop.hover.preview.maxLines": 20,

  // Set the path of a file containing newcommands to be used in Hover Preview. If the path is relative, it is joined with the root dir.
  "latex-workshop.hover.preview.newcommand.newcommandFile": "",

  // Enable newcommands defined in the current TeX file to be included in Hover Preview.
  "latex-workshop.hover.preview.newcommand.parseTeXFile.enabled": true,

  // Scaling of Hover Preview.
  "latex-workshop.hover.preview.scale": 1,

  // Enable Hover on References.
  "latex-workshop.hover.ref.enabled": true,

  // Show number assigned to the reference in the previous compilation.
  "latex-workshop.hover.ref.number.enabled": true,

  // Many snippets use text hints of the form `${\d:some_tex}` for their argument. You may prefer to hide instead by setting this configuration to `false`.
  "latex-workshop.intellisense.argumentHint.enabled": true,

  // Character to trigger snippet suggestions as part of intellisense. Set this variable to `''` to deactivate these suggestions.
  "latex-workshop.intellisense.atSuggestion.trigger.latex": "@",

  // Dictionary of `"@prefix": "snippet command"` to add to, replace, or remove the default suggestions in `data/at-suggestions.json`. The key of the dictionary is the triggering string, which **must** starts with `@` regardless of `latex-workshop.intellisense.atSuggestion.trigger.latex`. The value of the dictionary is the snippet to be inserted. If the key is identical to a default snippet defined in `data/at-suggestions.json`, the new value in the dictionary is used for suggestion. If the value is an empty string, the snippet is removed from suggestion. For example, `{ "@.": "\cdot", "@6": "" }`.
  "latex-workshop.intellisense.atSuggestion.user": {},

  // **Deprecated**: This config has been renamed to `intellisense.atSuggestion.user`.
  //
  "latex-workshop.intellisense.atSuggestionJSON.replace": {},

  // Dictionary of `"entry name": ["array", "of", "fields"]` to replace the default fields used in `data/biblatex-entries.json`. See `data/biblatex-entries.json` for the list of fields for each entry. This variable is used when `latex-workshop.intellisense.citation.backend` is set to `bibtex`.
  "latex-workshop.intellisense.biblatexJSON.replace": {},

  // Dictionary of `"entry name": ["array", "of", "fields"]` to replace the default fields used in `data/bibtex-entries.json`. See `data/bibtex-entries.json` for the list of fields for each entry. This variable is used when `latex-workshop.intellisense.citation.backend` is set to `biblatex`.
  "latex-workshop.intellisense.bibtexJSON.replace": {},

  // Backend to use for citation intellisense.
  "latex-workshop.intellisense.citation.backend": "bibtex",

  // List of fields to display for citation preview and intellisense. This list is also used as the filter text to narrow down the intellisense suggestions.
  "latex-workshop.intellisense.citation.format": [
    "author",
    "title",
    "journal",
    "publisher",
    "booktitle",
    "year"
  ],

  // Defines what to show as suggestion labels when intellisense provides citation suggestions in inline mode.
  //  - bibtex key: Show bibtex keys in the inline mode.
  //  - title: Show publication titles in the inline mode.
  //  - authors: Show publication authors in the inline mode.
  "latex-workshop.intellisense.citation.label": "bibtex key",

  // Defines which type of hint to show when intellisense provides citation suggestions.
  //  - inline: Use the inline intellisense to provide citation completion items.
  //  - browser: Use a dropdown menu to provide citation completion items.
  "latex-workshop.intellisense.citation.type": "inline",

  // Dictionary of `"command name": "command snippet"` to add to, replace, or remove the default ones in `data/commands.json`. The key of the dictionary is the command name with optional braces indicating the command arguments. The value of the dictionary is the snippet to be inserted. If the key is identical to a default command suggestion defined in `data/commands.json`, the new value in the dictionary is used for suggestion. If the value is an empty string, the command is removed from suggestion. Leading backslashes will be added to both the name and snippet by the extension, so don't include them in this config. For example, `{"mycommand[]{}": "notsamecommand[${2:option}]{$TM_SELECTED_TEXT$1}", "parbox{}{}": "parbox{${2:width}}{$TM_SELECTED_TEXT$1}", "overline{}": ""}` adds a new command with name `mycommand[]{} that inserts `\notsamecommand[]{}`, replaces the default snippet of `\parbox{}{}` to make it include current selected text, and removes `\overline{}` from suggestion.
  "latex-workshop.intellisense.command.user": {},

  // **Deprecated**: This config has been superceded by config `intellisense.command.user`, which provides more features.
  //
  "latex-workshop.intellisense.commandsJSON.replace": {},

  // Use fast LaTeX parsing algorithm to build outline/structure. This is done by inheritly removing texts and comments before building AST. Enabling this will not tamper the document, but may result in incomplete outline/structure.
  "latex-workshop.intellisense.fastparse.enabled": true,

  // Specify the base directory for file completion
  //  - root relative: Completion from the root file directory
  //  - file relative: Completion from the current file directory
  //  - both: both
  "latex-workshop.intellisense.file.base": "root relative",

  // Patterns to ignore in file completion
  "latex-workshop.intellisense.file.exclude": [
    "**/*.aux",
    "**/*.bbl",
    "**/*.bcf",
    "**/*.blg",
    "**/*.idx",
    "**/*.ind",
    "**/*.lof",
    "**/*.lot",
    "**/*.out",
    "**/*.toc",
    "**/*.acn",
    "**/*.acr",
    "**/*.alg",
    "**/*.glg",
    "**/*.glo",
    "**/*.gls",
    "**/*.ist",
    "**/*.fls",
    "**/*.log",
    "**/*.nav",
    "**/*.snm",
    "**/*.fdb_latexmk",
    "**/*.synctex.gz",
    "**/*.run.xml"
  ],

  // Enable preview for `\includegraphics` completion.
  "latex-workshop.intellisense.includegraphics.preview.enabled": true,

  // The name of LaTeX commands that indicates a label definition. The command must accept one mandatory argument of the label reference string, e.g, \linelabel{ref-str}.
  "latex-workshop.intellisense.label.command": [
    "label",
    "linelabel"
  ],

  // Scan for labels defined as `label={some tex}` to add to the reference intellisense menu. The braces are mandatory.
  "latex-workshop.intellisense.label.keyval": true,

  // Some LaTeX commands can have several forms, each with different arguments. If set to True, the intellisense completion list will have one entry for each form of a given command. Default is true.
  "latex-workshop.intellisense.optionalArgsEntries.enabled": true,

  // List of extra directories to look for package completion files in addition to those provided by the extension. See https://github.com/James-Yu/LaTeX-Workshop/wiki/Intellisense#commands-starting-with- to learn how to generate these files. Files found in these directories have a higher priority over the default ones. This setting is only relevant when `latex-workshop.intellisense.package.env.enabled` is true.
  "latex-workshop.intellisense.package.dirs": [],

  // Auto-complete commands and environments from used packages.
  "latex-workshop.intellisense.package.enabled": true,

  // If true, every environment provided by an included package is available by a snippet `\envname`. Only applies when `latex-workshop.intellisense.package.enabled` is true.
  "latex-workshop.intellisense.package.env.enabled": true,

  // List of extra packages to always add to the auto-completion mechanism. When `latex-workshop.intellisense.package.enabled` is set to `true`, the commands and environments defined in these extra packages will be added to the intellisense suggestions.
  "latex-workshop.intellisense.package.extra": [],

  // Additional trigger characters for intellisense of LaTeX documents.
  "latex-workshop.intellisense.triggers.latex": [
    "{"
  ],

  // When `\` is typed, show unimath symbols in the dropdown selector.
  "latex-workshop.intellisense.unimathsymbols.enabled": false,

  // Defines whether the extension aggressively parses the changed content after stopped typing. Disable this config will let the extension only update intellisense after saving changed files.
  "latex-workshop.intellisense.update.aggressive.enabled": false,

  // Defines the delay in milliseconds for the extension to update current active file content for intellisense after stopped typing. This config works only when `intellisense.update.aggressive.enabled` is enabled. Lower this value to let the extension know newly defined commands/references/environments more quickly, at the cost of more frequent content parsing: more computational burden.
  "latex-workshop.intellisense.update.delay": 1000,

  // Use kpsewhich as defined by `latex-workshop.kpsewhich.path#` to resolve bibliography files in addition to looking into the directories listed in `#latex-workshop.latex.bibDirs`.
  "latex-workshop.kpsewhich.enabled": false,

  // Define the location of the kpsewhich executable file.
  "latex-workshop.kpsewhich.path": "kpsewhich",

  // Delete LaTeX auxiliary files when errors occur during build and retry. This property defines whether LaTeX Workshop will try to clean and build the project once again after errors happen in the build toolchain.
  "latex-workshop.latex.autoBuild.cleanAndRetry.enabled": true,

  // The minimal time interval in milliseconds for an auto build to trigger after the previous (manual and auto) build. This value is recommended to be greater than ~500.
  "latex-workshop.latex.autoBuild.interval": 1000,

  // When the extension shall auto build LaTeX project using the default (first) recipe.
  // - `onSave` builds the project upon saving a `tex` file in vscode.
  // - `onFileChange` builds the project upon detecting a file change in any of the dependencies, even modified by other applications.
  //
  //  Note that `onSave` is more restrictive than `onFileChange`
  //  - never: Never run auto build
  //  - onSave: Auto build whenever a file is saved
  //  - onFileChange: Auto build whenever a dependency file changes on disk
  "latex-workshop.latex.autoBuild.run": "onFileChange",

  // When LaTeX auxiliary files should be deleted. The folder to be cleaned is defined in `latex-workshop.latex.outDir`.
  // - `onFailed` cleans the project when compilation fails.
  // - `onBuilt` cleans the project when compilation is done, whether successful or failed.
  //  - never: Never clean the project
  //  - onFailed: Clean compilation fails
  //  - onBuilt: Clean after build, be it successful or not
  "latex-workshop.latex.autoClean.run": "never",

  // List of directories where to look for `.bib` files. Absolute paths are required. This setting is only used by the intellisense feature, you may also need to set the environment variable `BIBINPUTS` properly for the LaTeX compiler to find the `.bib` files.
  "latex-workshop.latex.bibDirs": [],

  // Clear the LaTeX Compiler logs before every step of a recipe. Set this property to false to keep the logs of all tools in a recipe.
  "latex-workshop.latex.build.clearLog.everyRecipeStep.enabled": true,

  // Force the use the recipe mechanism even if some magic comments are present.
  "latex-workshop.latex.build.forceRecipeUsage": true,

  // The arguments of `latex-workshop.latex.clean.command`. Placeholders listed in https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders can be used to populate the argument strings. Besides, an additional `%TEX%` placeholder refers to the full path of the tex file from which the clean command is called.
  "latex-workshop.latex.clean.args": [
    "-c",
    "%TEX%"
  ],

  // The command to be used to remove temporary files when `latex-workshop.latex.clean.method` is set to `cleanMethod`.
  "latex-workshop.latex.clean.command": "latexmk",

  // Files to clean. This property must be an array of strings. File globs such as `*.removeme`, `something?.aux` can be used. Users can also specify glob patterns like `emptyfolder*/` to remove empty folders. Non-empty folders will be ignored. The folder globs must end with a slash and the last path component must not contain the globstar `**`, otherwise the folders will not be removed. The following globs patterns are correct `['abc/', 'abc*/', '**/abc*/', 'abc/**/def/']` but these are not ['**', '**/', 'abc/**', 'abc/**/', 'abc/def**/', 'abc/d**ef/']`.
  "latex-workshop.latex.clean.fileTypes": [
    "*.aux",
    "*.bbl",
    "*.blg",
    "*.idx",
    "*.ind",
    "*.lof",
    "*.lot",
    "*.out",
    "*.toc",
    "*.acn",
    "*.acr",
    "*.alg",
    "*.glg",
    "*.glo",
    "*.gls",
    "*.fls",
    "*.log",
    "*.fdb_latexmk",
    "*.snm",
    "*.synctex(busy)",
    "*.synctex.gz(busy)",
    "*.nav",
    "*.vrb"
  ],

  // Define the method used by the `clean` command to remove temporary files.
  //  - glob: Clean all the files located in `latex-workshop.latex.outDir#` and matching the glob patterns listed in `#latex-workshop.latex.clean.fileTypes`.
  //  - cleanCommand: Run `latex-workshop.latex.clean.command` to clean temporary files.
  "latex-workshop.latex.clean.method": "glob",

  // Delete LaTeX auxiliary files recursively in sub-folders of `latex-workshop.latex.outDir`. Note that sub-folders are not removed.
  "latex-workshop.latex.clean.subfolder.enabled": false,

  // The arguments of `latex-workshop.latex.external.build.command` when calling latex-workshop.build.
  "latex-workshop.latex.external.build.args": [],

  // The external command to execute when calling latex-workshop.build. This is useful when compiling relies on a Makefile or a bespoke script. When defined, it completely bypasses the recipes and root file detection mechanism.
  "latex-workshop.latex.external.build.command": "",

  // Define the arguments to be input to magic command executable. This can be overridden by using "% !TeX options".
  "latex-workshop.latex.magic.args": [
    "-synctex=1",
    "-interaction=nonstopmode",
    "-file-line-error",
    "%DOC%"
  ],

  // Define the arguments to be input to BIB magic command executable. This can be overridden by using "% !BIB options".
  "latex-workshop.latex.magic.bib.args": [
    "%DOCFILE%"
  ],

  // Add `--max-print-line` option to LaTeX build commands. This flag tells some MikTeX compilers to produce non hard wrapped log messages. Non hard wrapped log messages are required for the _Problem_ Pane to properly display messages.
  "latex-workshop.latex.option.maxPrintLine.enabled": true,

  // The directory where the extension tries to find project files (e.g., PDF and SyncTeX files) are located. Both relative and absolute paths are supported. Relative path start from the root file location, so beware if it is located in sub-directory. The path must not contain a trailing slash. The LaTeX toolchain should output files to this path. For a list of supported placeholders, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders.
  "latex-workshop.latex.outDir": "%DIR%",

  // Define which recipe is used by `latex-workshop.build#`. It also applies to auto build. Recipes are referred to by their names as defined in `#latex-workshop.latex.recipes`. Note there are two particular values:
  // - `first` means to use the first recipe in `latex-workshop.latex.recipes`;
  // - `lastUsed` means to use the last run recipe.
  "latex-workshop.latex.recipe.default": "first",

  // Define LaTeX compiling recipes. Each recipe in the list is an object containing its name and the names of tools to be used sequentially, which are defined in `latex-workshop.latex.tools`. By default, the first recipe is used to compile the project. For details, please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipes.
  "latex-workshop.latex.recipes": [
    {
      "name": "latexmk",
      "tools": [
        "latexmk"
      ]
    },
    {
      "name": "latexmk (latexmkrc)",
      "tools": [
        "latexmk_rconly"
      ]
    },
    {
      "name": "latexmk (lualatex)",
      "tools": [
        "lualatexmk"
      ]
    },
    {
      "name": "latexmk (xelatex)",
      "tools": [
        "xelatexmk"
      ]
    },
    {
      "name": "pdflatex -> bibtex -> pdflatex * 2",
      "tools": [
        "pdflatex",
        "bibtex",
        "pdflatex",
        "pdflatex"
      ]
    },
    {
      "name": "Compile Rnw files",
      "tools": [
        "rnw2tex",
        "latexmk"
      ]
    },
    {
      "name": "Compile Jnw files",
      "tools": [
        "jnw2tex",
        "latexmk"
      ]
    },
    {
      "name": "Compile Pnw files",
      "tools": [
        "pnw2tex",
        "latexmk"
      ]
    },
    {
      "name": "tectonic",
      "tools": [
        "tectonic"
      ]
    }
  ],

  // When the `subfile` package is used, either the main file or any subfile containing `\documentclass[main.tex]{subfile}` can be LaTeXing. When `false`, the `build` and `view` commands  ask the user's choice first. When `true`, the subfile is used when `latex-workshop.latex.rootFile.useSubFile` is also `true`, otherwise the rootFile is used.
  "latex-workshop.latex.rootFile.doNotPrompt": false,

  // When the `subfile` package is used, either the main file or any subfile containing `\documentclass[main.tex]{subfile}` can be LaTeXing. When `true`, the extension uses the subfile as the rootFile for the `autobuild`, `clean` and `synctex` commands.
  "latex-workshop.latex.rootFile.useSubFile": true,

  // Patterns of files to exclude from the root detection mechanism. See also `latex-workshop.latex.search.rootFiles.include`. For more details, see the https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#multi-file-projects.
  "latex-workshop.latex.search.rootFiles.exclude": [],

  // Patterns of files to consider for the root detection mechanism. Relative paths are computed from the workspace folder. To detect the root file and the tex file tree, we parse all the `.tex` listed here. If you want to specify all `.tex` files inside directory, say `foo`, and all its subdirectories recursively, you need to use `**/foo/**/*.tex`. If you only want to match `.tex` files at the top level of the workspace, use `*.tex`. For more details, see https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#multi-file-projects
  "latex-workshop.latex.search.rootFiles.include": [
    "**/*.tex",
    "**/*.rnw",
    "**/*.Rnw"
  ],

  // List of directories where to look for extra input `.tex` files.
  // Absolute paths are required. You may also need to set the environment variable `TEXINPUTS` properly for the LaTeX compiler to find the `.tex` files, see the `env` parameter of [recipes](https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#latex-recipes).
  "latex-workshop.latex.texDirs": [],

  // Define LaTeX compiling tools to be used in recipes. Each tool is labeled by its `name`. When invoked, `command` is spawned with arguments defined in `args` and environment variables defined in `env`. Typically no spaces should appear in each argument unless in paths. List of available placeholders: `%DOC%`, `%DOC_W32%, %DOC_EXT%`, `%DOC_EXT_W32%`, `%DOCFILE%`, `%DOCFILE_EXT%`, `%DIR%`, `%DIR_W32%`, `%TMPDIR%` and `%OUTDIR%`, `%OUTDIR_W32%`. Please visit https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders for a complete list of all placeholders.
  "latex-workshop.latex.tools": [
    {
      "name": "latexmk",
      "command": "latexmk",
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "-pdf",
        "-outdir=%OUTDIR%",
        "%DOC%"
      ],
      "env": {}
    },
    {
      "name": "lualatexmk",
      "command": "latexmk",
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "-lualatex",
        "-outdir=%OUTDIR%",
        "%DOC%"
      ],
      "env": {}
    },
    {
      "name": "xelatexmk",
      "command": "latexmk",
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "-xelatex",
        "-outdir=%OUTDIR%",
        "%DOC%"
      ],
      "env": {}
    },
    {
      "name": "latexmk_rconly",
      "command": "latexmk",
      "args": [
        "%DOC%"
      ],
      "env": {}
    },
    {
      "name": "pdflatex",
      "command": "pdflatex",
      "args": [
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "%DOC%"
      ],
      "env": {}
    },
    {
      "name": "bibtex",
      "command": "bibtex",
      "args": [
        "%DOCFILE%"
      ],
      "env": {}
    },
    {
      "name": "rnw2tex",
      "command": "Rscript",
      "args": [
        "-e",
        "knitr::opts_knit$set(concordance = TRUE); knitr::knit('%DOCFILE_EXT%')"
      ],
      "env": {}
    },
    {
      "name": "jnw2tex",
      "command": "julia",
      "args": [
        "-e",
        "using Weave; weave(\"%DOC_EXT%\", doctype=\"tex\")"
      ],
      "env": {}
    },
    {
      "name": "jnw2texminted",
      "command": "julia",
      "args": [
        "-e",
        "using Weave; weave(\"%DOC_EXT%\", doctype=\"texminted\")"
      ],
      "env": {}
    },
    {
      "name": "pnw2tex",
      "command": "pweave",
      "args": [
        "-f",
        "tex",
        "%DOC_EXT%"
      ],
      "env": {}
    },
    {
      "name": "pnw2texminted",
      "command": "pweave",
      "args": [
        "-f",
        "texminted",
        "%DOC_EXT%"
      ],
      "env": {}
    },
    {
      "name": "tectonic",
      "command": "tectonic",
      "args": [
        "--synctex",
        "--keep-logs",
        "%DOC%.tex"
      ],
      "env": {}
    }
  ],

  // List environments with verbatim-like content. These environments are stripped off the `.tex` files before any parsing occurs. Note that this variable has no effect on syntax highlighting.
  "latex-workshop.latex.verbatimEnvs": [
    "verbatim",
    "lstlisting",
    "minted"
  ],

  // **Deprecated**: This config is deprecated and has no use.
  //
  "latex-workshop.latex.watch.delay": 250,

  // Files to ignore from the watching mechanism, i.e., no intellisense or build-on-file-change. However, document structure/outline and build-on-save won't be affected. This property must be an array of glob patterns. The patterns are matched against the absolute file path. To ignore everything inside the `texmf` tree, `**/texmf/**` can be used.
  "latex-workshop.latex.watch.files.ignore": [
    "**/*.bbx",
    "**/*.bbl",
    "**/*.cbx",
    "**/*.cfg",
    "**/*.clo",
    "**/*.cnf",
    "**/*.def",
    "**/*.dfu",
    "**/*.enc",
    "**/*.fd",
    "**/*.fmt",
    "**/*.lbx",
    "**/*.map",
    "**/*.mkii",
    "**/*.pfb",
    "**/*.tfm",
    "**/*.vf",
    "**/*.code.tex",
    "**/*.sty",
    "**/texmf-{dist,var}/**",
    "**/Local/MiKTeX/**",
    "**/Local/Programs/MiKTeX/**",
    "**/Roaming/MiKTeX/**",
    "**/Program*/MiKTeX*/**",
    "**/.miktex/texmfs/**",
    "/var/cache/miktex-texmf/**",
    "/usr/local/share/miktex-texmf/**",
    "**/Library/Application Support/MiKTeX/texmfs/**",
    "/dev/null"
  ],

  // **Deprecated**: This config is deprecated and has no use.
  //
  "latex-workshop.latex.watch.interval": 300,

  // Defines the time delay before confirming a PDF-like binary file is fully changed. Increase this value if you encounter repeated viewer refreshes and/or loss of PDF scrolling position. LaTeX Workshop internally monitors file change events and initiates auto-builds and/or PDF viewing refresh. When LaTeX is changing large files (particularly binary files like PDFs), multiple consecutive file change events may be emitted, potentially causing file corruption issues. We use this config to control the file polling delay before confirming that the file change has been stabilized. Note that non-binary files such as `.tex`, `.bib`, and `.cls` are not affected.
  "latex-workshop.latex.watch.pdf.delay": 250,

  // **Deprecated**: This config is deprecated and has no use.
  //
  "latex-workshop.latex.watch.usePolling": false,

  // Define the command line arguments for latexindent. In the addition to the placeholders defined at https://github.com/James-Yu/LaTeX-Workshop/wiki/Compile#placeholders, the following placeholders are accepted
  // - %TMPFILE%: The full path of the raw TeX file to be formatted. At this moment you need to use it as an input file of `latexindent`.
  // - %INDENT%: The indent character of the file, typically `	`, `' '`, `' '`.
  //
  // Note that the option `-c` requires a trailing slash.
  "latex-workshop.latexindent.args": [
    "-c",
    "%DIR%/",
    "%TMPFILE%",
    "-y=defaultIndent: '%INDENT%'"
  ],

  // Define the location of the latexindent executable file.
  "latex-workshop.latexindent.path": "latexindent",

  // Write the `TabSize` number from `.chktexrc`. The default value "-1" means that LaTeX Workshop will try to find `.chktexrc` and to read the value from it.
  "latex-workshop.linting.chktex.convertOutput.column.chktexrcTabSize": -1,

  // Enable converting ChkTeX outputs' column numbers for non-ASCII characters.
  "latex-workshop.linting.chktex.convertOutput.column.enabled": true,

  // Enable linting LaTeX with `chktex`. Check `latex-workshop.linting.run` to control when `chktex` is executed if this config is set to `true.
  "latex-workshop.linting.chktex.enabled": false,

  // Linter arguments to check LaTeX syntax of the current file state in real time with ChkTeX. Arguments must be in separate strings in the array. Additional arguments, i.e., `-I0 -f%f:%l:%c:%d:%k:%n:%m\n` will be appended when constructing the command. Current file contents will be piped to the command through stdin.
  "latex-workshop.linting.chktex.exec.args": [
    "-wall",
    "-n22",
    "-n30",
    "-e16",
    "-q"
  ],

  // Define the location of ChkTeX executive file. This command will be joint with `latex-workshop.linting.chktex.exec.args` and required arguments to form a complete command of ChkTeX.
  "latex-workshop.linting.chktex.exec.path": "chktex",

  // Defines the delay in milliseconds for linter to wait after stopped typing. This config only matters when `latex-workshop.linting.run` is set to `onType`.
  "latex-workshop.linting.delay": 500,

  // Enable linting LaTeX with `lacheck`. Check `latex-workshop.linting.run` to control when `lacheck` is executed if this config is set to `true.
  "latex-workshop.linting.lacheck.enabled": false,

  // Define the location of LaCheck executive file.
  "latex-workshop.linting.lacheck.exec.path": "lacheck",

  // When LaTeX should be linted.
  // - `onSave`: the whole LaTeX project will be linted upon saving.
  // - `onType`: the active document will be linted when input is stopped for a period of time defined in `latex-workshop.linting.delay`. It also implies `onSave`.
  //  - onSave: Lint the whole LaTeX project upon saving
  //  - onType: Lint the active document when input is stopped
  "latex-workshop.linting.run": "onSave",

  // [Experimental] Render a cursor on the math preview panel. **This feature is experimental. If you report an issue to us on this feature, we will not fix it. We will not accept any pull requests.**
  "latex-workshop.mathpreviewpanel.cursor.enabled": false,

  // The editor group in which to open the math preview panel.
  //  - current: Use the current editor group
  //  - left: Put the math preview panel in a new group on the left of the current one
  //  - right: Put the math preview panel in a new group on the right of the current one
  //  - above: Put the math preview panel in a new group above the current one
  //  - below: Put the math preview panel in a new group below the current one
  "latex-workshop.mathpreviewpanel.editorGroup": "below",

  // Show badbox information in the problems panel.
  "latex-workshop.message.badbox.show": true,

  // Exclude bibtex log messages matching the given regexp from the problems panel.
  "latex-workshop.message.bibtexlog.exclude": [],

  // Convert the encoding of filenames if necessary when displaying them in the problems panel.
  "latex-workshop.message.convertFilenameEncoding": true,

  // Display error messages in popup notifications.
  "latex-workshop.message.error.show": true,

  // Display information messages in popup notifications.
  "latex-workshop.message.information.show": false,

  // Exclude latex log messages matching the given regexp from the problems panel.
  "latex-workshop.message.latexlog.exclude": [],

  // Display LaTeX Workshop debug log in output panel. This property defines whether LaTeX Workshop will output its debug log to the log panel.
  "latex-workshop.message.log.show": true,

  // Display warning messages in popup notifications.
  "latex-workshop.message.warning.show": true,

  // Enable AST based smart selection. Command ids are `editor.action.smartSelect.expand` and `editor.action.smartSelect.shrink`.
  "latex-workshop.selection.smart.latex.enabled": true,

  // Enable the LaTeX contextual menu. This menu is deactivated as it is available through the new LaTeX badge. Just set this variable to `true` to recover the menu.
  "latex-workshop.showContextMenu": false,

  // Execute forward synctex at cursor position after compiling LaTeX project.
  "latex-workshop.synctex.afterBuild.enabled": false,

  // Define the location of SyncTeX executive file. Additional arguments, e.g., synctex modes and position of click, will be appended to this command.
  "latex-workshop.synctex.path": "synctex",

  // Enable using a builtin synctex function. The command set in latex-workshop.synctex.path will not be used.
  "latex-workshop.synctex.synctexjs.enabled": true,

  // TeXCount arguments to count words in the LaTeX documents of the entire project from the root file, or the current document. Arguments must be in separate strings in the array. Additional arguments, i.e., `-merge %DOC%` for the project and the current document path for counting current file will be appended when constructing the command.
  "latex-workshop.texcount.args": [],

  // When to call `texcount`. Default is never.
  //  - onSave: Count words in the current document
  //  - never: Never automatically call texcount
  "latex-workshop.texcount.autorun": "never",

  // The minimal time interval between two consecutive runs of `texcount` in milliseconds when `latex-workshop.texcount.run` is set to `onSave`.
  "latex-workshop.texcount.interval": 1000,

  // Define the location of TeXCount executive file/script. This command will be joint with `latex-workshop.texcount.args` and required arguments to form a complete command of TeXCount.
  "latex-workshop.texcount.path": "texcount",

  // Texdoc arguments to see a package documentation. Arguments must be in separate strings in the array. The package name is automatically appended to the arguments.
  "latex-workshop.texdoc.args": [
    "--view"
  ],

  // Define the location of the `texdoc` executable. This command is used to show a package documentation.
  "latex-workshop.texdoc.path": "texdoc",

  // Auto focus the LaTeX view when switching from non-tex to tex files. This will cause the view to appear consistently upon activating the extension.
  "latex-workshop.view.autoFocus.enabled": false,

  // The names of the commands to be shown in the outline/structure views. The commands must be called in the form `\commandname{arg}`.
  "latex-workshop.view.outline.commands": [
    "label"
  ],

  // **Deprecated**: This config has been renamed to `intellisense.fastparse.enabled`.
  //
  "latex-workshop.view.outline.fastparse.enabled": true,

  // Show the float caption in the outline/structure views.
  "latex-workshop.view.outline.floats.caption.enabled": true,

  // Show the floating objects (figures and tables) in the outline/structure views.
  "latex-workshop.view.outline.floats.enabled": true,

  // Show the float number in the outline/structure views.
  "latex-workshop.view.outline.floats.number.enabled": true,

  // Show the sectioning numbers in the outline/structure views.
  "latex-workshop.view.outline.numbers.enabled": true,

  // The section names of LaTeX outline hierarchy. It is also used by the folding mechanism. This property is an array of case-sensitive strings in the order of document structure hierarchy. For multiple tags in the same level, separate the tags with `|` as delimiters, e.g., `section|alternative`.
  "latex-workshop.view.outline.sections": [
    "part",
    "chapter",
    "section",
    "subsection",
    "subsubsection"
  ],

  // [Reopen Viewer] The background color of the viewer 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.backgroundColor": "#ffffff",

  // [Reopen Viewer] The border color of the PDF pages 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageBorderColor": "lightgrey",

  // [Reopen Viewer] The background color of the PDF document 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageColorsBackground": "",

  // [Reopen Viewer] The foreground color of the PDF document 1) in tab viewer when the vscode color theme is dark, and 2) in browser when the OS theme is dark. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.dark.pageColorsForeground": "",

  // [Reopen Viewer] The background color of the viewer 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.backgroundColor": "#ffffff",

  // [Reopen Viewer] The border color of the PDF pages 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageBorderColor": "lightgrey",

  // [Reopen Viewer] The background color of the PDF document 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageColorsBackground": "",

  // [Reopen Viewer] The foreground color of the PDF document 1) in tab viewer when the vscode color theme is light, and 2) in browser when the OS theme is light. The string must represent a color in HTML.
  "latex-workshop.view.pdf.color.light.pageColorsForeground": "",

  // The arguments for `latex-workshop.view.pdf.external.synctex.args` when forward synctex to external viewer. %LINE% is the line number, %PDF% is the placeholder for the absolute path to the generated PDF file, and %TEX% is the source LaTeX file path with `.tex` extension from which syncTeX is fired.
  "latex-workshop.view.pdf.external.synctex.args": [
    "%LINE%",
    "%PDF%",
    "%TEX%"
  ],

  // The command to execute when forward synctex to external viewer. This function is not officially supported.
  "latex-workshop.view.pdf.external.synctex.command": "",

  // The arguments for `latex-workshop.view.pdf.external.viewer.command` when using external viewer. This function is not officially supported. %PDF% is the placeholder for the absolute path to the generated PDF file.
  "latex-workshop.view.pdf.external.viewer.args": [
    "%PDF%"
  ],

  // The command to execute when using external viewer. This function is not officially supported.
  "latex-workshop.view.pdf.external.viewer.command": "",

  // Define if the hand tool is enabled by default in the PDF viewer.
  "latex-workshop.view.pdf.hand": false,

  // [Reopen Viewer] Which keybinding to use for the internal viewer for reverse synctex. `ctrl`/`cmd` + click (default) or double click.
  "latex-workshop.view.pdf.internal.synctex.keybinding": "ctrl-click",

  // [Reopen Viewer] Define the CSS invert filter level of the PDF viewer. This config can invert the color of PDF. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invert": 0,

  // [Reopen Viewer] Define the CSS brightness filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 2.
  "latex-workshop.view.pdf.invertMode.brightness": 1,

  // [Reopen Viewer] Enable the CSS invert filter.
  //  - auto: Enable the invert filter when using a dark theme.
  //  - always: Always enable invert filter.
  //  - compat: Enable the invert filter only if `invert > 0`.
  //  - never: Disable the invert filter
  "latex-workshop.view.pdf.invertMode.enabled": "compat",

  // [Reopen Viewer] Define the CSS grayscale filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invertMode.grayscale": 0.6,

  // [Reopen Viewer] Define the CSS hue-rotate filter angle of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 360.
  "latex-workshop.view.pdf.invertMode.hueRotate": 180,

  // [Reopen Viewer] Define the CSS sepia filter level of the PDF viewer when the invert mode is enabled. Possible values are from 0 to 1.
  "latex-workshop.view.pdf.invertMode.sepia": 0,

  // PDF viewer used for [View on PDF] link on \ref.
  "latex-workshop.view.pdf.ref.viewer": "auto",

  // The default scroll mode of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `0` (vertical), `1`(horizontal), `2` (wrapped), `3` (page).
  "latex-workshop.view.pdf.scrollMode": 0,

  // The default spread mode of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `0` (none), `1` (odd) and `2` (even).
  "latex-workshop.view.pdf.spreadMode": 0,

  // The editor group in which to open the tab viewer.
  //  - current: Use the current editor group
  //  - left: Put the viewer tab in a new group on the left of the current one
  //  - right: Put the viewer tab in a new group on the right of the current one
  //  - above: Put the viewer tab in a new group above the current one
  //  - below: Put the viewer tab in a new group below the current one
  "latex-workshop.view.pdf.tab.editorGroup": "right",

  // Defines the delay in milliseconds to wait for a tab opening. Please increase the value if you encounter a focus issue after opening a tab.
  "latex-workshop.view.pdf.tab.openDelay": 1000,

  // The default trim mode of the PDF viewer.
  //  - 0: No page trimming
  //  - 1: Trim 5% at margin
  //  - 2: Trim 10% at margin
  //  - 3: Trim 15% at margin
  "latex-workshop.view.pdf.trim": 0,

  // The default PDF viewer.
  //  - browser: Open PDF with the default web browser.
  //  - tab: Open PDF with the built-in tab viewer.
  //  - external: [Experimental] Open PDF with the external viewer set in "View > Pdf > External: command".
  "latex-workshop.view.pdf.viewer": "tab",

  // The default zoom level of the PDF viewer. This default value will be passed to the viewer upon opening. Possible values are `auto`, `page-actual`, `page-fit`, `page-width`, and one-based scale values (e.g., 0.5 for 50%, 2.0 for 200%).
  "latex-workshop.view.pdf.zoom": "auto",

  // Rebroadcasting KeyboardEvent on the internal viewers. If keyboard shortcuts on the internal viewer do not work well, change this setting.
  "latex-workshop.viewer.pdf.internal.keyboardEvent": "auto",

  // Define the port to listen on for communicating with the internal viewer. The default value "0" means the port is chosen randomly by the application.
  "latex-workshop.viewer.pdf.internal.port": "0",

  // Linter arguments to check LaTeX syntax of the current file state in real time with ChkTeX.
  // Arguments must be in separate strings in the array. Additional arguments, i.e., `-I0 -f%f:%l:%c:%d:%k:%n:%m\n` will be appended when constructing the command. Current file contents will be piped to the command through stdin.
  "latex-workshop.chktex.args.active": [
    "-wall",
    "-n22",
    "-n30",
    "-e16",
    "-q"
  ],

  // Linter arguments to check LaTeX syntax of the entire project from the root file with ChkTeX.
  // Arguments must be in separate strings in the array. Additional arguments, i.e., `-f%f:%l:%c:%d:%k:%n:%m\n %DOC%` will be appended when constructing the command.
  "latex-workshop.chktex.args.root": [
    "-wall",
    "-n22",
    "-n30",
    "-e16",
    "-q"
  ],

  // Defines the delay in milliseconds for chktex to wait after stopped typing.
  // This config only matters when `latex-workshop.chktex.run` is set to `onType`.
  "latex-workshop.chktex.delay": 500,

  // Enable linting LaTeX with ChkTeX.
  // Check `latex-workshop.chktex.run` to control when the linting is executed if this config is set to `true`.
  "latex-workshop.chktex.enabled": false,

  // Define the location of ChkTeX executive file.
  // This command will be joint with `latex-workshop.chktex.args.*` and required arguments to form a complete command of ChkTeX.
  "latex-workshop.chktex.path": "chktex",

  // When LaTeX should be linted by ChkTeX.
  // If set to `onSave`, the whole LaTeX project will be linted upon saving.
  // If set to `onType`, the active document will be linted when input is stopped for a period of time defined in `latex-workshop.chktex.delay`, besides the behavior of `onSave`.
  "latex-workshop.chktex.run": "onSave",

  // Defines the maximum bibtex file size for the extension to parse in MB.
  "latex-workshop.intellisense.citation.maxfilesizeMB": 5,

  // Many snippets use PlaceHolders of the form ${\d:some_text} for their argument. You may prefer to use TabStops ${\d} instead, which allows for direct call to intellisense again. Default is true.
  // Reload vscode to make this configuration effective.
  "latex-workshop.intellisense.useTabStops.enabled": true,

  // Delay before reloading a PDF file after last change, in milliseconds. You must reload VSCode to take into account a change in this configuration.
  "latex-workshop.latex.pdfWatch.delay": 250,

  // Display LaTeX Workshop update message on new versions.
  "latex-workshop.message.update.show": true,

  // How many characters long the progress bar should be
  "latex-workshop.progress.barLength": 15,

  //
  //  - Block Width: █████▋░░░ (8 levels per block)
  //  - Block Shading: █████▓░░░ (4 levels per block)
  //  - Block Quadrants: █████▙░░░ (4 levels per block)
  //  - none: No Bar
  "latex-workshop.progress.barStyle": "Block Shading",

  // Enable the progress bar and the LaTeX compilation info panel.
  "latex-workshop.progress.enabled": true,

  //
  "latex-workshop.progress.location": "Status Bar",

  // The style of number to use to indicate the run number
  //  - Parenthesised: ⑴ ⑵ ⑶ …
  //  - Circled: ① ② ③ …
  //  - Solid Circled: ❶ ❷ ❸ …
  //  - Full Stop: ⒈ ⒉ ⒊ …
  "latex-workshop.progress.runIconType": "Parenthesised",

  // Show the labels in the outline/structure views. Reload VSCode after changing the value.
  "latex-workshop.view.outline.labels.enabled": true,

  // The background color around the document. The string must represent a color in HTML.
  "latex-workshop.view.pdf.backgroundColor": "#ffffff",

  // If you want MinifyAll to not showing a context menu when right-clicking in your code. (True for disabling).
  "MinifyAll.disableCodeContextMenu": false,

  // If you want MinifyAll to stop minimizing CSS. (True for disabling)
  "MinifyAll.disableCss": false,

  // If you want MinifyAll to not showing a context menu when right-clicking in the file explorer. (True for disabling)..
  "MinifyAll.disableFileExplorerContextMenu": false,

  // If you want MinifyAll to stop shortening colors, such as rgb to 3 digit hex, or rgba to hex, or 6 digit hex to 3 digit hex. (True for disabling hex.)
  "MinifyAll.disableHexadecimalShortener": true,

  // If you want MinifyAll to stop minimizing HTML. (True for disabling)
  "MinifyAll.disableHtml": false,

  // If you want MinifyAll to stop minimizing JavaScript. (True for disabling)
  "MinifyAll.disableJavascript": false,

  // If you want MinifyAll to stop minimizing JavaScriptReact. (True for disabling)
  "MinifyAll.disableJavascriptReact": true,

  // If you want MinifyAll to stop minimizing JSON. (True for disabling)
  "MinifyAll.disableJson": false,

  // If you want MinifyAll to stop minimizing JSONC. (True for disabling)
  "MinifyAll.disableJsonc": false,

  // If you want MinifyAll to stop minimizing LESS. (True for disabling)
  "MinifyAll.disableLess": false,

  // If you want MinifyAll to stop showing error, warning or information messages. (True for disabling)
  "MinifyAll.disableMessages": false,

  // If you want MinifyAll to stop minimizing PHP. (True for disabling)
  "MinifyAll.disablePhp": false,

  // If you want MinifyAll to stop minimizing SASS. (True for disabling)
  "MinifyAll.disableSass": false,

  // If you want MinifyAll to stop minimizing SCSS. (True for disabling)
  "MinifyAll.disableScss": false,

  // If you want MinifyAll to stop minimizing TWIG. (True for disabling)
  "MinifyAll.disableTwig": false,

  // If you want MinifyAll to stop minimizing XML. (True for disabling)
  "MinifyAll.disableXml": false,

  // If you want MinifyAll to minify every time you save in the same file. (True for enabling)
  "MinifyAll.minifyOnSave": false,

  // If you want MinifyAll to minify every time you save in other file. (True for enabling)
  "MinifyAll.minifyOnSaveToNewFile": false,

  // [DEPRECATED use 'minifyOnSaveToNewFile' instead]If you want MinifyAll to minify every time you save in other file. (True for enabling)
  "MinifyAll.minifyOnSaveToNewFIle": false,

  // If you want MinifyAll to open the new minified document after you minify. (False for not opening it every time you create a minified file)
  "MinifyAll.openMinifiedDocument": true,

  // The prefix of the extension of the new file. Default (-min)
  //  - -min: Sets the future filename to example-min.extension
  //  - .min: Sets the future filename to example.min.extension
  //  - -minified: Sets the future filename to example-minified.extension
  //  - .minified: Sets the future filename to example.minified.extension
  "MinifyAll.PrefixOfNewMinifiedFiles": "-min",

  // Terser options, please visit: https://github.com/terser/terser#minify-options for more information.
  "MinifyAll.terserMinifyOptions": {
    "mangle": true,
    "compress": {
      "drop_console": true,
      "dead_code": false,
      "keep_fnames": false,
      "keep_classnames": false
    }
  },

  // Allow one extra manually added indentation before an argument.
  "cmake.format.allowOptionalArgumentIndentation": false,

  // Adds a space after a command name.
  "cmake.format.spaceAfterCommandName": false,

  // Adds spaces between parentheses.
  "cmake.format.spaceInParentheses": false,

  // A path to a .NET 6 Runtime executable.
  "cmake.languageSupport.dotnetPath": "",

  // Enables experimental use of cmake-file-api in order to provide more accurate results.
  "cmake.languageSupport.enableFileAPI": false,

  // Set to 'false' to disable automatically increasing indent on newlines after '=', 'do', 'where' etc.
  "haskell.indentationRules.enabled": true,

  // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.autoCenter`
  // Automatically center the commit details view when it is opened.
  "git-graph.autoCenterCommitDetailsView": true,

  // Depreciated: This setting has been renamed to `git-graph.referenceLabels.combineLocalAndRemoteBranchLabels`
  // Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
  "git-graph.combineLocalAndRemoteBranchLabels": true,

  // Automatically center the Commit Details View when it is opened.
  "git-graph.commitDetailsView.autoCenter": true,

  // Render the File Tree in the Commit Details View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
  "git-graph.commitDetailsView.fileView.fileTree.compactFolders": true,

  // Sets the default type of File View used in the Commit Details View. This can be overridden per repository using the controls on the right side of the Commit Details View.
  //  - File Tree: Display files in a tree structure.
  //  - File List: Display files in a list (useful for repositories with deep folder structures).
  "git-graph.commitDetailsView.fileView.type": "File Tree",

  // Specifies where the Commit Details View is rendered in the Git Graph View.
  //  - Inline: Show the Commit Details View inline with the graph & commits.
  //  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph View.
  "git-graph.commitDetailsView.location": "Inline",

  // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.fileTree.compactFolders`
  // Render the File Tree in the Commit Details / Comparison View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
  "git-graph.commitDetailsViewFileTreeCompactFolders": true,

  // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.location`
  // Specifies where the Commit Details View is rendered in the Git Graph view.
  //  - Inline: Show the Commit Details View inline with the graph
  //  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph view
  "git-graph.commitDetailsViewLocation": "Inline",

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.order`
  // Specifies the order of commits on the Git Graph view. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.
  //  - date: Show commits in the commit timestamp order.
  //  - author-date: Show commits in the author timestamp order.
  //  - topo: Avoid showing commits on multiple lines of history intermixed.
  "git-graph.commitOrdering": "date",

  // Customise which context menu actions are visible. For example, if you want to hide the rebase action from the branch context menu, a suitable value for this setting is `{ "branch": { "rebase": false } }`. For more information of how to configure this setting, view the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Extension-Settings#context-menu-actions-visibility).
  "git-graph.contextMenuActionsVisibility": {},

  // An array of Custom Branch Glob Patterns to be shown in the 'Branches' dropdown. Example: [{"name": "Feature Requests", "glob": "heads/feature/*"}]
  "git-graph.customBranchGlobPatterns": [],

  // An array of custom Emoji Shortcode mappings. Example: [{"shortcode": ":sparkles:", "emoji":"✨"}]
  "git-graph.customEmojiShortcodeMappings": [],

  // An array of custom Pull Request providers that can be used in the "Pull Request Creation" Integration. For information on how to configure this setting, see the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider).
  "git-graph.customPullRequestProviders": [],

  // Specifies the date format to be used in the "Date" column on the Git Graph View.
  //  - Date & Time: Show the date and time (e.g. "24 Mar 2019 21:34")
  //  - Date Only: Show the date only (e.g. "24 Mar 2019")
  //  - ISO Date & Time: Show the ISO date and time (e.g. "2019-03-24 21:34")
  //  - ISO Date Only: Show the ISO date only (e.g. "2019-03-24")
  //  - Relative: Show relative times (e.g. "5 minutes ago")
  "git-graph.date.format": "Date & Time",

  // Specifies the date type to be displayed in the "Date" column on the Git Graph View.
  //  - Author Date: Use the author date of a commit.
  //  - Commit Date: Use the committer date of a commit.
  "git-graph.date.type": "Author Date",

  // Depreciated: This setting has been renamed to `git-graph.date.format`
  // Specifies the date format to be used in the "Date" column on the Git Graph View.
  //  - Date & Time: Show the date and time, for example "24 Mar 2019 21:34"
  //  - Date Only: Show the date only, for example "24 Mar 2019"
  //  - ISO Date & Time: Show the ISO date and time, for example "2019-03-24 21:34"
  //  - ISO Date Only: Show the ISO date only, for example "2019-03-24"
  //  - Relative: Show relative times, for example "5 minutes ago"
  "git-graph.dateFormat": "Date & Time",

  // Depreciated: This setting has been renamed to `git-graph.date.type`
  // Specifies the date type to be displayed in the "Date" column on the Git Graph View.
  //  - Author Date: Use the author date of a commit
  //  - Commit Date: Use the committer date of a commit
  "git-graph.dateType": "Author Date",

  // An object specifying the default visibility of the Date, Author & Commit columns. Example: {"Date": true, "Author": true, "Commit": true}
  "git-graph.defaultColumnVisibility": {
    "Date": true,
    "Author": true,
    "Commit": true
  },

  // Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.type`
  // Sets the default type of File View used in the Commit Details / Comparison Views. This can be overridden per repository using the controls on the right side of the Commit Details / Comparison Views.
  //  - File Tree: Display files in a tree structure
  //  - File List: Display files in a list (useful for repositories with deep folder structures)
  "git-graph.defaultFileViewType": "File Tree",

  // Default state of the field indicating whether the tag should be pushed to a remote once it is added.
  "git-graph.dialog.addTag.pushToRemote": false,

  // Default type of the tag being added.
  "git-graph.dialog.addTag.type": "Annotated",

  // Default state of the "Reinstate Index" checkbox.
  "git-graph.dialog.applyStash.reinstateIndex": false,

  // Default state of the "No Commit" checkbox.
  "git-graph.dialog.cherryPick.noCommit": false,

  // Default state of the "Record Origin" checkbox.
  "git-graph.dialog.cherryPick.recordOrigin": false,

  // Default state of the "Check out" checkbox.
  "git-graph.dialog.createBranch.checkOut": false,

  // Default state of the "Force Delete" checkbox.
  "git-graph.dialog.deleteBranch.forceDelete": false,

  // Default state of the "Force Fetch" checkbox.
  "git-graph.dialog.fetchIntoLocalBranch.forceFetch": false,

  // Default state of the "Prune" checkbox.
  "git-graph.dialog.fetchRemote.prune": false,

  // Default state of the "Prune Tags" checkbox.
  "git-graph.dialog.fetchRemote.pruneTags": false,

  // Specifies a substitution that is automatically performed when space characters are entered or pasted into reference inputs on dialogs (e.g. Create Branch, Add Tag, etc.).
  //  - None: Don't replace spaces.
  //  - Hyphen: Replace space characters with hyphens, for example: "new branch" -> "new-branch".
  //  - Underscore: Replace space characters with underscores, for example: "new branch" -> "new_branch".
  "git-graph.dialog.general.referenceInputSpaceSubstitution": "None",

  // Default state of the "No Commit" checkbox.
  "git-graph.dialog.merge.noCommit": false,

  // Default state of the "Create a new commit even if fast-forward is possible" checkbox.
  "git-graph.dialog.merge.noFastForward": true,

  // Default state of the "Squash Commits" checkbox.
  "git-graph.dialog.merge.squashCommits": false,

  // Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
  //  - Default: Use the squash message generated by Git Graph.
  //  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
  "git-graph.dialog.merge.squashMessageFormat": "Default",

  // Default state of the "Reinstate Index" checkbox.
  "git-graph.dialog.popStash.reinstateIndex": false,

  // Default state of the "Create a new commit even if fast-forward is possible" checkbox.
  "git-graph.dialog.pullBranch.noFastForward": false,

  // Default state of the "Squash Commits" checkbox.
  "git-graph.dialog.pullBranch.squashCommits": false,

  // Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
  //  - Default: Use the squash message generated by Git Graph.
  //  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
  "git-graph.dialog.pullBranch.squashMessageFormat": "Default",

  // Default state of the "Ignore Date (non-interactive rebase only)" checkbox.
  "git-graph.dialog.rebase.ignoreDate": true,

  // Default state of the "Launch Interactive Rebase in new Terminal" checkbox.
  "git-graph.dialog.rebase.launchInteractiveRebase": false,

  // Default mode to be used for the reset action.
  //  - Soft: Soft - Keep all changes, but reset head
  //  - Mixed: Mixed - Keep working tree, but reset index
  //  - Hard: Hard - Discard all changes
  "git-graph.dialog.resetCurrentBranchToCommit.mode": "Mixed",

  // Default mode to be used for the reset action.
  //  - Mixed: Mixed - Keep working tree, but reset index
  //  - Hard: Hard - Discard all changes
  "git-graph.dialog.resetUncommittedChanges.mode": "Mixed",

  // Default state of the "Include Untracked" checkbox.
  "git-graph.dialog.stashUncommittedChanges.includeUntracked": true,

  // Visual file change A|M|D|R|U indicators in the Commit Details View for users with colour blindness. In the future, this setting will enable any additional accessibility related features of Git Graph that aren't enabled by default.
  "git-graph.enhancedAccessibility": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.fetchAndPrune`
  // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
  "git-graph.fetchAndPrune": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.fetchAvatars`
  // Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
  "git-graph.fetchAvatars": false,

  // The character set encoding used when retrieving a specific version of repository files (e.g. in the Diff View). A list of all supported encodings can be found [here](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).
  "git-graph.fileEncoding": "utf8",

  // Specifies the colours used on the graph.
  "git-graph.graph.colours": [
    "#0085d9",
    "#d9008f",
    "#00d90a",
    "#d98500",
    "#a300d9",
    "#ff0000",
    "#00d9cc",
    "#e138e8",
    "#85d900",
    "#dc5b23",
    "#6f24d6",
    "#ffcc00"
  ],

  // Specifies the style of the graph.
  //  - rounded: Use smooth curves when transitioning between branches on the graph.
  //  - angular: Use angular lines when transitioning between branches on the graph.
  "git-graph.graph.style": "rounded",

  // Specifies how the Uncommitted Changes are displayed on the graph.
  //  - Open Circle at the Uncommitted Changes: Display the Uncommitted Changes as a grey open circle, connected to the commit referenced by HEAD with a solid grey line. The current file system's state is therefore always displayed as an open circle.
  //  - Open Circle at the Checked Out Commit: Display the Uncommitted Changes as a grey closed circle, connected to the commit referenced by HEAD with a dotted grey line. The commit referenced by HEAD is therefore always displayed as an open circle.
  "git-graph.graph.uncommittedChanges": "Open Circle at the Uncommitted Changes",

  // Depreciated: This setting has been renamed to `git-graph.graph.colours`
  // Specifies the colours used on the graph.
  "git-graph.graphColours": [
    "#0085d9",
    "#d9008f",
    "#00d90a",
    "#d98500",
    "#a300d9",
    "#ff0000",
    "#00d9cc",
    "#e138e8",
    "#85d900",
    "#dc5b23",
    "#6f24d6",
    "#ffcc00"
  ],

  // Depreciated: This setting has been renamed to `git-graph.graph.style`
  // Specifies the style of the graph.
  //  - rounded: Use smooth curves when transitioning between branches on the graph
  //  - angular: Use angular lines when transitioning between branches on the graph
  "git-graph.graphStyle": "rounded",

  // Depreciated: This setting has been renamed to `git-graph.repository.includeCommitsMentionedByReflogs`
  // Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.includeCommitsMentionedByReflogs": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.initialLoad`
  // Specifies the number of commits to initially load.
  "git-graph.initialLoadCommits": 300,

  // Specifies the path and filename of the Shell executable to be used by the Visual Studio Code Integrated Terminal, when it is opened by Git Graph. For example, to use Git Bash on Windows this setting would commonly be set to "C:\Program Files\Git\bin\bash.exe". If this setting is left blank, the default Shell is used.
  "git-graph.integratedTerminalShell": "",

  // The keybinding for the keyboard shortcut that opens the Find Widget in the Git Graph View.
  "git-graph.keyboardShortcut.find": "CTRL/CMD + F",

  // The keybinding for the keyboard shortcut that refreshes the Git Graph View.
  "git-graph.keyboardShortcut.refresh": "CTRL/CMD + R",

  // The keybinding for the keyboard shortcut that scrolls the Git Graph View to be centered on the commit referenced by HEAD.
  "git-graph.keyboardShortcut.scrollToHead": "CTRL/CMD + H",

  // The keybinding for the keyboard shortcut that scrolls the Git Graph View to the first (or next) stash in the loaded commits. The Shift Key Modifier can be applied to this keybinding to scroll the Git Graph View to the last (or previous) stash in the loaded commits.
  "git-graph.keyboardShortcut.scrollToStash": "CTRL/CMD + S",

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMore`
  // Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
  "git-graph.loadMoreCommits": 100,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMoreAutomatically`
  // When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
  "git-graph.loadMoreCommitsAutomatically": true,

  // Parse and render a frequently used subset of inline Markdown formatting rules in commit messages and tag details (bold, italics, bold & italics, and inline code blocks).
  "git-graph.markdown": true,

  // Specifies the maximum depth of subfolders to search when discovering repositories in the workspace. Note: Sub-repos are not automatically detected when searching subfolders, however they can be manually added by running the command "Git Graph: Add Git Repository" in the Command Palette.
  "git-graph.maxDepthOfRepoSearch": 0,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead`
  // Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
  "git-graph.muteCommitsThatAreNotAncestorsOfHead": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.mergeCommits`
  // Display merge commits with a muted text color.
  "git-graph.muteMergeCommits": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.onlyFollowFirstParent`
  // Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting.
  "git-graph.onlyFollowFirstParent": false,

  // Depreciated: This setting has been renamed to `git-graph.openNewTabEditorGroup`
  // Specifies which Editor Group the Visual Studio Code Diff View is opened in.
  //  - Active: Open the Visual Studio Code Diff View in the Active Editor Group.
  //  - Beside: Open the Visual Studio Code Diff View beside the Active Editor Group.
  //  - One: Open the Visual Studio Code Diff View in the First Editor Group.
  //  - Two: Open the Visual Studio Code Diff View in the Second Editor Group.
  //  - Three: Open the Visual Studio Code Diff View in the Third Editor Group.
  //  - Four: Open the Visual Studio Code Diff View in the Fourth Editor Group.
  //  - Five: Open the Visual Studio Code Diff View in the Fifth Editor Group.
  //  - Six: Open the Visual Studio Code Diff View in the Sixth Editor Group.
  //  - Seven: Open the Visual Studio Code Diff View in the Seventh Editor Group.
  //  - Eight: Open the Visual Studio Code Diff View in the Eighth Editor Group.
  //  - Nine: Open the Visual Studio Code Diff View in the Ninth Editor Group.
  "git-graph.openDiffTabLocation": "Active",

  // Specifies the Editor Group where Git Graph should open new tabs, when performing the following actions from the Git Graph View: Viewing the Visual Studio Code Diff View, Opening a File, Viewing a File at a Specific Revision.
  //  - Active: Open the new tab in the Active Editor Group.
  //  - Beside: Open the new tab beside the Active Editor Group.
  //  - One: Open the new tab in the First Editor Group.
  //  - Two: Open the new tab in the Second Editor Group.
  //  - Three: Open the new tab in the Third Editor Group.
  //  - Four: Open the new tab in the Fourth Editor Group.
  //  - Five: Open the new tab in the Fifth Editor Group.
  //  - Six: Open the new tab in the Sixth Editor Group.
  //  - Seven: Open the new tab in the Seventh Editor Group.
  //  - Eight: Open the new tab in the Eighth Editor Group.
  //  - Nine: Open the new tab in the Ninth Editor Group.
  "git-graph.openNewTabEditorGroup": "Active",

  // Depreciated: This setting has been renamed to `git-graph.repository.onLoad.scrollToHead`
  // When opening or switching repositories in the Git Graph View, automatically scroll the view to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
  "git-graph.openRepoToHead": false,

  // Open the Git Graph View to the repository containing the active Text Editor document.
  "git-graph.openToTheRepoOfTheActiveTextEditorDocument": false,

  // Depreciated: This setting has been renamed to `git-graph.referenceLabels.alignment`
  // Specifies how branch and tag reference labels are aligned for each commit.
  //  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
  //  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
  //  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
  "git-graph.referenceLabelAlignment": "Normal",

  // Specifies how branch and tag reference labels are aligned for each commit.
  //  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
  //  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
  //  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
  "git-graph.referenceLabels.alignment": "Normal",

  // Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
  "git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": true,

  // Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
  "git-graph.repository.commits.fetchAvatars": false,

  // Specifies the number of commits to initially load.
  "git-graph.repository.commits.initialLoad": 300,

  // Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
  "git-graph.repository.commits.loadMore": 100,

  // When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
  "git-graph.repository.commits.loadMoreAutomatically": true,

  // Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
  "git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead": false,

  // Display merge commits with a muted text color.
  "git-graph.repository.commits.mute.mergeCommits": true,

  // Specifies the order of commits on the Git Graph View. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option. This can be overridden per repository via the Git Graph View's Column Header Context Menu.
  //  - date: Show commits in the commit timestamp order.
  //  - author-date: Show commits in the author timestamp order.
  //  - topo: Avoid showing commits on multiple lines of history intermixed.
  "git-graph.repository.commits.order": "date",

  // Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
  "git-graph.repository.commits.showSignatureStatus": false,

  // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
  "git-graph.repository.fetchAndPrune": false,

  // Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any local tags that no longer exist on the remote(s). Requires Git >= 2.17.0, and the "Repository: Fetch And Prune" setting to be enabled. Caution: If you work in repositories that have multiple remotes, it is not recommended to use this setting (instead you can prune tags for a specific remote via "Fetch Remote" Dialog from the Repository Settings Widget on the Git Graph View).
  "git-graph.repository.fetchAndPruneTags": false,

  // Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.repository.includeCommitsMentionedByReflogs": false,

  // Automatically scroll the Git Graph View to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
  "git-graph.repository.onLoad.scrollToHead": false,

  // Show the checked out branch when a repository is loaded in the Git Graph View. This setting can be used in conjunction with "Repository > On Load: Show Specific Branches". Default: false (show all branches)
  "git-graph.repository.onLoad.showCheckedOutBranch": false,

  // Show specific branches when a repository is loaded in the Git Graph View. Branches can be specified as follows: A local branch name (e.g. `master`), a remote-tracking branch name prefixed with "remotes/" (e.g. `remotes/origin/master`), or a glob pattern defined in `git-graph.customBranchGlobPatterns` prefixed with "--glob=" (e.g. `--glob=heads/feature/*`). This setting can be used in conjunction with "Repository > On Load: Show Checked Out Branch". Default: [] (show all branches)
  "git-graph.repository.onLoad.showSpecificBranches": [],

  // Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.repository.onlyFollowFirstParent": false,

  // Show Commits that are only referenced by tags in Git Graph.
  "git-graph.repository.showCommitsOnlyReferencedByTags": true,

  // Show Remote Branches in Git Graph by default. This can be overridden per repository from the Git Graph View's Control Bar.
  "git-graph.repository.showRemoteBranches": true,

  // Show Remote HEAD Symbolic References in Git Graph (e.g. "origin/HEAD").
  "git-graph.repository.showRemoteHeads": true,

  // Show Stashes in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.repository.showStashes": true,

  // Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.repository.showTags": true,

  // Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
  "git-graph.repository.showUncommittedChanges": true,

  // Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
  "git-graph.repository.showUntrackedFiles": true,

  // Enables commit signing with GPG or X.509.
  "git-graph.repository.sign.commits": false,

  // Enables tag signing with GPG or X.509.
  "git-graph.repository.sign.tags": false,

  // Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
  "git-graph.repository.useMailmap": false,

  // Specifies the order that repositories are sorted in the repository dropdown on the Git Graph View (only visible when more than one repository exists in the current Visual Studio Code Workspace).
  //  - Full Path: Sort repositories alphabetically by the full path of the repository.
  //  - Name: Sort repositories alphabetically by the name of the repository.
  //  - Workspace Full Path: Sort repositories according to the Visual Studio Code Workspace Folder order, then alphabetically by the full path of the repository.
  "git-graph.repositoryDropdownOrder": "Workspace Full Path",

  // Specifies if the Git Graph View's Visual Studio Code context is kept when the panel is no longer visible (e.g. moved to background tab). Enabling this setting will make Git Graph load significantly faster when switching back to the Git Graph tab, however has a higher memory overhead.
  "git-graph.retainContextWhenHidden": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.showCommitsOnlyReferencedByTags`
  // Show commits that are only referenced by tags in Git Graph.
  "git-graph.showCommitsOnlyReferencedByTags": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.onLoad.showCheckedOutBranch`
  // Show the current branch by default when Git Graph is opened. Default: false (show all branches)
  "git-graph.showCurrentBranchByDefault": false,

  // Depreciated: This setting has been renamed to `git-graph.repository.commits.showSignatureStatus`
  // Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
  "git-graph.showSignatureStatus": false,

  // Show a Status Bar Item that opens the Git Graph View when clicked.
  "git-graph.showStatusBarItem": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.showTags`
  // Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
  "git-graph.showTags": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.showUncommittedChanges`
  // Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
  "git-graph.showUncommittedChanges": true,

  // Depreciated: This setting has been renamed to `git-graph.repository.showUntrackedFiles`
  // Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
  "git-graph.showUntrackedFiles": true,

  // Specifies where the "View Git Graph" action appears on the title of SCM Providers.
  //  - Inline: Show the 'View Git Graph' action on the title of SCM Providers
  //  - More Actions: Show the 'View Git Graph' action in the 'More Actions...' menu on the title of SCM Providers
  "git-graph.sourceCodeProviderIntegrationLocation": "Inline",

  // Specifies the colour theme of the icon displayed on the Git Graph tab.
  //  - colour: Show a colour icon which suits most Visual Studio Code colour themes
  //  - grey: Show a grey icon which suits Visual Studio Code colour themes that are predominantly grayscale
  "git-graph.tabIconColourTheme": "colour",

  // Depreciated: This setting has been renamed to `git-graph.repository.useMailmap`
  // Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
  "git-graph.useMailmap": false,

  // Automatically handle spawning of elixir-sense servers for each folder in the workspace
  "elixir.autoSpawnElixirSenseServers": true,

  // Project environment
  "elixir.elixirEnv": "dev",

  // The path to the mix project in the folder structure of your project
  "elixir.projectPath": "",

  // Use elixir-sense instead of alchemist-server
  "elixir.useElixirSense": true,

  // Configuration options for Easy LESS extension.
  "less.compile": {},

  // Enable Telemetry for the .NET install tool.
  "dotnetAcquisitionExtension.enableTelemetry": true,

  // File Path to an existing installation of .NET.
  "dotnetAcquisitionExtension.existingDotnetPath": [],

  // Timeout for installing .NET in seconds.
  "dotnetAcquisitionExtension.installTimeoutValue": 120,

  // Arguments passed in. Each argument is a separate string in the array.
  "isort.args": [],

  // Controls whether to run `isort` and report import sort issues.
  "isort.check": false,

  // Defines where `isort` is imported from. This setting may be ignored if `isort.path` is set.
  //  - useBundled: Always use the bundled version of `isort`.
  //  - fromEnvironment: Use `isort` from environment, fallback to bundled version only if `isort` not available in the environment.
  "isort.importStrategy": "useBundled",

  // When set to a path to python executable, extension will use that to launch the server and any subprocess.
  "isort.interpreter": [],

  // The trace level the extension logs at, defaults to 'error'.
  //  - debug: Includes verbose logging intended for debugging purposes.
  //  - error: Only errors and always logged information.
  //  - info: Includes all messages that are not marked as verbose or debug.
  //  - off: Most logging is turned off, any information that is always logged might still be shown.
  //  - warn: Includes all messages in the error category and any additional warnings.
  "isort.logLevel": "error",

  // When set to a path to `isort` binary, extension will use that for linting. NOTE: Using this option may slowdown linting.
  "isort.path": [],

  // Mapping from severity of `isort` message type to severity shown in problem window.
  "isort.severity": {
    "W": "Warning",
    "E": "Hint"
  },

  // Controls when notifications are shown by this extension.
  //  - off: All notifications are turned off, any errors or warning are still available in the logs.
  //  - onError: Notifications are shown only in the case of an error.
  //  - onWarning: Notifications are shown for errors and warnings.
  //  - always: Notifications are show for anything that the server chooses to show.
  "isort.showNotifications": "off",

  // Path to the State Tool executable for ActiveState runtimes (version 0.36+).
  "python.activeStateToolPath": "state",

  // 需要由自动完成引擎导入的库路径列表等。例如，使用 Google App SDK 时，路径不在系统路径中，因此需要添加到此列表中。
  "python.autoComplete.extraPaths": [],

  // 要用于激活的 conda 可执行文件的路径(版本 4.4+)。
  "python.condaPath": "",

  // 第一次加载扩展时要使用的默认 Python 路径，在为工作区选择解释器后不再使用。请参阅 [点击这里](https://aka.ms/AAfekmf) 了解何时使用此内容
  "python.defaultInterpreterPath": "python",

  // 为错误日志中有意义的堆栈跟踪启用源映射支持。
  "python.diagnostics.sourceMapsEnabled": false,

  // 包含环境变量定义的文件的绝对路径。
  "python.envFile": "${workspaceFolder}/.env",

  // 在 Python 扩展中启用 A/B 测试试验。如果启用，则可能会包括在建议的增强功能和/或功能中。
  "python.experiments.enabled": true,

  // 要选择加入的试验列表。如果为空，则为用户分配默认试验组。有关更多详细信息，请参阅 [点击这里](https://github.com/microsoft/vscode-python/wiki/AB-Experiments) 了解详细信息。
  "python.experiments.optInto": [],

  // 要选择退出的试验列表。如果为空，则为用户分配默认试验组。有关更多详细信息，请参阅 [点击这里](https://github.com/microsoft/vscode-python/wiki/AB-Experiments)。
  "python.experiments.optOutFrom": [],

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.formatting.autopep8Args": [],

  // autopep8 的路径，可以通过修改此设置以包含完整路径来使用 autopep8 的自定义版本。
  "python.formatting.autopep8Path": "autopep8",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.formatting.blackArgs": [],

  // 路径为 Black，可以通过修改此设置以包含完整路径来使用自定义版本的 Black。
  "python.formatting.blackPath": "black",

  // 格式设置提供程序。可能的选项包括 "utopep8"、"black" 和 "yapf"。
  "python.formatting.provider": "autopep8",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.formatting.yapfArgs": [],

  // yapf 的路径，可以通过修改此设置以包含完整路径来使用自定义版本的 yapf。
  "python.formatting.yapfPath": "yapf",

  // 不使用环境时是否全局安装 Python 模块。
  "python.globalModuleInstallation": false,

  // 控制何时在状态栏中显示所选解释器的信息。
  //  - never: 从不显示信息。
  //  - onPythonRelated: 仅在打开与 Python 相关的文件时显示信息。
  //  - always: 始终显示信息。
  "python.interpreter.infoVisibility": "onPythonRelated",

  // 定义语言服务器的类型。
  //  - Default: 自动选择语言服务器: 如果已安装且可用，则为 Pylance，否则回退到 Jedi。
  //  - Jedi: 将语言服务器协议 (LSP) 背后的 Jedi 用作语言服务器。
  //  - Pylance: 将 Pylance 用作语言服务器。
  //  - None: 禁用语言服务器功能。
  "python.languageServer": "Default",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.linting.banditArgs": [],

  // 是否使用强盗对 Python 文件进行 lint 处理。
  "python.linting.banditEnabled": false,

  // 强盗路径，可以通过修改此设置以包含完整路径来使用自定义版本的强盗。
  "python.linting.banditPath": "bandit",

  // linters 的可选工作目录。
  "python.linting.cwd": null,

  // 是否对 Python 文件进行 lint 处理。
  "python.linting.enabled": true,

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.linting.flake8Args": [],

  // Flake8 消息类型 "E" 的严重性。
  "python.linting.flake8CategorySeverity.E": "Error",

  // Flake8 消息类型 "F" 的严重性。
  "python.linting.flake8CategorySeverity.F": "Error",

  // Flake8 消息类型 "W" 的严重性。
  "python.linting.flake8CategorySeverity.W": "Warning",

  // 是否使用 flake8 对 Python 文件进行 lint 处理。
  "python.linting.flake8Enabled": false,

  // flake8 的路径，可以通过修改此设置以包含完整路径来使用自定义版本的 flake8。
  "python.linting.flake8Path": "flake8",

  // 用于排除文件或文件夹的模式。
  "python.linting.ignorePatterns": [
    "**/site-packages/**/*.py",
    ".vscode/*.py"
  ],

  // 是否在保存时对 Python 文件进行 lint 处理。
  "python.linting.lintOnSave": true,

  // 控制服务器产生的最大问题数。
  "python.linting.maxNumberOfProblems": 100,

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.linting.mypyArgs": [
    "--follow-imports=silent",
    "--ignore-missing-imports",
    "--show-column-numbers",
    "--no-pretty"
  ],

  // Mypy 消息类型 "Error" 的严重性。
  "python.linting.mypyCategorySeverity.error": "Error",

  // %python.linting.mypyCategorySeverity.note.description%.
  "python.linting.mypyCategorySeverity.note": "Information",

  // 是否使用 mypy 对 Python 文件进行 lint 处理。
  "python.linting.mypyEnabled": false,

  // mypy 的路径，可以通过修改此设置以包含完整路径来使用自定义版本的 mypy。
  "python.linting.mypyPath": "mypy",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.linting.prospectorArgs": [],

  // 是否使用探查器对 Python 文件进行 lint 处理。
  "python.linting.prospectorEnabled": false,

  // “探查器”路径，可以通过修改此设置以包含完整路径来使用自定义版本的探查器。
  "python.linting.prospectorPath": "prospector",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.linting.pycodestyleArgs": [],

  // pycodestyle 消息类型 "E" 的严重性。
  "python.linting.pycodestyleCategorySeverity.E": "Error",

  // pycodestyle 消息类型 "W" 的严重性。
  "python.linting.pycodestyleCategorySeverity.W": "Warning",

  // 是否使用 pycodestyle 对 Python 文件进行 lint 处理。
  "python.linting.pycodestyleEnabled": false,

  // pycodestyle 路径，可以通过修改此设置以包含完整路径来使用自定义版本的 pycodestyle。
  "python.linting.pycodestylePath": "pycodestyle",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.linting.pydocstyleArgs": [],

  // 是否使用 pydocstyle 对 Python 文件进行 lint 处理。
  "python.linting.pydocstyleEnabled": false,

  // pydocstyle 的路径，可以通过修改此设置以包含完整路径来使用自定义版本的 pydocstyle。
  "python.linting.pydocstylePath": "pydocstyle",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.linting.pylamaArgs": [],

  // 是否使用 pylama 对 Python 文件进行 lint 处理。
  "python.linting.pylamaEnabled": false,

  // pylama 的路径，可以通过修改此设置以包含完整路径来使用自定义版本的 pylama。
  "python.linting.pylamaPath": "pylama",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.linting.pylintArgs": [],

  // Pylint 消息类型 "Convention/C" 的严重性。
  "python.linting.pylintCategorySeverity.convention": "Information",

  // Pylint 消息类型 "Error/E" 的严重性。
  "python.linting.pylintCategorySeverity.error": "Error",

  // Pylint 消息类型 "Error/F" 的严重性。
  "python.linting.pylintCategorySeverity.fatal": "Error",

  // Pylint 消息类型 "Refactor/R" 的严重性。
  "python.linting.pylintCategorySeverity.refactor": "Hint",

  // Pylint 消息类型 "Warning/W" 的严重性。
  "python.linting.pylintCategorySeverity.warning": "Warning",

  // 是否使用 pylint 对 Python 文件进行 lint 处理。
  "python.linting.pylintEnabled": false,

  // Pylint 路径，可以通过修改此设置以包含完整路径来使用自定义版本的 pylint。
  "python.linting.pylintPath": "pylint",

  // 扩展日志的日志记录级别，默认为 "error"
  "python.logging.level": "error",

  // 要用于激活的 pipenv 可执行文件的路径。
  "python.pipenvPath": "pipenv",

  // 要执行的可执行文件的路径。
  "python.poetryPath": "poetry",

  // 此设置即将移除。请改用 'isort.args'。
  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.sortImports.args": [],

  // 此设置即将移除。请改用 'isort.path'`。
  // isort 脚本的路径，默认使用内部版本
  "python.sortImports.path": "",

  // 将此设置设置为首选 TensorBoard 日志目录，以便在启动 TensorBoard 时跳过日志目录提示。
  "python.tensorBoard.logDirectory": "",

  // 加载扩展时，在当前终端中激活 Python 环境。
  "python.terminal.activateEnvInCurrentTerminal": false,

  // 在终端中激活使用扩展创建的 Python 环境。
  "python.terminal.activateEnvironment": true,

  // 在终端中执行文件时，是否在文件的目录中使用 execute，而不是当前打开的文件夹。
  "python.terminal.executeInFileDir": false,

  // 启动 python 终端时，是否将光标聚焦在终端上。
  "python.terminal.focusAfterLaunch": false,

  // Python 启动在终端中执行文件时要使用的参数。
  "python.terminal.launchArgs": [],

  // 保存测试文件时启用自动运行测试发现。
  "python.testing.autoTestDiscoverOnSaveEnabled": true,

  // 用于测试的可选工作目录。
  "python.testing.cwd": null,

  // 用于调试测试的端口号。
  "python.testing.debugPort": 3000,

  // 如果发现潜在的测试目录，则提示配置测试框架。
  "python.testing.promptToConfigure": true,

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.testing.pytestArgs": [],

  // 使用 pytest 启用测试。
  "python.testing.pytestEnabled": false,

  // pytest (pytest) 的路径，可以通过修改此设置以包含完整路径来使用自定义版本的 pytest。
  "python.testing.pytestPath": "pytest",

  // 传入的参数。每个参数都是数组中的一个单独项。
  "python.testing.unittestArgs": [
    "-v",
    "-s",
    ".",
    "-p",
    "*test*.py"
  ],

  // 使用 unittest 启用测试。
  "python.testing.unittestEnabled": false,

  // 要查找虚拟环境的主目录中的文件夹(默认支持 pyenv、direnv 和 virtualenvwrapper)。
  "python.venvFolders": [],

  // 包含虚拟环境列表的文件夹的路径(例如 ~/.pyenv、~/Envs、~/.virtualenvs)。
  "python.venvPath": "",

  // Offer only exact matches in `add import` code actions
  "python.analysis.addImport.exactMatchOnly": false,

  // Offer auto-import completions.
  "python.analysis.autoImportCompletions": false,

  // Offer user symbols in auto-import completions.
  "python.analysis.autoImportUserSymbols": false,

  // Automatically add common search paths like 'src'.
  "python.analysis.autoSearchPaths": true,

  // Add parentheses to function completions.
  "python.analysis.completeFunctionParens": false,

  // Analysis mode for diagnostics.
  //  - openFilesOnly: Analyzes and reports errors on only open files.
  //  - workspace: Analyzes and reports errors on all files in the workspace.
  "python.analysis.diagnosticMode": "openFilesOnly",

  // Allows a user to override the severity levels for individual diagnostics.
  "python.analysis.diagnosticSeverityOverrides": {},

  // Paths of directories or files that should not be included. These override the include directories, allowing specific subdirectories to be excluded. Note that files in the exclude paths may still be included in the analysis if they are referenced (imported) by source files that are not excluded. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no exclude paths are specified, Pylance automatically excludes the following: `**/node_modules`, `**/__pycache__`, `.git` and any virtual environment directories.
  "python.analysis.exclude": [],

  // Allow using '.', '(' as commit characters when applicable.
  "python.analysis.extraCommitChars": true,

  // Additional import search resolution paths
  "python.analysis.extraPaths": [],

  // source fixes to run in fix all.
  "python.analysis.fixAll": [],

  // Paths of directories or files whose diagnostic output (errors and warnings) should be suppressed even if they are an included file or within the transitive closure of an included file. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character). If no value is provided, the value of python.linting.ignorePatterns (if set) will be used.
  "python.analysis.ignore": [],

  // Defines the default format for import module.
  //  - absolute: Use absolute import format when creating new import statement.
  //  - relative: Use relative import format when creating new import statement.
  "python.analysis.importFormat": "absolute",

  // Paths of directories or files that should be included. If no paths are specified, Pylance defaults to the workspace root directory. Paths may contain wildcard characters ** (a directory or multiple levels of directories), * (a sequence of zero or more characters), or ? (a single character).
  "python.analysis.include": [],

  // Index installed third party libraries and user files for language features such as auto-import, add import, workspace symbols and etc.
  "python.analysis.indexing": true,

  // Enable/disable inlay hints for function return types:
  // ```python
  // def foo(x:int) ' -> int ':
  // 	return x
  // ```
  //
  "python.analysis.inlayHints.functionReturnTypes": false,

  // Enable/disable inlay hints for pytest function parameters:
  // ```python
  // def test_foo(my_fixture: 'str'):
  // 	assert(myfixture == 'foo')
  // ```
  //
  "python.analysis.inlayHints.pytestParameters": false,

  // Enable/disable inlay hints for variable types:
  // ```python
  // foo ' :list[str] ' = ["a"]
  //
  // ```
  //
  "python.analysis.inlayHints.variableTypes": false,

  // Specifies the level of logging for the Output panel
  "python.analysis.logLevel": "Information",

  // Used to override how many levels under installed packages to index on a per package basis. By default, only top-level modules are indexed (depth = 1). To index submodules, increase depth by 1 for each level of submodule you want to index. Accepted values are:
  // ```JSON
  // {"name": "package name (str)",
  //  "depth": "depth to scan (int)",
  //  "includeAllSymbols": "whether to include all symbols (bool)"}
  //
  // ```
  // If `include all symbols` is set to `false`, only symbols in each package's `__all__` are included. When it's set to `true`, Pylance will index every module/top level symbol declarations in the file.
  //
  // Usage example:
  // ```JSON
  // [
  // 	{"name": "sklearn", "depth": 2, "includeAllSymbols": true},
  // 	{"name": "matplotlib", "depth": 3, "includeAllSymbols": false}
  // ]
  //
  // ```
  //
  "python.analysis.packageIndexDepths": [
    {
      "name": "sklearn",
      "depth": 2
    },
    {
      "name": "matplotlib",
      "depth": 2
    },
    {
      "name": "scipy",
      "depth": 2
    },
    {
      "name": "django",
      "depth": 2
    }
  ],

  // Allow moving a symbol to another module. [Experimental]
  "python.analysis.refactoring.allowMovingSymbols": false,

  // Path to directory containing custom type stub files.
  "python.analysis.stubPath": "typings",

  // Defines the default rule set for type checking.
  //  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
  //  - basic: All "off" rules + basic type checking rules.
  //  - strict: All "off" rules + all type checking rules.
  "python.analysis.typeCheckingMode": "off",

  // Paths to look for typeshed modules.
  "python.analysis.typeshedPaths": [],

  // Use library implementations to extract type information when type stub is not present.
  "python.analysis.useLibraryCodeForTypes": true,

  // 运行单元格后，在单元格上添加 "Goto" 代码信息指示器。请注意，禁用所有代码信息指示器也会禁用此代码信息指示器。
  "jupyter.addGotoCodeLenses": true,

  // 此设置已弃用，将在下一版本中删除。
  // 允许用户在打开 python 文件时将 jupyter 笔记本导入到文件中。
  "jupyter.allowImportFromNotebook": true,

  // 允许将交互窗口连接到没有有效证书的 https Jupyter 服务器。这可能是一种安全风险，因此仅用于已知和受信任的服务器。
  "jupyter.allowUnauthorizedRemoteConnection": false,

  // 此设置已过时。请改用 "interactiveWindow.alwaysScrollOnNewCell" 设置。
  // 自动滚动交互窗口以显示执行的最后一个语句的输出。如果为 false，则仅当之前单元格的底部可见时，交互窗口才会自动滚动。
  "jupyter.alwaysScrollOnNewCell": false,

  // 在重启内核之前警告用户。
  "jupyter.askForKernelRestart": true,

  // 在尝试打开非常大的数据帧之前警告用户。
  "jupyter.askForLargeDataFrames": true,

  // 要作为代码信息指示器放置在单元格上方的命令集。
  "jupyter.codeLenses": "jupyter.runcell, jupyter.runallcellsabove, jupyter.debugcell",

  // 用于标识代码单元格的正则表达式。在下一个匹配之前的所有代码都被视为此单元格的一部分。
  "jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

  // 此设置已弃用，请改用 "#interactiveWindow.collapseCellInputCode#" 。
  // 默认情况下折叠单元格输入代码。
  "jupyter.collapseCellInputCodeByDefault": true,

  // 此设置已弃用，将在即将发布的版本中删除。
  // 是否使用主题的速览颜色作为输入框的背景。
  "jupyter.colorizeInputBox": true,

  // 调试时要作为代码信息指示器放置在单元格上方的调试命令集。
  "jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

  // 调试时，仅单步执行用户编写的代码。禁用此选项可允许单步执行库代码。
  "jupyter.debugJustMyCode": true,

  // 用于调试单元格的调试位的路径。
  "jupyter.debugpyDistPath": "",

  // 在当前活动单元格后面绘制突出显示。
  "jupyter.decorateCells": true,

  // 用于在 python 文件中描述单元格的单元格标记。
  "jupyter.defaultCellMarker": "# %%",

  // 如果为 true，则禁用 Jupyter 自动启动。必须改为运行一个单元来启动 Jupyter。
  "jupyter.disableJupyterAutoStart": false,

  // 允许在单击“运行单元格”代码信息指示器时移动到下一个单元格。
  "jupyter.enableAutoMoveToNextCell": true,

  // 在 python 文件中为 "cells" 启用代码信息指示器。
  "jupyter.enableCellCodeLens": true,

  // 在运行 Jupyter 内核时启用 Jedi 对扩展 IntelliSense 完成的支持(请参阅此[设置](https://ipython.readthedocs.io/en/stable/config/options/terminal.html?highlight=use_jedi#configtrait-Completer.use_jedi))。这可能会极大地影响笔记本单元格执行性能。请谨慎使用。
  "jupyter.enableExtendedKernelCompletions": false,

  // 此设置已弃用，将在下一版本中删除。
  // 在笔记本编辑器中为大单元格输出启用滚动。此设置不适用于交互窗口。
  "jupyter.enableScrollingForCellOutputs": true,

  // 在开始之前，将 PYTHONNOUSERSITE 添加到内核。这可防止在内核的 PYTHONPATH 中使用全局/用户站点包。
  "jupyter.excludeUserSitePackages": false,

  // 启用/禁用 A/B 测试。
  "jupyter.experiments.enabled": true,

  // 要选择加入的试验列表。如果为空，则为用户分配默认试验组。[了解更多](https://github.com/microsoft/vscode-jupyter/wiki/Experiments)。
  "jupyter.experiments.optInto": [],

  // 要选择退出的试验列表。如果为空，则为用户分配默认试验组。[了解更多](https://github.com/microsoft/vscode-jupyter/wiki/Experiments)。
  "jupyter.experiments.optOutFrom": [],

  // 启用将 python 文件导出到 jupyter 笔记本，并在执行此操作时运行所有单元格。
  "jupyter.exportWithOutputEnabled": false,

  // 此设置已弃用，将在下一版本中删除。
  // 为笔记本绘图生成 SVG 输出。这样就可以牺牲生成速度和文件大小，在绘图查看器中获得更好的显示效果。
  "jupyter.generateSVGPlots": false,

  // 此设置已弃用，将在下一版本中删除。
  // 请勿在交互窗口中使用 VS Code 主题(需要重新加载 VS Code)。这会强制交互窗口使用“浅色+(默认光)”，并禁用 matplotlib 默认值。
  "jupyter.ignoreVscodeTheme": false,

  // 交互窗口的行为。'perFile' 将为运行单元格的每个文件创建新的交互窗口。'single' 允许单个窗口。'multiple' 允许创建多个。
  "jupyter.interactiveWindowMode": "multiple",

  // 在何处打开未与 python 文件关联的交互窗口。"beside" 将打开活动编辑器右侧的交互窗口。'active' 将打开交互窗口来代替活动编辑器。'secondGroup' 将在第二个编辑器组中打开交互窗口。
  "jupyter.interactiveWindowViewColumn": "secondGroup",

  // 在要求重启 Jupyter 内核之前等待中断的时间(以毫秒为单位)。
  "jupyter.jupyterInterruptTimeout": 10000,

  // 尝试连接到 Jupyter Notebook 的次数
  "jupyter.jupyterLaunchRetries": 3,

  // 等待 Jupyter Notebook 服务器启动的时间(毫秒)。
  "jupyter.jupyterLaunchTimeout": 60000,

  // 要从内核选取器中排除的 Jupyter 内核和/或 Python 环境的列表。
  "jupyter.kernels.filter": [],

  // 输入要受信任的内核规范文件的完全限定路径。例如 'C:\Program Data\Jupyter\kernels\python3\kernel.json'。
  // **注意**: 内核可以使用用户特权执行代码。单击[此处](https://aka.ms/JupyterTrustedKernelPaths)了解更多详细信息。
  "jupyter.kernels.trusted": [],

  // 扩展日志所在的日志记录级别。
  "jupyter.logging.level": "debug",

  // 为内核/jupyter 服务器控制台输出创建单独的输出面板
  "jupyter.logKernelOutputSeparately": false,

  // 解析代码单元格时，取消注释 shell 赋值(#!)、行 magic (#!%)、单元格 magic (#!%%)。
  "jupyter.magicCommandsAsComments": false,

  // 用于标识 Markdown 单元格的正则表达式。此表达式之后的所有注释都被视为 markdown 的一部分。
  "jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

  // 运行当前最后一个单元格时，将新的空单元格追加到交互窗口文件。
  "jupyter.newCellOnRunLast": true,

  // 设置用于运行笔记本和交互窗口的根目录。
  "jupyter.notebookFileRoot": "${fileDirname}",

  // 为 Python 文件中的代码单元格启用折叠区域。此设置需要重新加载 VS Code。
  "jupyter.pythonCellFolding": true,

  // 在 python jupyter 内核上触发自动完成的字符。
  "jupyter.pythonCompletionTriggerCharacters": ".%'\"",

  // 将笔记本导出到 Python 文件时要使用的方法。'direct' 将按当前方式直接复制代码。'commentMagics' 将注释禁止以行 magic (%)、单元格 magic (%%)和 shell 命令(!)开头的行。'nbconvert' 将安装 nbconvert，并将其用于可将 iPython 语法转为 Python 语法的转换。
  "jupyter.pythonExportMethod": "direct",

  // 此设置已弃用，将在下一版本中删除。
  // 调试单元格时，请在远程框上打开此端口。如果指定 -1，则将尝试一个介于 8889 和 9000 之间的随机端口。
  "jupyter.remoteDebuggerPort": -1,

  // 一系列 Python 指令或 iPython magic 命令。可以是字符串数组，也可以是命令由 "\n" 分隔的单个字符串。每当交互窗口加载时，命令都将以无提示方式执行。例如，将此设置为 "%load_ext autoreload\n%autoreload 2" 以自动重新加载对导入文件所做的更改，而无需重新启动交互式会话。
  "jupyter.runStartupCommands": "",

  // 此设置已弃用，将在未来的版本中删除。
  // 启动交互窗口时，搜索所有已安装的 Python 解释器以进行 Jupyter 安装
  "jupyter.searchForJupyter": true,

  // 按 shift+Enter 时，将 Python 文件中的所选代码发送到 Jupyter 交互窗口，而不是 Python 终端。
  "jupyter.sendSelectionToInteractiveWindow": false,

  // 此设置已弃用，将在下一版本中删除。
  // 显示单元格输入代码。
  "jupyter.showCellInputCode": true,

  // 在 Jupyter 笔记本工具栏中显示“大纲”按钮。
  "jupyter.showOutlineButtonInNotebookToolbar": true,

  // 启动“按行运行”会话时显示变量视图。
  "jupyter.showVariableViewWhenDebugging": false,

  // 调试单元格时，在第一行停止。
  "jupyter.stopOnFirstLineWhileDebugging": true,

  // 此设置已弃用，取而代之的是 "notebook.output.textLineLimit" 。此设置将在即将发布的版本中删除。
  // 将交互式单元格文本输出中的文本量限制为此值。0 表示允许任意数量的字符。
  "jupyter.textOutputLimit": 20000,

  // 在交互窗口和笔记本编辑器主题 matplotlib 输出中，以匹配 VS Code 编辑器主题。
  "jupyter.themeMatplotlibPlots": false,

  // 在本地运行 Jupyter 时，为交互窗口创建默认的空 Jupyter 配置
  "jupyter.useDefaultConfigForJupyter": true,

  // 要在交互变量资源管理器中显示的要排除的类型
  "jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type",

  // 此设置已弃用，将在下一版本中删除。
  // 用于查询在 Jupyter 内核中返回活动变量列表的映射的语言。由交互窗口和笔记本中的变量资源管理器使用。示例:
  // ```
  // [
  //   {
  //     "language": "python",
  //     "query": "%who_ls",
  //     "parseExpr": "'(\\w+)'"
  //   }
  // ]
  // ```
  "jupyter.variableQueries": [],

  // 定义从其中下载小组件脚本文件的源的位置和顺序(例如 ipywidgest、bqplot、beakerx、ipyleaflet 等)。如果未选择其中任何一个，可能会导致小组件无法正确呈现或正常工作。有关详细信息，请参阅 [此处](https://aka.ms/PVSCIPyWidgets)。更新后，需要重新启动内核。
  //  - jsdelivr.com: 从 https://www.jsdelivr.com/ 加载小组件(javascript)脚本
  //  - unpkg.com: 从 https://unpkg.com/ 加载小组件(javascript)脚本
  "jupyter.widgetScriptSources": [],

  // Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
  "dev.containers.cacheVolume": true,

  // Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
  "dev.containers.copyGitConfig": true,

  // Configures the list of extensions to always install while creating a container.
  "dev.containers.defaultExtensions": [],

  // Configures the list of features to always install while creating a container.
  "dev.containers.defaultFeatures": {},

  // Docker Compose executable name or path.
  "dev.containers.dockerComposePath": "docker-compose",

  // Controls whether a credential helper should be registered as the `credStore` in the Docker configuration (`~/.docker/config.json`) of dev containers. This will not overwrite an existing `credStore` entry in the configuration file.
  "dev.containers.dockerCredentialHelper": true,

  // Docker (or Podman) executable name or path.
  "dev.containers.dockerPath": "docker",

  // Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.
  "dev.containers.executeInWSL": false,

  // WSL distro to use when not reopening a WSL folder. The default is to use the default WSL distro (see `wsl -l`). This setting has no effect when `dev.containers.executeInWSL` is not enabled or on other platforms than Windows.
  "dev.containers.executeInWSLDistro": "",

  // Where to write the configuration for the Git credential helper.
  //  - system: Write to system config (`/etc/gitconfig`, requires root access).
  //  - global: Write to user config (`~/.gitconfig`).
  //  - none: Do not set a credential helper.
  "dev.containers.gitCredentialHelperConfigLocation": "global",

  // The log level for the extension.
  "dev.containers.logLevel": "debug",

  // List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).
  "dev.containers.repositoryConfigurationPaths": [],

  // The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
  //  - consistent: Perfect consistency.
  //  - cached: The host’s view is authoritative.
  //  - delegated: The container’s view is authoritative.
  "dev.containers.workspaceMountConsistency": "cached",

  // The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.
  "dotfiles.installCommand": "",

  // URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.
  "dotfiles.repository": "",

  // The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.
  "dotfiles.targetPath": "~/dotfiles",

  // Use `dev.containers.cacheVolume` instead.
  //
  "remote.containers.cacheVolume": null,

  // Use `dev.containers.copyGitConfig` instead.
  //
  "remote.containers.copyGitConfig": null,

  // Use `dev.containers.defaultExtensions` instead.
  //
  "remote.containers.defaultExtensions": null,

  // Use `dev.containers.dockerComposePath` instead.
  //
  "remote.containers.dockerComposePath": null,

  // Use `dev.containers.dockerPath` instead.
  //
  "remote.containers.dockerPath": null,

  // Use `dotfiles.installCommand` instead.
  //
  "remote.containers.dotfiles.installCommand": null,

  // Use `dotfiles.repository` instead.
  //
  "remote.containers.dotfiles.repository": null,

  // Use `dotfiles.targetPath` instead.
  // Deprecated setting. Use 'dotfiles.targetPath' instead.
  "remote.containers.dotfiles.targetPath": null,

  // Use `dev.containers.executeInWSL` instead.
  //
  "remote.containers.executeInWSL": null,

  // Use `dev.containers.executeInWSLDistro` instead.
  //
  "remote.containers.executeInWSLDistro": null,

  // Use `dev.containers.gitCredentialHelperConfigLocation` instead.
  //
  "remote.containers.gitCredentialHelperConfigLocation": null,

  // Use `dev.containers.logLevel` instead.
  //
  "remote.containers.logLevel": null,

  // Use `dev.containers.repositoryConfigurationPaths` instead.
  // Deprecated setting. Use 'dev.containers.repositoryConfigurationPaths' instead.
  "remote.containers.repositoryConfigurationPaths": null,

  // Use `dev.containers.workspaceMountConsistency` instead.
  //
  "remote.containers.workspaceMountConsistency": null,

  // Deprecated, please use `remote.SSH.localServerDownload`
  // If downloading the VS Code server fails on the host, this allows the extension to fall back to downloading on the client and transferring it to the host with scp.
  "remote.SSH.allowLocalServerDownload": true,

  // The absolute file path to a custom SSH config file.
  "remote.SSH.configFile": "",

  // Specifies the timeout in seconds used for the SSH command that connects to the remote.
  "remote.SSH.connectTimeout": 15,

  // List of extensions that should be installed automatically on all SSH hosts.
  "remote.SSH.defaultExtensions": [],

  // A list of ports to forward when the connection is established.
  "remote.SSH.defaultForwardedPorts": [],

  // Enable fixing the remote environment so that the SSH config option `ForwardAgent` will take effect as expected from VS Code's remote extension host.
  "remote.SSH.enableAgentForwarding": true,

  // Whether to use SSH dynamic forwarding to allow setting up new port tunnels over an existing SSH connection. When this is used, a password only needs to be entered once for each remote window.
  "remote.SSH.enableDynamicForwarding": true,

  // **Experimental:** Enable using RemoteCommands from ssh config entries. This is only enabled if `remote.SSH.useLocalServer#` is enabled as well and the remote you are trying to connect to is not listed under the `#remote.SSH.remotePlatform` setting.
  "remote.SSH.enableRemoteCommand": false,

  // Enable fixing the remote environment so that the SSH config option `ForwardX11` will take effect as expected from VS Code's remote extension host.
  "remote.SSH.enableX11Forwarding": true,

  // **Experimental:** In local server mode (enabled with `remote.SSH.useLocalServer`) Remote - SSH uses SSH_ASKPASS to set VS Code as the application to handle authentication requests; this makes prompts for input show up inside VS Code. However, if you have an external application to handle authentication, such as an YubiKey, you may want to set SSH_ASKPASS to your application instead. If you enable this setting then Remote - SSH won't override your existing SSH_ASKPASS value if one exists.
  "remote.SSH.externalSSH_ASKPASS": false,

  // Whether the extension can download the VS Code Server on the client and transfer it to the host with scp, instead of downloading it on the host.
  //  - auto: The server will first be downloaded on the host, and if that fails, will fall back to downloading locally
  //  - always: The server will only be downloaded locally and transferred to the host
  //  - off: The server will only be downloaded on the host
  "remote.SSH.localServerDownload": "auto",

  // Whether to keep lockfiles in `/tmp` instead of in the server's install folder. Useful for connecting to hosts which have issues with locking, such as hosts with a home directory using NFS or another distributed filesystem.
  "remote.SSH.lockfilesInTmp": false,

  // The log level for the extension.
  "remote.SSH.logLevel": "debug",

  // The maximum number of times to attempt reconnection. Use 0 to disallow reconnection, and `null` to use the maximum of 8.
  "remote.SSH.maxReconnectionAttempts": null,

  // An absolute path to the SSH executable. When empty, it will use "ssh" on the path or in common install locations.
  "remote.SSH.path": "",

  // A map of the remote hostname to the platform for that remote. Valid values: `linux`, `macOS`, `windows`. Note - this setting will soon be required when `remote.SSH.useLocalServer` is disabled, so it is currently being autopopulated for successful connections, but is not currently used.
  "remote.SSH.remotePlatform": {},

  // When true, the remote VS Code server will listen on a socket path instead of opening a port. Only valid for Linux and macOS remotes. After toggling this setting, run the command "Kill VS Code Server on Host..." for it to take effect. Requires OpenSSH 6.7+. Disables the "local server" connection multiplexing mode. Requires `AllowStreamLocalForwarding` to be enabled for the SSH server.
  "remote.SSH.remoteServerListenOnSocket": false,

  // A map of remote host to absolute path where the VS Code server will be installed. By default the server is installed in the home directory of every remote. **Note**: By changing this setting you may need to clean up other installations of `.vscode-server` on your remote that isn't in the path you've configured.
  "remote.SSH.serverInstallPath": {},

  // A map of the remote hostname to a range of ports you'd prefer the server to connect to on launch on the remote machine. If no free port is found in range, an error will be thrown. Valid ranges of the form `number-number` such as `4000-5000`; it's expected the first number will be lower than the next.
  "remote.SSH.serverPickPortsFromRange": {},

  // Always reveal the SSH login terminal.
  "remote.SSH.showLoginTerminal": false,

  // Due to a bug with password handling in some versions of the SSH client bundled with Windows, the extension prefers a non-Windows SSH client, such as the one bundled with Git, and will show a warning when another one can't be found. This setting disables that warning.
  "remote.SSH.suppressWindowsSshWarning": false,

  // Whether to use `flock` for creating lockfiles on Linux remotes instead of `ln`. By default, we use `flock` on Linux remotes and `ln` on macOS.
  "remote.SSH.useFlock": true,

  // Enables a mode for connecting using a single connection shared between windows and across window reloads. This makes it faster to open new windows and reduces the number of times a password needs to be entered.
  "remote.SSH.useLocalServer": true,

  // Deprecated: Please use `remote.SSH.remotePlatorm` instead
  // **Deprecated**: Enables experimental support for connecting to Windows remotes. Add the names of windows remotes to this list.
  "remote.SSH.windowsRemotes": [],

  // If set, the output in the WSL log shows debug information.
  "remote.WSL.debug": false,

  // If set, polling is used for file watching inside WSL1. Polling can be CPU intensive but fixes the WSL1 issue that folders can not be renamed when watched. This option requires restart to take effect.
  "remote.WSL.fileWatcher.polling": false,

  // The file watcher polling interval in ms used inside WSL1 distros if `remote.WSL.fileWatcher.polling` is set.
  // This option requires restart to take effect.
  "remote.WSL.fileWatcher.pollingInterval": 5000,

  // Use `remote.WSL2.connectionMethod` instead.
  // If set, the connection to a VS Code server running in WSL2 will use localhost (::1). If not set, the connection will directly use the WSL2 VM's IP addresss if accessible or localhost if not.
  "remote.WSL.server.connectThroughLocalhost": false,

  // If set, the WSL windows gets the environment from the shell it was opened from.
  "remote.WSL.useShellEnvironment": true,

  // Specifies how the WSL extension will connect to the VS Code server running in WSL1 distros. This option requires restart to take effect.
  //  - localhost: Connects to the server in WSL though 127.0.0.1 which is beeing shared between Windows and WSL1.
  //  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
  "remote.WSL1.connectionMethod": "localhost",

  // Specifies how the WSL extension will connect to the VS Code server running in WSL2 distros. This option requires restart to take effect.
  //  - localhost: Connects to the server in WSL though localhost (::1) which is forwarded to the WSL2 VM by Windows.
  //  - wsl2VMAddress: Connects to the server in WSL though the IP address of the WSL2 VM.
  //  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
  "remote.WSL2.connectionMethod": "wslExeProxy",

  // 自定义工具包文件的路径数组
  "cmake.additionalKits": [],

  // 允许使用 JSON 扩展，如 CMakePresets.json 中的注释。请注意，如果使用非标准 JSON，则其他 IDE 或命令行可能认为 CMakePresets.json 文件无效。
  "cmake.allowCommentsInPresetsFile": false,

  // 支持使用预设文件，这些文件使用的是 CMake Tools 扩展当前不支持的版本中的功能。将忽略未知属性和宏。
  "cmake.allowUnsupportedPresetsVersions": false,

  // 自动选择活动文件夹。
  "cmake.autoSelectActiveFolder": true,

  // 要在生成时传递给 CMake 的其他参数。
  "cmake.buildArgs": [],

  // 请先生成目标然后再运行目标。
  "cmake.buildBeforeRun": true,

  // CMake 生成文件将转到其中的目录。
  "cmake.buildDirectory": "${workspaceFolder}/build",

  // 要在生成过程中传递给 CMake 的环境变量。
  "cmake.buildEnvironment": {},

  // 使用 tasks.json 生成，而非使用内部进程。
  "cmake.buildTask": false,

  // 要在生成时传递给基础生成工具的其他参数。
  "cmake.buildToolArgs": [],

  //
  "cmake.cacheInit": null,

  // 在每次生成前清除生成输出。
  "cmake.clearOutputBeforeBuild": true,

  // 用于在扩展和 CMake 之间进行通信的协议
  "cmake.cmakeCommunicationMode": "automatic",

  // 要使用的 CMake 可执行文件的名称/路径。
  "cmake.cmakePath": "cmake",

  // 要在配置时传递给 CMake 的其他参数。
  "cmake.configureArgs": [],

  // 要在配置过程中传递给 CMake 的环境变量。
  "cmake.configureEnvironment": {},

  // 保存 cmake.sourceDirectory 或 CMakeLists.txt 内容时，自动配置 CMake 项目目录。
  "cmake.configureOnEdit": true,

  // 在 CMake 项目目录打开时自动对其进行配置。
  "cmake.configureOnOpen": null,

  // 要在命令行上设置的 CMake 变量。
  "cmake.configureSettings": {},

  // 成功配置后将 compile_commands.json 复制到此位置。
  "cmake.copyCompileCommands": null,

  // 并行测试作业的数量。使用零即可利用 cmake.parallelJobs 的值。
  "cmake.ctest.parallelJobs": 0,

  // 要传递给 CTest 的参数。
  "cmake.ctestArgs": [],

  // 默认情况下传递给 CTest 的参数。
  "cmake.ctestDefaultArgs": [
    "-T",
    "test",
    "--output-on-failure"
  ],

  // CTest 可执行文件的路径。如果为 null，则从 cmake.cmakePath 推理(建议保留为 null)。
  "cmake.ctestPath": null,

  // 要在调试目标时使用的调试配置。
  "cmake.debugConfig": {},

  //
  "cmake.defaultVariants": {
    "buildType": {
      "default": "debug",
      "description": "生成类型。",
      "choices": {
        "debug": {
          "short": "Debug",
          "long": "禁用优化 - 包括调试信息。",
          "buildType": "Debug"
        },
        "release": {
          "short": "Release",
          "long": "进行优化，提高速度 - 排除调试信息。",
          "buildType": "Release"
        },
        "minsize": {
          "short": "MinSizeRel",
          "long": "优化最小二进制大小 - 排除调试信息。",
          "buildType": "MinSizeRel"
        },
        "reldeb": {
          "short": "RelWithDebInfo",
          "long": "进行优化，提高速度 - 包括调试信息。",
          "buildType": "RelWithDebInfo"
        }
      }
    }
  },

  // 可在其中安装 Emscripten 的目录。
  "cmake.emscriptenSearchDirs": [],

  // 要使用的输出分析程序。支持的分析程序 `cmake`、`gcc`、`gnuld`(适用于 GNULD 样式的 inker 输出)、`msvc`(适用于 Microsoft Visual C++)、`ghs`(适用于 Green Hills 编译器，具有 --no_wrap_diagnostics --brief_diagnostics)，以及 `diab`(适用于 Wind River Diab 编译器)。
  "cmake.enabledOutputParsers": [
    "cmake",
    "gcc",
    "gnuld",
    "msvc",
    "ghs",
    "diab"
  ],

  // 对文件和控制台启用跟踪日志记录(噪音很大)。
  "cmake.enableTraceLogging": false,

  // 要在运行 CMake 命令时设置的环境变量。
  "cmake.environment": {},

  // 启用导出 compile_commands.json。
  "cmake.exportCompileCommandsFile": true,

  // 要使用的 CMake 生成器。
  "cmake.generator": null,

  // 如果为 `true`，则当在工作区中找到 CMakeLists.txt 文件，但未在根文件夹中找到时，扩展将不会要求用户选择 CMakeLists.txt 文件以进行配置。
  "cmake.ignoreCMakeListsMissing": false,

  // 运行 CMake 命令时，请勿使用工具包环境变量。
  "cmake.ignoreKitEnv": false,

  // CMake 安装文件将转到其中的目录。
  "cmake.installPrefix": null,

  // 控制启动目标时启动终端将执行的操作。
  //  - reuseTerminal: 已重用启动终端实例，并且目标将在终端空闲时立即启动。
  //  - breakAndReuseTerminal: 已重用启动终端实例，并且将在启动目标之前发送“中断”命令以终止任何活动的前台进程。
  //  - newTerminal: 已创建新的终端实例，并且已在其中启动目标。系统不会自动清理现有终端。
  "cmake.launchBehavior": "reuseTerminal",

  // 控制扩展是否读取 compile_commands.json 以启用单个文件编译。
  "cmake.loadCompileCommands": true,

  //
  "cmake.loggingLevel": "info",

  // 以递归方式收集和合并在 cmake.buildDirectory 中找到的所有compile_commands.json。
  "cmake.mergedCompileCommands": null,

  // 可在其中安装 MinGW 的目录。
  "cmake.mingwSearchDirs": [],

  // 来自外部命令的输出的编码(例如 cmake -- build)。
  "cmake.outputLogEncoding": "auto",

  // 并行生成作业的数目。使用零来自动检测 CPU 数。将此值设为 1 则将禁用生成并行度。
  "cmake.parallelJobs": 0,

  // 分析编译器输出以查找警告和错误。
  "cmake.parseBuildDiagnostics": true,

  // 要在配置时使用的 CMake 平台。
  "cmake.platform": null,

  // 要在配置时使用的首选 CMake 生成器(按列表中的顺序尝试)。
  "cmake.preferredGenerators": [],

  // 配置用于显示日志并聚焦于输出通道的设置。
  //  - focus: 将显示日志，并且输出通道会占用光标焦点。
  //  - always: 将显示日志，但输出通道不会占用光标焦点。
  //  - never: 日志既不显示也不占据焦点。
  "cmake.revealLog": "always",

  // 在生成前保存打开的文件。
  "cmake.saveBeforeBuild": true,

  // 在多配置生成器上也设置 CMAKE_BUILD_TYPE
  "cmake.setBuildTypeOnMultiConfig": false,

  // 在工具包选择中包括系统工具包
  "cmake.showSystemKits": true,

  // 如果存在缓存，则跳过配置进程。
  "cmake.skipConfigureIfCachePresent": null,

  // 指向 CMakeLists.txt 根目录/目录的路径或路径数组。
  "cmake.sourceDirectory": "${workspaceFolder}",

  // 配置各个状态栏按钮的设置。这些设置将覆盖更常规的 "cmake.statusbar.visibility" 设置。
  "cmake.statusbar.advanced": {},

  // 配置扩展在状态栏中显示按钮的方式。
  "cmake.statusbar.visibility": "default",

  // 要传递给 CTest 的环境变量。
  "cmake.testEnvironment": {},

  // 要在配置时使用的 CMake 工具集。
  "cmake.toolset": null,

  //
  "cmake.touchbar.advanced": {},

  // 配置扩展在 MacBook 触控栏上显示按钮的方式
  //  - default: 在支持的系统上显示触控栏按钮。
  //  - hidden: 不显示触控栏按钮。
  "cmake.touchbar.visibility": "default",

  // 使用 CMakepresets.json 配置驱动器 CMake 配置、生成和测试。使用 CMakepresets.json 时，将忽略工具包、变量和 settings.json 中的某些设置。
  "cmake.useCMakePresets": "auto",

  // The number of bytes per row to show in the editor.
  "hexeditor.columnWidth": 16,

  // Whether to auto reveal the data inspector when the hex editor is opened.
  "hexeditor.dataInspector.autoReveal": true,

  // The endianness selected when loading the editor.
  "hexeditor.defaultEndianness": "little",

  // Where the data inspector should be shown in the hex editor.
  "hexeditor.inspectorType": "aside",

  // The max file size (in MB) that the editor will try to open before warning you.
  "hexeditor.maxFileSize": 10,

  // Whether decoded text should be shown in the editor.
  "hexeditor.showDecodedText": true,

  // Show Hex Editor button in editor menu.
  "hexeditor.showOpenFileButton": false,

  // 指定在远程资源管理器的远程目标下显示文件夹的顺序。
  //  - most recently used: 按最近在顶部打开的顺序显示文件夹
  //  - alphabetical: 按字母顺序显示文件夹
  "remote-explorer.foldersSortOrder": "most recently used",

  // 如果有可用的更新，请始终更新 VS Code CLI。
  "remote.tunnels.alwaysUpdateCLI": false,

  // Include completion for module export and auto import them
  "vetur.completion.autoImport": true,

  // Where Vetur source Scaffold Snippets from and how to indicate them. Set a source to "" to disable it.
  //
  // - workspace: `<WORKSPACE>/.vscode/vetur/snippets`.
  // - user: `<USER-DATA-DIR>/User/snippets/vetur`.
  // - vetur: Bundled in Vetur.
  //
  // The default is:
  // ```
  // "vetur.completion.scaffoldSnippetSources": {
  //   "workspace": "💼",
  //   "user": "🗒️",
  //   "vetur": "✌"
  // }
  // ```
  //
  // Alternatively, you can do:
  //
  // ```
  // "vetur.completion.scaffoldSnippetSources": {
  //   "workspace": "(W)",
  //   "user": "(U)",
  //   "vetur": "(V)"
  // }
  // ```
  //
  // Read more: https://vuejs.github.io/vetur/snippet.html.
  "vetur.completion.scaffoldSnippetSources": {
    "workspace": "💼",
    "user": "🗒️",
    "vetur": "✌"
  },

  // Casing conversion for tag completion
  //  - initial: use the key in `components: {...}` as is for tag completion and do not force any casing
  //  - kebab: kebab-case completion for <my-tag>
  "vetur.completion.tagCasing": "kebab",

  // Log level for VLS
  //  - INFO: Only log info messages. This is the default.
  //  - DEBUG: Log info and debug messages.
  "vetur.dev.logLevel": "INFO",

  // Path to vls for Vetur developers. There are two ways of using it.
  //
  // 1. Clone vuejs/vetur from GitHub, build it and point it to the ABSOLUTE path of `/server`.
  // 2. `yarn global add vls` and point Vetur to the installed location (`yarn global dir` + node_modules/vls)
  "vetur.dev.vlsPath": "",

  // The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging / profiling.
  "vetur.dev.vlsPort": -1,

  // Enable template interpolation service that offers hover / definition / references in Vue interpolations.
  "vetur.experimental.templateInterpolationService": false,

  // Default formatter for <style> region
  //  - none: disable formatting
  //  - prettier: css formatter using css parser from prettier
  "vetur.format.defaultFormatter.css": "prettier",

  // Default formatter for <template> region
  //  - none: disable formatting
  //  - prettyhtml: 🚧 [DEPRECATED] prettyhtml
  //  - js-beautify-html: html formatter of js-beautify
  //  - prettier: prettier
  "vetur.format.defaultFormatter.html": "prettier",

  // Default formatter for <script> region
  //  - none: disable formatting
  //  - prettier: js formatter from prettier
  //  - prettier-eslint: prettier-eslint
  //  - vscode-typescript: js formatter from TypeScript
  "vetur.format.defaultFormatter.js": "prettier",

  // Default formatter for <style lang='less'> region
  //  - none: disable formatting
  //  - prettier: less formatter using postcss parser from prettier
  "vetur.format.defaultFormatter.less": "prettier",

  // Default formatter for <style lang='postcss'> region
  //  - none: disable formatting
  //  - prettier: postcss formatter using css parser from prettier
  "vetur.format.defaultFormatter.postcss": "prettier",

  // Default formatter for <template lang='pug'> region
  //  - none: disable formatting
  //  - prettier: prettier
  "vetur.format.defaultFormatter.pug": "prettier",

  // Default formatter for <style lang='sass'> region
  //  - none: disable formatting
  //  - sass-formatter: sass formatter
  "vetur.format.defaultFormatter.sass": "sass-formatter",

  // Default formatter for <style lang='scss'> region
  //  - none: disable formatting
  //  - prettier: scss formatter using scss parser from prettier
  "vetur.format.defaultFormatter.scss": "prettier",

  // Default formatter for <style lang='stylus'> region
  //  - none: disable formatting
  //  - stylus-supremacy: stylus formatter from stylus-supremacy
  "vetur.format.defaultFormatter.stylus": "stylus-supremacy",

  // Default formatter for <script> region
  //  - none: disable formatting
  //  - prettier: ts formatter using typescript parser from prettier
  //  - prettier-tslint: ts formatter from TypeScript
  "vetur.format.defaultFormatter.ts": "prettier",

  // Options for all default formatters
  "vetur.format.defaultFormatterOptions": {
    "js-beautify-html": {
      "wrap_attributes": "force-expand-multiline"
    },
    "prettyhtml": {
      "printWidth": 100,
      "singleQuote": false,
      "wrapAttributes": false,
      "sortAttributes": false
    }
  },

  // Enable/disable the Vetur document formatter.
  "vetur.format.enable": true,

  // Number of spaces per indentation level. Inherited by all formatters.
  "vetur.format.options.tabSize": 2,

  // Use tabs for indentation. Inherited by all formatters.
  "vetur.format.options.useTabs": false,

  // Whether to have initial indent for <script> region
  "vetur.format.scriptInitialIndent": false,

  // Whether to have initial indent for <style> region
  "vetur.format.styleInitialIndent": false,

  // Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.
  "vetur.grammar.customBlocks": {
    "docs": "md",
    "i18n": "json"
  },

  // Vetur will warn about not setup correctly for the project. You can disable it.
  "vetur.ignoreProjectWarning": false,

  // Whether to enable codeActions
  "vetur.languageFeatures.codeActions": true,

  // Whether to enable semantic highlighting. Currently only works for typescript
  "vetur.languageFeatures.semanticTokens": true,

  // Whether to automatic updating import path when rename or move a file
  "vetur.languageFeatures.updateImportOnFileMove": true,

  // Traces the communication between VS Code and Vue Language Server.
  "vetur.trace.server": "off",

  // Enable underline `.value` when using composition API.
  "vetur.underline.refValue": true,

  // Use dependencies from workspace. Support for TypeScript, Prettier, @starptech/prettyhtml, prettier-eslint, prettier-tslint, stylus-supremacy, @prettier/plugin-pug.
  "vetur.useWorkspaceDependencies": false,

  // Validate interpolations in <template> region using TypeScript language service
  "vetur.validation.interpolation": true,

  // Validate js/ts in <script>
  "vetur.validation.script": true,

  // Validate css/scss/less/postcss in <style>
  "vetur.validation.style": true,

  // Validate vue-html in <template> using eslint-plugin-vue
  "vetur.validation.template": true,

  // Validate props usage in <template> region. Show error/warning for not passing declared props to child components and show error for passing wrongly typed interpolation expressions
  "vetur.validation.templateProps": false,

  // Write the generated table using Markdown format instead of the default style.
  "csv-to-table.markdownFormat": false,

  // Open the generated table in a new editor window, instead of replacing the current editor's content.
  "csv-to-table.openGeneratedTableInNewEditor": true,

  // Align cell values that are numbers to the right side for easy comparison between other row values.
  "csv-to-table.rightAlignNumbers": true,

  // Convert the first row's values (header) in the table to upper-case.
  "csv-to-table.upperCaseHeader": false,

  // 选择一个图标包。
  //  - angular: Angular的图标。
  //  - angular_ngrx: Angular和ngrx的图标。
  //  - react: React的图标。
  //  - react_redux: React和Redux的图标。
  //  - vue: Vue的图标。
  //  - vue_vuex: Vue和Vuex的图标。
  //  - nest: NestJS的图标。
  //  - none: 没有启用图标包。
  "material-icon-theme.activeIconPack": "angular",

  // 设置自定义文件图标关联。
  "material-icon-theme.files.associations": {},

  // 设置自定义文件夹图标关联。
  "material-icon-theme.folders.associations": {},

  // 更改文件夹图标的颜色。
  "material-icon-theme.folders.color": "#90a4ae",

  // 设置文件夹图标的类型。
  //  - specific: 选择特定文件夹图标。
  //  - classic: 选择经典文件夹图标。
  //  - none: 没有文件夹图标。
  "material-icon-theme.folders.theme": "specific",

  // 隐藏该文件夹旁边的箭头。
  "material-icon-theme.hidesExplorerArrows": false,

  // 定义自定义语言映射的图标。
  "material-icon-theme.languages.associations": {},

  // 更改图标的透明度。
  "material-icon-theme.opacity": 1,

  // Change the saturation of the icons.
  "material-icon-theme.saturation": 1,

  // Enable/disable the 'auto build'
  "java.autobuild.enabled": true,

  // The list of clean ups to be run on the current document when it's saved. Clean ups can automatically fix code style or programming mistakes. Click [HERE](command:_java.learnMoreAboutCleanUps) to learn more about what each clean up does.
  "java.cleanup.actionsOnSave": [],

  // Reordering of fields, enum constants, and initializers can result in semantic and runtime changes due to different initialization and persistence order. This setting prevents this from occurring.
  "java.codeAction.sortMembers.avoidVolatileChanges": true,

  // Generate method comments when generating the methods.
  "java.codeGeneration.generateComments": false,

  // Use 'instanceof' to compare types when generating the hashCode and equals methods.
  "java.codeGeneration.hashCodeEquals.useInstanceof": false,

  // Use Objects.hash and Objects.equals when generating the hashCode and equals methods. This setting only applies to Java 7 and higher.
  "java.codeGeneration.hashCodeEquals.useJava7Objects": false,

  // Specifies the insertion location of the code generated by source actions.
  //  - afterCursor: Insert the generated code after the member where the cursor is located.
  //  - beforeCursor: Insert the generated code before the member where the cursor is located.
  //  - lastMember: Insert the generated code as the last member of the target type.
  "java.codeGeneration.insertionLocation": "afterCursor",

  // The code style for generating the toString method.
  //  - STRING_CONCATENATION: String concatenation
  //  - STRING_BUILDER: StringBuilder/StringBuffer
  //  - STRING_BUILDER_CHAINED: StringBuilder/StringBuffer - chained call
  //  - STRING_FORMAT: String.format/MessageFormat
  "java.codeGeneration.toString.codeStyle": "STRING_CONCATENATION",

  // Limit number of items in arrays/collections/maps to list, if 0 then list all.
  "java.codeGeneration.toString.limitElements": 0,

  // List contents of arrays instead of using native toString().
  "java.codeGeneration.toString.listArrayContents": true,

  // Skip null values when generating the toString method.
  "java.codeGeneration.toString.skipNullValues": false,

  // The template for generating the toString method.
  "java.codeGeneration.toString.template": "${object.className} [${member.name()}=${member.value}, ${otherMembers}]",

  // Use blocks in 'if' statements when generating the methods.
  "java.codeGeneration.useBlocks": false,

  // Specify how to enable the annotation-based null analysis.
  "java.compile.nullAnalysis.mode": "interactive",

  // Specify the Nonnull annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
  "java.compile.nullAnalysis.nonnull": [
    "javax.annotation.Nonnull",
    "org.eclipse.jdt.annotation.NonNull",
    "org.springframework.lang.NonNull"
  ],

  // Specify the Nullable annotation types to be used for null analysis. If more than one annotation is specified, then the topmost annotation will be used first if it exists in project dependencies. This setting will be ignored if `java.compile.nullAnalysis.mode` is set to `disabled`
  "java.compile.nullAnalysis.nullable": [
    "javax.annotation.Nullable",
    "org.eclipse.jdt.annotation.Nullable",
    "org.springframework.lang.Nullable"
  ],

  // Enable/disable code completion support
  "java.completion.enabled": true,

  // Defines a list of static members or types with static members. Content assist will propose those static members even if the import is missing.
  "java.completion.favoriteStaticMembers": [
    "org.junit.Assert.*",
    "org.junit.Assume.*",
    "org.junit.jupiter.api.Assertions.*",
    "org.junit.jupiter.api.Assumptions.*",
    "org.junit.jupiter.api.DynamicContainer.*",
    "org.junit.jupiter.api.DynamicTest.*",
    "org.mockito.Mockito.*",
    "org.mockito.ArgumentMatchers.*",
    "org.mockito.Answers.*"
  ],

  // Defines the type filters. All types whose fully qualified name matches the selected filter strings will be ignored in content assist or quick fix proposals and when organizing imports. For example 'java.awt.*' will hide all types from the awt packages.
  "java.completion.filteredTypes": [
    "java.awt.*",
    "com.sun.*",
    "sun.*",
    "jdk.*",
    "org.graalvm.*",
    "io.micrometer.shaded.*"
  ],

  // When set to true, method arguments are guessed when a method is selected from as list of code assist proposals.
  "java.completion.guessMethodArguments": true,

  // Defines the sorting order of import statements. A package or type name prefix (e.g. 'org.eclipse') is a valid entry. An import is always added to the most specific group. As a result, the empty string (e.g. '') can be used to group all other imports. Static imports are prefixed with a '#'
  "java.completion.importOrder": [
    "#",
    "java",
    "javax",
    "org",
    "com",
    ""
  ],

  // Specify whether to match case for code completion.
  //  - auto: Only match case for the first letter when using Visual Studio Code - Insiders.
  //  - firstLetter: Match case for the first letter when doing completion.
  //  - off: Do not match case when doing completion.
  "java.completion.matchCase": "auto",

  // Maximum number of completion results (not including snippets).
  // `0` (the default value) disables the limit, all results are returned. In case of performance problems, consider setting a sensible limit.
  "java.completion.maxResults": 0,

  // Enable/disable postfix completion support. `editor.snippetSuggestions` can be used to customize how postfix snippets are sorted.
  "java.completion.postfix.enabled": true,

  // Please use 'java.import.generatesMetadataFilesAtProjectRoot' to control whether to generate the project metadata files at the project root. And use 'files.exclude' to control whether to hide the project metadata files from the file explorer.
  // Controls whether to exclude extension-generated project settings files (.project, .classpath, .factorypath, .settings/) from the file explorer.
  "java.configuration.checkProjectSettingsExclusions": false,

  // Path to Maven's global settings.xml
  "java.configuration.maven.globalSettings": null,

  // Specifies severity if the plugin execution is not covered by Maven build lifecycle.
  "java.configuration.maven.notCoveredPluginExecutionSeverity": "warning",

  // Path to Maven's user settings.xml
  "java.configuration.maven.userSettings": null,

  // Map Java Execution Environments to local JDKs.
  "java.configuration.runtimes": [],

  // Specifies how modifications on build files update the Java classpath/configuration
  "java.configuration.updateBuildConfiguration": "interactive",

  // The number of days (if enabled) to keep unused workspace cache data. Beyond this limit, cached workspace data may be removed.
  "java.configuration.workspaceCacheLimit": 90,

  // Preferred content provider (a 3rd party decompiler id, usually)
  "java.contentProvider.preferred": null,

  // Enable/disable download of Maven source artifacts for Eclipse projects.
  "java.eclipse.downloadSources": false,

  // Specifies the severity of the message when the classpath is incomplete for a Java file
  "java.errors.incompleteClasspath.severity": "warning",

  // Enable/disable smart folding range support. If disabled, it will use the default indentation-based folding range provided by VS Code.
  "java.foldingRange.enabled": true,

  // Includes the comments during code formatting.
  "java.format.comments.enabled": true,

  // Enable/disable default Java formatter
  "java.format.enabled": true,

  // Enable/disable automatic block formatting when typing `;`, `<enter>` or `}`
  "java.format.onType.enabled": true,

  // Optional formatter profile name from the Eclipse formatter settings.
  "java.format.settings.profile": null,

  // Specifies the url or file path to the [Eclipse formatter xml settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings).
  "java.format.settings.url": null,

  // This setting is deprecated, please use 'java.jdt.ls.java.home' instead.
  // Specifies the folder path to the JDK (17 or more recent) used to launch the Java Language Server.
  // On Windows, backslashes must be escaped, i.e.
  // "java.home":"C:\\Program Files\\Java\\jdk-17.0_3"
  "java.home": null,

  // Enable/disable the implementations code lens.
  "java.implementationsCodeLens.enabled": false,

  // Configure glob patterns for excluding folders. Use `!` to negate patterns to allow subfolders imports. You have to include a parent directory. The order is important.
  "java.import.exclusions": [
    "**/node_modules/**",
    "**/.metadata/**",
    "**/archetype-resources/**",
    "**/META-INF/maven/**"
  ],

  // Specify whether the project metadata files(.project, .classpath, .factorypath, .settings/) will be generated at the project root. Click [HERE](command:_java.metadataFilesGeneration) to learn how to change the setting to make it take effect.
  "java.import.generatesMetadataFilesAtProjectRoot": false,

  // Enable/disable the annotation processing on Gradle projects and delegate Annotation Processing to JDT APT. Only works for Gradle 5.2 or higher.
  "java.import.gradle.annotationProcessing.enabled": true,

  // Arguments to pass to Gradle.
  "java.import.gradle.arguments": null,

  // Enable/disable the Gradle importer.
  "java.import.gradle.enabled": true,

  // Use Gradle from the specified local installation directory or GRADLE_HOME if the Gradle wrapper is missing or disabled and no 'java.import.gradle.version' is specified.
  "java.import.gradle.home": null,

  // The location to the JVM used to run the Gradle daemon.
  "java.import.gradle.java.home": null,

  // JVM arguments to pass to Gradle.
  "java.import.gradle.jvmArguments": null,

  // Enable/disable the Gradle offline mode.
  "java.import.gradle.offline.enabled": false,

  // Setting for GRADLE_USER_HOME.
  "java.import.gradle.user.home": null,

  // Use Gradle from the specific version if the Gradle wrapper is missing or disabled.
  "java.import.gradle.version": null,

  // Use Gradle from the 'gradle-wrapper.properties' file.
  "java.import.gradle.wrapper.enabled": true,

  // Enable/disable the Maven importer.
  "java.import.maven.enabled": true,

  // Enable/disable the Maven offline mode.
  "java.import.maven.offline.enabled": false,

  // Defines allowed/disallowed SHA-256 checksums of Gradle Wrappers
  "java.imports.gradle.wrapper.checksums": [],

  // Enable/disable inlay hints for parameter names:
  // ```java
  //
  // Integer.valueOf(/* s: */ '123', /* radix: */ 10)
  //
  // ```
  //  `java.inlayHints.parameterNames.exclusions` can be used to disable the inlay hints for methods.
  //  - none: Disable parameter name hints
  //  - literals: Enable parameter name hints only for literal arguments
  //  - all: Enable parameter name hints for literal and non-literal arguments
  "java.inlayHints.parameterNames.enabled": "literals",

  // The patterns for the methods that will be disabled to show the inlay hints. Supported pattern examples:
  //  - `java.lang.Math.*` - All the methods from java.lang.Math.
  //  - `*.Arrays.asList` - Methods named as 'asList' in the types named as 'Arrays'.
  //  - `*.println(*)` - Methods named as 'println'.
  //  - `(from, to)` - Methods with two parameters named as 'from' and 'to'.
  //  - `(arg*)` - Methods with one parameter whose name starts with 'arg'.
  "java.inlayHints.parameterNames.exclusions": [],

  // [Experimental] Specify whether to enable Android project importing. When set to `auto`, the Android support will be enabled in Visual Studio Code - Insiders.
  //
  // **Note:** Only works for Android Gradle Plugin `3.2.0` or higher.
  "java.jdt.ls.androidSupport.enabled": "auto",

  // Specifies the folder path to the JDK (17 or more recent) used to launch the Java Language Server. This setting will replace the Java extension's embedded JRE to start the Java Language Server.
  //
  // On Windows, backslashes must be escaped, i.e.
  // "java.jdt.ls.java.home":"C:\\Program Files\\Java\\jdk-17.0_3"
  "java.jdt.ls.java.home": null,

  // Whether to load lombok processors from project classpath
  "java.jdt.ls.lombokSupport.enabled": true,

  // Specify whether to automatically add Protobuf output source directories to the classpath.
  //
  // **Note:** Only works for Gradle `com.google.protobuf` plugin `0.8.4` or higher.
  "java.jdt.ls.protobufSupport.enabled": true,

  // Specifies extra VM arguments used to launch the Java Language Server. Eg. use `-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable` to optimize memory usage with the parallel garbage collector
  "java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx1G -Xms100m -Xlog:disable",

  // Enable/disable download of Maven source artifacts as part of importing Maven projects.
  "java.maven.downloadSources": false,

  // Force update of Snapshots/Releases.
  "java.maven.updateSnapshots": false,

  // Max simultaneous project builds
  "java.maxConcurrentBuilds": 1,

  // [Experimental] Enable/disable progress reports from background processes on the server.
  "java.progressReports.enabled": true,

  // Project encoding settings
  //  - ignore: Ignore project encoding settings
  //  - warning: Show warning if a project has no explicit encoding set
  //  - setDefault: Set the default workspace encoding settings
  "java.project.encoding": "ignore",

  // Enable/disable the server-mode switch information, when Java projects import is skipped on startup.
  "java.project.importHint": true,

  // Specifies whether to import the Java projects, when opening the folder in Hybrid mode for the first time.
  "java.project.importOnFirstTimeStartup": "automatic",

  // A relative path to the workspace where stores the compiled output. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
  "java.project.outputPath": "",

  // Configure glob patterns for referencing local libraries to a Java project.
  "java.project.referencedLibraries": [
    "lib/**/*.jar"
  ],

  // Excludes files and folders from being refreshed by the Java Language Server, which can improve the overall performance. For example, ["node_modules","\.git"] will exclude all files and folders named 'node_modules' or '.git'. Pattern expressions must be compatible with `java.util.regex.Pattern`. Defaults to ["node_modules","\.git"].
  "java.project.resourceFilters": [
    "node_modules",
    "\\.git"
  ],

  // Relative paths to the workspace where stores the source files. `Only` effective in the `WORKSPACE` scope. The setting will `NOT` affect Maven or Gradle project.
  "java.project.sourcePaths": [],

  // Show quickfixes at the problem or line level.
  "java.quickfix.showAt": "line",

  // Show the recommended Dependency Analytics extension.
  "java.recommendations.dependency.analytics.show": true,

  // Include getter, setter and builder/constructor when finding references.
  "java.references.includeAccessors": true,

  // Include the decompiled sources when finding references.
  "java.references.includeDecompiledSources": true,

  // Enable/disable the references code lens.
  "java.referencesCodeLens.enabled": false,

  // Enable/disable auto organize imports on save action
  "java.saveActions.organizeImports": false,

  // Enable/disable Smart Selection support for Java. Disabling this option will not affect the VS Code built-in word-based and bracket-based smart selection.
  "java.selectionRange.enabled": true,

  // The launch mode for the Java extension
  //  - Standard: Provides full features such as intellisense, refactoring, building, Maven/Gradle support etc.
  //  - LightWeight: Starts a syntax server with lower start-up cost. Only provides syntax features such as outline, navigation, javadoc, syntax errors.
  //  - Hybrid: Provides full features with better responsiveness. It starts a standard language server and a secondary syntax server. The syntax server provides syntax features until the standard server is ready.
  "java.server.launchMode": "Hybrid",

  // Specifies the url or file path to the workspace Java settings. See [Setting Global Preferences](https://github.com/redhat-developer/vscode-java/wiki/Settings-Global-Preferences)
  "java.settings.url": null,

  // [Experimental] Specify whether to share indexes between different workspaces. When set to `auto`, shared indexes will be enabled in Visual Studio Code - Insiders.
  "java.sharedIndexes.enabled": "auto",

  // Specifies a common index location for all workspaces. See default values as follows:
  //
  // Windows: First use `"$APPDATA\\.jdt\\index"`, or `"~\\.jdt\\index"` if it does not exist
  //
  // macOS: `"~/Library/Caches/.jdt/index"`
  //
  // Linux: First use `"$XDG_CACHE_HOME/.jdt/index"`, or `"~/.cache/.jdt/index"` if it does not exist
  "java.sharedIndexes.location": "",

  // Automatically show build status on startup.
  "java.showBuildStatusOnStart.enabled": "notification",

  // Enable/disable to show the description in signature help.
  "java.signatureHelp.description.enabled": false,

  // Enable/disable the signature help.
  "java.signatureHelp.enabled": true,

  // Specifies the number of imports added before a star-import declaration is used.
  "java.sources.organizeImports.starThreshold": 99,

  // Specifies the number of static imports added before a star-import declaration is used.
  "java.sources.organizeImports.staticStarThreshold": 99,

  // Include method declarations from source files in symbol search.
  "java.symbols.includeSourceMethodDeclarations": false,

  // Specifies the file header comment for new Java file. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
  "java.templates.fileHeader": [],

  // Specifies the type comment for new Java type. Supports configuring multi-line comments with an array of strings, and using ${variable} to reference the [predefined variables](command:_java.templateVariables).
  "java.templates.typeComment": [],

  // Traces the communication between VS Code and the Java language server.
  "java.trace.server": "off",

  // Enable/disable lazy loading the content in type hierarchy. Lazy loading could save a lot of loading time but every type should be expanded manually to load its content.
  "java.typeHierarchy.lazyLoad": false,

  // Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
  "redhat.telemetry.enabled": false,

  // Register XML catalog files. See how to configure [XML catalog with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-xsd%22%7D%5D) or [XML catalog with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-dtd%22%7D%5D) for more information.
  "xml.catalogs": [],

  // Enable/disable XML CodeLens. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22CodeLens%22%2C%22section%22%3A%22Code%20Lens%22%7D%5D) for information about CodeLens features
  "xml.codeLens.enabled": false,

  // Allows colors for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLColorsFeatures%22%2C%22section%22%3A%22xmlcolorsfeatures%22%7D%5D) for more information.
  "xml.colors": [],

  // Enable/disable the content of an element being removed when the element start tag is turned into a self-closing tag. The default setting is to remove the content. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22auto-close-removes-content%22%7D%5D) for more information.
  "xml.completion.autoCloseRemovesContent": true,

  // Enable/disable autoclosing of XML tags. Default is `true`.
  //
  // IMPORTANT: Turn off `editor.autoClosingTags` for this to work.
  "xml.completion.autoCloseTags": true,

  // Download external resources like referenced DTD, XSD. Default is `true`.
  "xml.downloadExternalResources.enabled": true,

  // An array of paths to JARs that should be contributed to the LemMinX classpath. The paths can include glob patterns. This is intended to be used as a tool for developing extensions to vscode-xml. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22extension-jars%22%7D%5D) for more information
  "xml.extension.jars": [],

  // Allows XML schemas/ DTD to be associated to file name patterns. Please refer to [XML file association with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-xsd%22%7D%5D) or [XML file association with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-dtd%22%7D%5D) for more information.
  //
  // Example:
  // ```json
  // [{
  //   "pattern": "file1.xml",
  //   "systemId": "path/to/file.xsd"
  // },
  // {
  //   "pattern": "**/*.xsd",
  //   "systemId": "http://www.w3.org/2001/XMLSchema.xsd"
  // }]
  // ```
  "xml.fileAssociations": [],

  // Minimize the closing tag after folding. Default is `false`.
  "xml.foldings.includeClosingTagInFold": false,

  // The option to put a closing bracket on a newline when `xml.format.splitAttributes` is `true`. Default value is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatclosingbracketnewline%22%7D%5D) for more information.
  "xml.format.closingBracketNewLine": false,

  // Expand/collapse empty elements. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatemptyelements%22%7D%5D) for more information.
  "xml.format.emptyElements": "ignore",

  // Enable/disable ability to format document. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenabled%22%7D%5D) for more information.
  "xml.format.enabled": true,

  // Enforce `preferred` quote style (set by `xml.preferences.quoteStyle`) or `ignore` quote style when formatting. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenforcequotestyle%22%7D%5D) for more information.
  //  - preferred: Use preferred quote style set by `xml.preferences.quoteStyle` when formatting.
  //  - ignore: Ignore quote style formatting.
  "xml.format.enforceQuoteStyle": "ignore",

  // Use Schema/DTD grammar information while formatting. Default is `true`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatgrammarawareformatting%22%7D%5D) for more information.
  "xml.format.grammarAwareFormatting": true,

  // Set to `true` to join lines in CDATA content during formatting. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincdatalines%22%7D%5D) for more information.
  "xml.format.joinCDATALines": false,

  // Join comment content on format. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincommentlines%22%7D%5D) for more information.
  "xml.format.joinCommentLines": false,

  // Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincontentlines%22%7D%5D) for more information.
  "xml.format.joinContentLines": false,

  // Enable/disable legacy formatter. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatlegacy%22%7D%5D) for more information.
  "xml.format.legacy": false,

  // Max line width. Set to `0` to disable this setting. Default is `100`. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatmaxlinewidth%22%7D%5D) for more information.
  "xml.format.maxLineWidth": 100,

  // Preserve line breaks that appear before and after attributes. This setting is overridden if `xml.format.splitAttributes` is set to `true`. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveattributelinebreaks%22%7D%5D) for more information.
  "xml.format.preserveAttributeLineBreaks": true,

  // Preserve new lines that separate tags. The value represents the maximum number of new lines per section. A value of 0 removes all new lines. Default is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservednewlines%22%7D%5D) for more information.
  "xml.format.preservedNewlines": 2,

  // Preserve empty content/whitespace in a tag. Default is `false`. Supported only with legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveemptycontent%22%7D%5D) for more information.
  "xml.format.preserveEmptyContent": false,

  // Element names for which spaces will be preserved. Not supported by legacy formatter. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservespace%22%7D%5D) for more information.
  "xml.format.preserveSpace": [
    "xsl:text",
    "xsl:comment",
    "xsl:processing-instruction",
    "literallayout",
    "programlisting",
    "screen",
    "synopsis",
    "pre",
    "xd:pre"
  ],

  // Insert space before end of self closing tag.
  // Example:
  //   ```<tag/> -> <tag />```. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatspacebeforeemptyclosetag%22%7D%5D) for more information.
  "xml.format.spaceBeforeEmptyCloseTag": true,

  // Split multiple attributes each onto a new line. Default is `false`. Indicate level of indentation with `xml.format.splitAttributesIndentSize`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributes%22%7D%5D) for more information.
  "xml.format.splitAttributes": false,

  // How many levels to indent the attributes by when `xml.format.splitAttributes` is `true`. Default value is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributesindentsize%22%7D%5D) for more information
  "xml.format.splitAttributesIndentSize": 2,

  // Split `xsi:schemaLocation` content. Default is `onPair`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatxsischemalocationsplit%22%7D%5D) for more information
  //  - onElement: Put a new line after each namespace and URI, arranging them into one column.
  //  - onPair: Put a new line after each URI, arranging the content into pairs of namespace and URI.
  //  - none: Ignore `xsi:schemaLocation` content formatting.
  "xml.format.xsiSchemaLocationSplit": "onPair",

  // Specifies the folder path to the JDK (8 or more recent) used to launch the XML Language Server if the Java server is being run.
  // On Windows, backslashes must be escaped, i.e.
  // `"xml.java.home": "C:\\Program Files\\Java\\jdk1.8.0_161"`. For more information, please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22java-home%22%7D%5D).
  "xml.java.home": null,

  // Enable/disable logging to the Output view. Default is `true`.
  "xml.logs.client": true,

  // Preferred quote style to use for completion: `single` quotes, `double` quotes. Default is `double`.
  "xml.preferences.quoteStyle": "double",

  // Specifies the source of the XML schema documentation displayed on hover and completion. Default is `all`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22documentation-type%22%7D%5D) for more information.
  //  - documentation: Documentation comes from the `xs:documentation` element.
  //  - appinfo: Documentation comes from the `xs:appinfo` element.
  //  - all: Documentation comes from the `xs:documentation` and `xs:appinfo` elements.
  //  - none: Displays no documentation.
  "xml.preferences.showSchemaDocumentationType": "all",

  // Allows references for the given file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Features/XMLReferencesFeatures%22%2C%22section%22%3A%22xmlreferencesfeatures%22%7D%5D) for more information.
  "xml.references": [],

  // Command line arguments to supply to the binary server when the binary server is being used. Takes into effect after relaunching VSCode. Please refer to [this website for the available options](https://www.graalvm.org/reference-manual/native-image/HostedvsRuntimeOptions/). For example, you can increase the maximum memory that the server can use to 1 GB by adding `-Xmx1g`
  "xml.server.binary.args": "",

  // Specify the path of a custom binary version of the XML server to use. A binary will be downloaded if this is not set.
  "xml.server.binary.path": "",

  // List of the SHA256 hashes of trusted copies of the lemminx (XML language server) binary. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22trusted-binary-hashes%22%7D%5D) for more information
  "xml.server.binary.trustedHashes": [],

  // By default, vscode-xml tries to run the Java version of the XML Language Server. If no Java is detected, vscode-xml runs the binary XML language server. When this setting is enabled, the binary will also be used even if Java is installed. If there are additions to the XML Language Server provided by other extensions, Java will be used (if available) even if this setting is enabled.
  "xml.server.preferBinary": false,

  // The XML Language server allows other VSCode extensions to extend its functionality. It requires Java-specific features in order to do this. If extensions to the XML language server are detected, but a binary XML language server is run, a warning will appear. This setting can be used to disable this warning.
  "xml.server.silenceExtensionWarning": false,

  // Specifies extra VM arguments used to launch the XML Language Server. Eg. use `-Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector. Please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-vm-arguments%22%7D%5D) for more information on the Java server arguments.
  "xml.server.vmargs": "-Xmx64M",

  // Set a custom folder path for cached XML Schemas. An absolute path is expected, although the `~` prefix (for the user home directory) is supported. Default is `~/.lemminx`. Please refer to the [cache documentation](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-cache-path%22%7D%5D) for more information.
  "xml.server.workDir": "~/.lemminx",

  // Enable/disable document symbols (Outline). Default is `true`. No symbols are given if `"xml.symbols.enabled": false`.
  "xml.symbols.enabled": true,

  // Disable document symbols (Outline) for the given file name patterns. Updating file name patterns does not automatically reload the Outline view for the relevant file(s). Each file must either be reopened or changed, in order to trigger an Outline view reload.
  //
  // Example:
  // ```
  // [
  //  "**/*LargeFile.xml"
  // ]```.
  "xml.symbols.excluded": [],

  // Allows XML symbols filter to be associated to file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsfilters%22%7D%5D) for more information..
  //
  // Example:
  // ```json
  // [
  //   {
  //     "pattern": "pom.xml",
  //     "expressions": [
  //       {
  //         "xpath": "//text()"
  //       }
  //     ]
  //   }
  // ]
  // ```
  "xml.symbols.filters": [],

  // The maximum number of outline symbols and folding regions computed (limited for performance reasons). Default is `5000`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsmaxitemscomputed%22%7D%5D) for more information.
  "xml.symbols.maxItemsComputed": 5000,

  // Show referenced grammars in the Outline. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsshowreferencedgrammars%22%7D%5D) for more information.
  "xml.symbols.showReferencedGrammars": true,

  // Traces the communication between VS Code and the XML language server in the Output view. Default is `off`.
  "xml.trace.server": "off",

  // Enable/disable if a fatal error is thrown if the incoming document contains a DOCTYPE declaration. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22disallow-doc-type-declarations%22%7D%5D) for more information
  "xml.validation.disallowDocTypeDecl": false,

  // Enable/disable all validation. Default is `true`.
  "xml.validation.enabled": true,

  //
  "xml.validation.filters": [
    {
      "pattern": "**.exsd",
      "noGrammar": "ignore",
      "schema": {
        "enabled": "never"
      }
    },
    {
      "pattern": "**{.project,.classpath,plugin.xml,feature.xml,category.xml,.target,.product}",
      "noGrammar": "ignore"
    }
  ],

  // Enable/disable namespaces validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlnamespaceschemaenabled%22%7D%5D) for more information.
  //  - always: Enable namespaces validation.
  //  - never: Disable namespaces validation.
  //  - onNamespaceEncountered: Enable namespaces validation only when the root element declares an xmlns namespace.
  "xml.validation.namespaces.enabled": "always",

  // The message severity when a document has no associated grammar. Default is `hint`.
  "xml.validation.noGrammar": "hint",

  // Enable/disable resolve of external entities. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22resolve-external-entities%22%7D%5D) for more information. Disabled for untrusted workspaces
  "xml.validation.resolveExternalEntities": false,

  // Enable/disable schema based validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationschemaenabled%22%7D%5D) for more information.
  //  - always: Enable schema based validation.
  //  - never: Disable schema based validation.
  //  - onValidSchema: Enable schema based validation only when the declared xsi:schemaLocation hint or xsi:noNamespaceSchemaLocation is valid for the root element.
  "xml.validation.schema.enabled": "always",

  // Enable/disable validation for `xi:include`. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationxincludeenabled%22%7D%5D) for more information.
  "xml.validation.xInclude.enabled": false,

  // Enable/disable completion feature
  "yaml.completion": true,

  // Custom tags for the parser to use
  "yaml.customTags": [],

  // Globally set additionalProperties to false for all objects. So if its true, no extra properties are allowed inside yaml.
  "yaml.disableAdditionalProperties": false,

  // Disable adding not required properties with default values into completion text.
  "yaml.disableDefaultProperties": false,

  // Print spaces between brackets in objects
  "yaml.format.bracketSpacing": true,

  // Enable/disable default YAML formatter
  "yaml.format.enable": true,

  // Specify the line length that the printer will wrap on
  "yaml.format.printWidth": 80,

  // Always: wrap prose if it exceeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is
  "yaml.format.proseWrap": "preserve",

  // Use single quotes instead of double quotes
  "yaml.format.singleQuote": false,

  // Enable/disable hover feature
  "yaml.hover": true,

  // The maximum number of outline symbols and folding regions computed (limited for performance reasons).
  "yaml.maxItemsComputed": 5000,

  // Associate schemas to YAML files in the current workspace
  "yaml.schemas": {},

  // Automatically pull available YAML schemas from JSON Schema Store
  "yaml.schemaStore.enable": true,

  // URL of schema store catalog to use
  "yaml.schemaStore.url": "https://www.schemastore.org/api/json/catalog.json",

  // Forbid flow style mappings
  "yaml.style.flowMapping": "allow",

  // Forbid flow style sequences
  "yaml.style.flowSequence": "allow",

  // If true, the user must select some parent skeleton first before autocompletion starts to suggest the rest of the properties. When yaml object is not empty, autocompletion ignores this setting and returns all properties and skeletons
  "yaml.suggest.parentSkeletonSelectedFirst": false,

  // Traces the communication between VSCode and the YAML language service.
  "yaml.trace.server": "off",

  // Enable/disable validation feature
  "yaml.validate": true,

  // Default YAML spec version
  "yaml.yamlVersion": "1.2",

  // Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
  //
  //  Examples :
  // chrome --incognito --headless --remote-debugging-port=9222
  //  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
  "liveServer.settings.AdvanceCustomBrowserCmdLine": null,

  // Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
  //  NOTE: You have to install 'Debugger for Chrome'
  // If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging.
  //
  //  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
  "liveServer.settings.ChromeDebuggingAttachment": false,

  // Specify custom browser settings for Live Server.
  // By Default it will open your default favorite browser.
  "liveServer.settings.CustomBrowser": null,

  // To disable information pop up messages.
  "liveServer.settings.donotShowInfoMsg": false,

  // To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
  "liveServer.settings.donotVerifyTags": false,

  // When set, serve this file (server root relative) for every 404 (useful for single-page applications)
  "liveServer.settings.file": "",

  // By Default Live Server inject CSS changes without full reloading of browser. You can change this behavior by making this setting as `true`
  "liveServer.settings.fullReload": false,

  // To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
  "liveServer.settings.host": "127.0.0.1",

  // Setup https configuration
  "liveServer.settings.https": {
    "enable": false,
    "cert": "",
    "key": "",
    "passphrase": ""
  },

  // To ignore specific file changes
  "liveServer.settings.ignoreFiles": [
    ".vscode/**",
    "**/*.scss",
    "**/*.sass",
    "**/*.ts"
  ],

  // Mount a directory to a route. Such as [['/components', './node_modules']]
  "liveServer.settings.mount": [],

  // This the entry point of server when you're in multiroot workspace
  "liveServer.settings.multiRootWorkspaceName": null,

  // If it is true live server will start without browser opened.
  "liveServer.settings.NoBrowser": false,

  // Set Custom Port Number of Live Server. Set 0 if you want random port.
  "liveServer.settings.port": 5500,

  // To Setup Proxy
  "liveServer.settings.proxy": {
    "enable": false,
    "baseUri": "/",
    "proxyUri": "http://127.0.0.1:80"
  },

  // Set Custom root of Live Server.
  // To change root the the server to sub folder of workspace, use '/' and relative path from workspace.
  // Example: /subfolder1/subfolder2
  "liveServer.settings.root": "/",

  // Change this to false if you don't want the button to show in the statusbar
  "liveServer.settings.showOnStatusbar": true,

  // Use local IP as host
  "liveServer.settings.useLocalIp": false,

  // You have to install a browser extension. That will be works for your dynamic pages (like PHP).
  "liveServer.settings.useWebExt": false,

  // Delay before live reloading. Value in milliseconds. Default is 100
  "liveServer.settings.wait": 100,

  // Controls the background color of the trailing space decoration.
  "trailing-spaces.backgroundColor": "rgba(255,0,0,0.3)",

  // Controls the color of the border around the trailing space decoration.
  "trailing-spaces.borderColor": "rgba(255,100,100,0.15)",

  // By default, trailing spaces are deleted within the whole document. Set to true to affect only the lines you edited since last save. Trailing spaces will still be searched for and highlighted in the whole document.
  "trailing-spaces.deleteModifiedLinesOnly": false,

  // By default, the lines being currently edited (i.e. with active cursors) will have its trailing spaces highlighted. Set to false to ignore trailing spaces on the current lines.
  "trailing-spaces.highlightCurrentLine": true,

  // By default, empty lines are cleared as well when calling the deletion command. Set to false to ignore empty lines upon deletion.
  "trailing-spaces.includeEmptyLines": true,

  // By default, Trailing Spaces is "live". It means the trailing spaces regions will be matched in the background, and highlighted if a color scope is defined, when the document is opened and edited. Set to false to disable live matching and highlighting (the deletion command remains available, so-called "lazy matching").
  "trailing-spaces.liveMatching": true,

  // Controls the verbosity of logging. Logs can be seen in the console by opening the dev tools. `log` is the most verbose and `error` will only show critical errors.
  "trailing-spaces.logLevel": "warn",

  // By default, only simple spaces and tabs are matched as "trailing spaces".
  "trailing-spaces.regexp": "[ \t]+",

  // With this option you can ignore specific schemes. An item has to match the case-sensitive string of the scheme of the document.
  "trailing-spaces.schemeIgnore": [
    "output"
  ],

  // By default, trailing space deletions will be communicated through a status bar message. Set to false to disable these messages.
  "trailing-spaces.showStatusBarMessage": true,

  // With this option you can ignore specific files based on the syntax used. An item has to match the case-sensitive string of the language used in the file.
  "trailing-spaces.syntaxIgnore": [],

  // Controls whether trailing spaces are trimmed automatically when saving a file.
  "trailing-spaces.trimOnSave": false,

  // Logging level for console
  "intellicodeApiExamples.loggingLevel": "INFO",

  // Enable API Usage Examples for Python files
  "intellicodeApiExamples.python.enabled": true,

  // Enable API Usage Examples for Typescript/Javascript files
  "intellicodeApiExamples.typescript.enabled": true,

  //
  "vsintellicode.features.python.deepLearning": "default",

  // Enable Visual Studio IntelliCode completions for Java
  "vsintellicode.java.completionsEnabled": true,

  // Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
  "vsintellicode.modelDownloadPath": null,

  // Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
  //  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
  //  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
  //  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
  //  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
  "vsintellicode.modify.editor.suggestSelection": "enabled",

  // Enable Visual Studio IntelliCode completions for Python
  "vsintellicode.python.completionsEnabled": true,

  // Enable Visual Studio IntelliCode completions for MSSQL
  "vsintellicode.sql.completionsEnabled": true,

  // Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
  "vsintellicode.typescript.completionsEnabled": true,

  // Java调试器的日志级别。
  "java.debug.logLevel": "warn",

  // 指定的控制台用于启动Java程序。如果要为特定的调试会话自定义控制台，请修改launch.json中的“console”配置。
  //  - internalConsole: VS Code调试控制台（不支持输入流）。
  //  - integratedTerminal: VS Code集成终端。
  //  - externalTerminal: 外部终端（可在用户设置中修改）。
  "java.debug.settings.console": "integratedTerminal",

  // 在main方法上启用CodeLens标记。
  "java.debug.settings.enableRunDebugCodeLens": true,

  // 当发生异常时，跳过指定的类。你可以使用内置变量，如'$JDK'和'$Libraries'来跳过一组类，或者添加一个特定的类名表达式，如java.*，*.Foo。
  "java.debug.settings.exceptionBreakpoint.skipClasses": [],

  // 在启动java程序之前强制编译整个工作空间。
  "java.debug.settings.forceBuildBeforeLaunch": true,

  // 在调试期间重新加载已更改的Java类。确保未禁用'java.autobuild.enabled'。
  "java.debug.settings.hotCodeReplace": "manual",

  // 实验性的：控制是否允许调试器以异步方式发送JDWP命令。异步模式可以提高高延迟网络上的远程调试响应速度。
  "java.debug.settings.jdwp.async": "auto",

  // 一次JDWP请求中可以请求的变量或字段的最大数量。该值越高，在展开变量视图时，请求debuggee的频率就越低。同时数量过大也会导致JDWP请求超时。
  "java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100,

  // 调试器与目标JVM通信时JDWP请求的超时时间（ms）。
  "java.debug.settings.jdwp.requestTimeout": 3000,

  // 设定“变量”或“调试控制台”视图中显示的字符串最大长度，长度超过部分将被剪掉。如果值为0，则不执行修剪。
  "java.debug.settings.maxStringLength": 0,

  // The precision when formatting doubles in "Variables" or "Debug Console" viewlet.
  "java.debug.settings.numericPrecision": 0,

  // Force to proceed when build fails
  "java.debug.settings.onBuildFailureProceed": false,

  // 在“变量”视图中以十六进制格式显示数值。
  "java.debug.settings.showHex": false,

  // 在“变量”视图中显示Collection和Map类的逻辑结构。
  "java.debug.settings.showLogicalStructure": true,

  // 在“变量”视图中显示类的全名。
  "java.debug.settings.showQualifiedNames": false,

  // 在“变量”视图中显示静态变量。
  "java.debug.settings.showStaticVariables": false,

  // 在“变量”视图中显示所有重载过'toString'方法的类的'toString()'值。
  "java.debug.settings.showToString": true,

  // Step时跳过指定的类。你可以使用内置变量，如'$JDK'和'$Libraries'来跳过一组类，或者添加一个特定的类名表达式，如java.*，*.Foo。
  "java.debug.settings.stepping.skipClasses": [],

  // Step时跳过构造函数。
  "java.debug.settings.stepping.skipConstructors": false,

  // Step时跳过静态初始化方法。
  "java.debug.settings.stepping.skipStaticInitializers": false,

  // Step时跳过合成方法。
  "java.debug.settings.stepping.skipSynthetics": false,

  // 启动Java程序的默认VM参数。例如，使用'-Xmx1G -ea'将堆大小增加到1GB并启用断言。如果要为特定的调试会话定制VM参数，请修改launch.json中的'vmArgs'配置。
  "java.debug.settings.vmArgs": "",

  // 控制是否可以使用通知来报告进度。如果为真，则使用状态栏来报告进度。
  "java.silentNotification": false,

  // 在 Java 项目管理器中自动同步修改
  "java.dependency.autoRefresh": true,

  // Java 包显示方式: 平行显示或者分层显示
  "java.dependency.packagePresentation": "flat",

  // 控制 Java 项目管理器刷新的延迟时间 (毫秒)
  "java.dependency.refreshDelay": 2000,

  // 在 Java 项目管理器中显示成员
  "java.dependency.showMembers": false,

  // 在 Java 项目管理器中同步关联当前打开的文件
  "java.dependency.syncWithFolderExplorer": true,

  // 导出 Jar 文件的路径。您可以将此选项置为空串来手动选择 jar 文件的导出路径。
  "java.project.exportJar.targetPath": "${workspaceFolder}/${workspaceFolderBasename}.jar",

  // Whether to send back detailed information from error logs for diagnostic purpose.
  "java.help.collectErrorLog": false,

  // Sets the default view which is presented during the first use.
  //  - auto: Automatically pick the first experience view
  //  - overview: Present the Java Overview page
  //  - gettingStarted: Present the Java Beginner Tips page
  //  - welcome: Present the Java Help Center page
  //  - none: Do not show any view
  "java.help.firstView": "auto",

  // Show release notes of Extension Pack for Java on startup.
  "java.help.showReleaseNotes": true,

  // 设定运行测试的配置信息。
  "java.test.config": {},

  // 设定默认测试配置项的名称。
  "java.test.defaultConfig": "",

  // 指定是否在 POM 文件中显示依赖冲突。
  "maven.dependency.enableConflictDiagnostics": "true",

  // 指定搜索 Maven 项目时要排除的文件夹。
  "maven.excludedFolders": [
    "**/.*",
    "**/node_modules",
    "**/target",
    "**/bin",
    "**/archetype-resources"
  ],

  // 指定所有mvn命令的默认选项。
  "maven.executable.options": "",

  // 指定mvn可执行文件的绝对路径。当此值为空时，它会根据 maven.executable.preferMavenWrapper 的值尝试使用 mvn 或 mvnw 。
  "maven.executable.path": "",

  // 指定是否优先使用 Maven Wrapper。如果为 true，则尝试向上遍历父文件夹寻找 mvnw 作为可执行文件；如果为 false，或者找不到 mvnw，则尝试使用系统 PATH 中的 mvn。
  "maven.executable.preferMavenWrapper": "true",

  // Maven 项目名称的显示格式。
  "maven.explorer.projectName": "${project.name}",

  // 指定是否自动更新 Effective POM。
  "maven.pomfile.autoUpdateEffectivePOM": false,

  // 指定用于查找 POM 文件的 glob 模式。
  "maven.pomfile.globPattern": "**/pom.xml",

  // 指定是否在启动时预加载 Effective POM。
  "maven.pomfile.prefetchEffectivePom": false,

  // 新建项目的默认打开方式。
  "maven.projectOpenBehavior": "Interactive",

  // 指定 maven 配置文件的绝对路径, 默认是 ~/.m2/settings.xml
  "maven.settingsFile": null,

  // 如果此值为 true ，将会在文件浏览器的文件夹右键菜单中增加一个命令，用来新建 Maven 项目。
  "maven.showInExplorerContextMenu": "true",

  // 自定义环境变量。在首次执行 Maven 之前，这些环境变量值将被添加到终端会话中。
  "maven.terminal.customEnv": [],

  // 指定要执行的偏好命令。
  "maven.terminal.favorites": [],

  // 如果此值为 true ，并且配置项 java.home 具有值，则在创建新的终端窗口时，将环境变量 JAVA_HOME 设置为 java.home 的值。
  "maven.terminal.useJavaHome": false,

  // 指定 Maven 项目的视图方式。
  "maven.view": "flat",

  // 这项设置会更改深色主题默认的文件图标
  "vsicons.associations.fileDefault.file": null,

  // 这项设置会更改浅色主题默认的文件图标
  "vsicons.associations.fileDefault.file_light": null,

  // 这些自定义设置会覆盖掉系统默认的文件图标设置
  "vsicons.associations.files": [],

  // 这项设置会更改深色主题默认的文件夹图标
  "vsicons.associations.folderDefault.folder": null,

  // 这项设置会更改浅色主题默认的文件夹图标
  "vsicons.associations.folderDefault.folder_light": null,

  // 这项设置会更改默认的根目录文件夹图标
  "vsicons.associations.folderDefault.root_folder": null,

  // 这项设置会更改浅色主题默认的根目录文件夹图标
  "vsicons.associations.folderDefault.root_folder_light": null,

  // 这些自定义设置会覆盖掉系统默认的文件夹图标设置
  "vsicons.associations.folders": [],

  // 指向位于您的计算机上含自定义图标的文件夹的父文件夹的物理路径
  "vsicons.customIconFolderPath": "",

  // 如果设置成'true'，手动修改配置后不提醒「重启后生效」
  "vsicons.dontShowConfigManuallyChangedMessage": false,

  // 如果设置成'true'，关于新的版本消息将不再显示
  "vsicons.dontShowNewVersionMessage": false,

  // 如果设置成'true'，插件会自动匹配 Angular 模式
  "vsicons.presets.angular": false,

  // 如果设置成'true'，所有文件夹会恢复成默认图标
  "vsicons.presets.foldersAllDefaultIcon": false,

  // 如果设置成'true'，此扩展会隐藏在“资源管理器”中的文件夹箭头
  "vsicons.presets.hideExplorerArrows": false,

  // 如果设置成'true'，所有文件夹会隐藏
  "vsicons.presets.hideFolders": false,

  // 如果设置成'true'，插件会自动使用官方 JS 图标
  "vsicons.presets.jsOfficial": false,

  // 如果设置成'true'，插件会自动使用官方 JSON 图标
  "vsicons.presets.jsonOfficial": false,

  // 如果设置成'true'，插件会自动匹配 NestJS 模式
  "vsicons.presets.nestjs": false,

  // 如果设置成'true'，插件会自动使用官方 TS 图标
  "vsicons.presets.tsOfficial": false,

  // 如果设置成'true'，检测工程文件后自动重启插件
  "vsicons.projectDetection.autoReload": false,

  // 如果设置成'true'，插件不再自动检测工程文件
  "vsicons.projectDetection.disableDetect": false,

  // Auto add space between double curly brackets: {{|}} -> {{ | }}
  "volar.addSpaceBetweenDoubleCurlyBrackets": true,

  // Auto-complete Ref value with `.value`.
  "volar.autoCompleteRefs": false,

  // Auto-wrap `()` to As Expression in interpolations for fix issue #520.
  "volar.autoWrapParentheses": true,

  // [references] code lens.
  "volar.codeLens.references": true,

  // Normalize import name for auto import. ("myCompVue" -> "MyComp")
  "volar.completion.normalizeComponentImportName": true,

  // Preferred attr name case.
  //  - auto-kebab: Auto Detect from Content (Preferred :kebab-case="...")
  //  - auto-camel: Auto Detect from Content (Preferred :camelCase="...")
  //  - kebab: :kebab-case="..."
  //  - camel: :camelCase="..."
  "volar.completion.preferredAttrNameCase": "auto-kebab",

  // Preferred tag name case.
  //  - auto-kebab: Auto Detect from Content (Preferred <kebab-case>)
  //  - auto-pascal: Auto Detect from Content (Preferred <PascalCase>)
  //  - kebab: <kebab-case>
  //  - pascal: <PascalCase>
  "volar.completion.preferredTagNameCase": "auto-pascal",

  // Delay time for diagnostics.
  "volar.diagnostics.delay": 200,

  // Check vue-tsc version.
  "volar.doctor.checkVueTsc": false,

  // Show known problems in status bar.
  "volar.doctor.statusBarItem": true,

  // Whether to have initial indent.
  "volar.format.initialIndent": {
    "html": true
  },

  // Show split editor icon in title area of editor.
  "volar.icon.splitEditors": false,

  // Show inlay hints for event argument in inline handlers.
  "volar.inlayHints.eventArgumentInInlineHandlers": true,

  // Show inlay hints for missing required props.
  "volar.inlayHints.missingRequiredProps": true,

  //
  "volar.splitEditors.layout.left": [
    "script",
    "scriptSetup",
    "styles"
  ],

  //
  "volar.splitEditors.layout.right": [
    "template",
    "customBlocks"
  ],

  // The extension that take over language support for *.ts.
  "volar.takeOverMode.extension": "Vue.volar",

  // Enabled update imports on file move.
  "volar.updateImportsOnFileMove.enabled": true,

  // List any additional file extensions that should be processed as Vue files (requires restart).
  "volar.vueserver.additionalExtensions": [],

  // Path to volar.config.js.
  "volar.vueserver.configFilePath": "./volar.config.js",

  // Diagnostic update model.
  //  - push: Diagnostic push by language server.
  //  - pull: Diagnostic pull by language client.
  "volar.vueserver.diagnosticModel": "push",

  // Disable file watcher in language server for better performance.
  "volar.vueserver.disableFileWatcher": false,

  // Enable this option if you want to get complete CompletionList in language client. (Disable for better performance)
  "volar.vueserver.fullCompletionList": false,

  //
  "volar.vueserver.json.customBlockSchemaUrls": {},

  // Maximum file size for Vue Server to load. (default: 20MB)
  "volar.vueserver.maxFileSize": 20971520,

  // Set --max-old-space-size option on server process. If you have problem on frequently "Request textDocument/** failed." error, try setting higher memory(MB) on it.
  "volar.vueserver.maxOldSpaceSize": null,

  // Ignore project references settings of tsconfig in language server for resolve issue #1916.
  "volar.vueserver.noProjectReferences": false,

  //
  "volar.vueserver.petiteVue.processHtmlFile": false,

  // Reverse priority for tsconfig pickup.
  "volar.vueserver.reverseConfigFilePriority": false,

  // Defines how the host (editor) should sync document changes to the language server. SFC incremental parser only working when config "incremental".
  //  - incremental: Documents are synced by sending the full content on open. After that only incremental updates to the document are send.
  //  - full: Documents are synced by always sending the full content of the document.
  //  - none: Documents should not be synced at all.
  "volar.vueserver.textDocumentSync": "incremental",

  //
  "volar.vueserver.vitePress.processMdFile": false,

  // Traces the communication between VS Code and the language server.
  "vue-semantic-server.trace.server": "off",

  // Traces the communication between VS Code and the language server.
  "vue-syntactic-server.trace.server": "off",

  // Default style for all customized keywords
  "todohighlight.defaultStyle": {},

  // Glob pattern that defines files and folders to exclude while listing annotations.
  "todohighlight.exclude": [
    "**/node_modules/**",
    "**/bower_components/**",
    "**/dist/**",
    "**/build/**",
    "**/.vscode/**",
    "**/.github/**",
    "**/_output/**",
    "**/*.min.*",
    "**/*.map",
    "**/.next/**"
  ],

  // Glob patterns that defines the files to search for. Only include files you need, DO NOT USE `{**/*.*}` for both permormance and avoiding binary files reason.
  "todohighlight.include": [
    "**/*.js",
    "**/*.jsx",
    "**/*.ts",
    "**/*.tsx",
    "**/*.html",
    "**/*.php",
    "**/*.css",
    "**/*.scss"
  ],

  // Specify whether the keywords are case sensitive or not
  "todohighlight.isCaseSensitive": true,

  // Enable or disable the highlight
  "todohighlight.isEnable": true,

  // Customize keywords and colors. Any css color identifier is valid.
  "todohighlight.keywords": [],

  // Specify keywords via RegExp instead of `todohighlight.keywords` one by one. NOTE that if this presents, `todohighlight.keywords` will be ignored. And REMEMBER to escapse the back slash if there's any in your regexp (using \\ instead of single back slash)
  "todohighlight.keywordsPattern": "",

  // Max files for searching
  "todohighlight.maxFilesForSearch": 5120,

  // If the file path within the output channel not clickable, set this to true to toggle the path patten between `<path>#<line>` and `<path>:<line>:<column>`
  "todohighlight.toggleURI": false,

  // A path to a file, or an object containing the configuration options for js-beautify, if the .jsbeautifyrc file exists in project root, it overrides this configuration.
  "compile-hero.config": null,

  // Disable compile files on did save code.
  "compile-hero.disable-compile-files-on-did-save-code": true,

  // Enable to generate minified css (*.min.css) files.
  "compile-hero.generate-minified-css": false,

  // Enable to generate only minified css (*.min.css) files.
  "compile-hero.generate-minified-css-only": false,

  // Enable to generate minified html (*.min.html) files.
  "compile-hero.generate-minified-html": false,

  // Enable to generate only minified html (*.min.html) files.
  "compile-hero.generate-minified-html-only": false,

  // Enable to generate minified javascript (*.dev.js) files.
  "compile-hero.generate-minified-javascript": false,

  // Enable to generate only minified javascript (*.dev.js) files.
  "compile-hero.generate-minified-javascript-only": false,

  // List of paths to ignore when using format or compile command, including format or compile on save, uses glob pattern matching.
  "compile-hero.ignore": [],

  // Set the directory to output after compiling jade.
  "compile-hero.jade-output-directory": "./dist",

  // Switch to control the compilation of jade.
  "compile-hero.jade-output-toggle": true,

  // Set the directory to output after compiling javascript.
  "compile-hero.javascript-output-directory": "./dist",

  // Switch to control the compilation of javascript.
  "compile-hero.javascript-output-toggle": true,

  // Link file types to the beautifier type.
  "compile-hero.language": {
    "js": {
      "type": [
        "javascript",
        "json",
        "jsonc"
      ],
      "filename": [
        ".jshintrc",
        ".jsbeautifyrc"
      ]
    },
    "css": [
      "css",
      "less",
      "scss"
    ],
    "html": [
      "htm",
      "html"
    ]
  },

  // Set the directory to output after compiling less.
  "compile-hero.less-output-directory": "./dist",

  // Switch to control the compilation of less.
  "compile-hero.less-output-toggle": true,

  // Switch to control the notification.
  "compile-hero.notification-toggle": true,

  // Set the directory to output after compiling pug.
  "compile-hero.pug-output-directory": "./dist",

  // Switch to control the compilation of pug.
  "compile-hero.pug-output-toggle": true,

  // Set the directory to output after compiling sass.
  "compile-hero.sass-output-directory": "./dist",

  // Switch to control the compilation of sass.
  "compile-hero.sass-output-toggle": true,

  // Set the directory to output after compiling sass.
  "compile-hero.scss-output-directory": "./dist",

  // Switch to control the compilation of sass.
  "compile-hero.scss-output-toggle": true,

  // Set the directory to output after compiling stylus.
  "compile-hero.stylus-output-directory": "./dist",

  // Switch to control the compilation of stylus.
  "compile-hero.stylus-output-toggle": true,

  // Set the directory to output after compiling typescript.
  "compile-hero.typescript-output-directory": "./dist",

  // Switch to control the compilation of typescript.
  "compile-hero.typescript-output-toggle": true,

  // Set the directory to output after compiling typescriptx.
  "compile-hero.typescriptx-output-directory": "./dist",

  // Switch to control the compilation of typescriptx.
  "compile-hero.typescriptx-output-toggle": true,

  // List of paths to watch when using format or compile command, including format or compile on save, uses glob pattern matching.
  "compile-hero.watch": [],

  //
  "masmtasm.ASM.actions": {
    "TASM": {
      "baseBundle": "<built-in>/TASM.jsdos",
      "before": [
        "set PATH=C:\\TASM"
      ],
      "run": [
        "TASM ${file}",
        "TLINK ${filename}",
        ">${filename}"
      ],
      "debug": [
        "TASM /zi ${file}",
        "TLINK /v/3 ${filename}.obj",
        "copy C:\\TASM\\TDC2.TD TDCONFIG.TD",
        "TD -cTDCONFIG.TD ${filename}.exe"
      ]
    },
    "MASM-v6.11": {
      "baseBundle": "<built-in>/MASM-v6.11.jsdos",
      "before": [
        "set PATH=C:\\MASM"
      ],
      "run": [
        "masm ${file};",
        "link ${filename};",
        ">${filename}"
      ],
      "debug": [
        "masm ${file};",
        "link ${filename}.OBJ;",
        ">debug ${filename}.exe"
      ]
    },
    "MASM-v5.00": {
      "baseBundle": "<built-in>/MASM-v5.00.jsdos",
      "before": [
        "set PATH=C:\\MASM"
      ],
      "run": [
        "masm ${file};",
        "link ${filename};",
        ">${filename}"
      ],
      "debug": [
        "masm ${file};",
        "link ${filename}.OBJ;",
        ">debug ${filename}.exe"
      ],
      "support": [
        "jsdos",
        "dosbox",
        "dosbox-x",
        "msdos player"
      ]
    }
  },

  // 选择使用的汇编工具
  "masmtasm.ASM.assembler": "TASM",

  // 选择使用的DOS环境模拟器
  //  - jsdos: 使用jsdos在webview中运行jsdos(wdosbox)来提供DOS环境
  //  - dosbox: 使用dosbox模拟DOS系统环境，非windows系统需要先安装dosbox并添加到PATH
  //  - dosbox-x: 使用DOSBox-x模拟dos环境
  //  - msdos player: 尽量使用msdos player模拟，不会弹出一个窗口，但是可能无法得到程序预期的运行结果
  "masmtasm.ASM.emulator": "jsdos",

  // choose working Mode
  //  - single file: 针对所有代码存储在一个文件中的模式，插件会首先复制文件并对副本进行操作
  //  - workspace: 针对文件存在依赖的模式，插件会直接在当前工作文件夹中操作。
  //
  // - dosbox会直接在工作区文件夹挂载，jsdos会复制整个工作区所有文件
  // - 注意DOS系统常常需要遵守8.3规则
  "masmtasm.ASM.mode": "single file",

  // 在运行之前先保存文件,不保存的话，无法体现当前变更
  "masmtasm.ASM.savefirst": true,

  // 用于获取[cppdocs](https://github.com/MicrosoftDocs/cpp-docs)信息的链接, "{vid}"将被替换为`Visual Studio Code Language ID`,"{mid}" 将被替换为`MLCP language code`, 参见 [vscode-loc](https://github.com/microsoft/vscode-loc)
  "masmtasm.cpp-docs.links": [
    "https://cdn.jsdelivr.net/gh/MicrosoftDocs/cpp-docs@master/",
    "https://raw.githubusercontent.com/MicrosoftDocs/cpp-docs/master/",
    "https://gitee.com/dosasm/cpp-docs/raw/master/"
  ],

  // dosbox的配置信息，将会写到插件专用的配置文件中, 参见 [dosbox官网的说明](https://www.dosbox.com/wiki/Dosbox.conf),请勿设置`autoexec`
  "masmtasm.dosbox.config": {
    "sdl.windowresolution": "1024x640",
    "sdl.output": "opengl"
  },

  // 选择在dosbox中运行代码时，运行代码结束后执行什么操作
  //  - keep: 运行之后在dosbox窗口停留，可以输入exit，点击右上角“x”，或者按Ctrl+F9关闭DOSBOX
  //  - exit: 运行程序之后直接关闭DOSBOX
  //  - pause: 运行程序之后先停顿一下，输入任意字符后关闭DOSBOX窗口
  //  - choose: 使用choose命令，来选择是否关闭dosbox
  "masmtasm.dosbox.run": "choose",

  // dosbox-x的配置信息，将会写到插件专用的配置文件中, 参见 [dosbox-x官网的说明](https://dosbox-x.com/wiki/),请勿设置`autoexec`
  "masmtasm.dosboxX.config": {},

  // 是否显示悬浮提示(hover)，可能需要重启vscode来应用变更
  "masmtasm.language.Hover": true,

  // 使用提供大纲，跳到定义，查找引用等programmatic features
  "masmtasm.language.programmaticFeatures": true,

  // The command for open your DOSBox
  //
  //  By default the extension will pass dosbox parameters after the command, use `<param>` if you want to insert
  "vscode-dosbox.command.dosbox": "dosbox",

  // The command for open your DOSBox-x
  //
  //  By default the extension will pass dosbox parameters after the command, use `<param>` if you want to insert
  "vscode-dosbox.command.dosboxX": "dosbox-x -nopromptfolder",

  // The configurations for dosbox, will be write to the `dosbox.conf` file
  "vscode-dosbox.dosbox.config": {},

  // The configurations for dosbox-x,will be write to the `dosbox-x.conf` file
  "vscode-dosbox.dosboxX.config": {},

  // set builtin DOSBoxX configuration
  //  - en: use default English config
  //  - zh_CN: use zh_CN config
  //  - follow: follow vscode's language config
  "vscode-dosbox.dosboxX.lang": "follow",

  //
  "vscode-dosbox.jsdos.ignore": [
    "\\.git",
    "\\.vscode",
    "node_modules"
  ],

  // The location of the jsdos webview, see [vscode api](https://code.visualstudio.com/api/references/vscode-api#ViewColumn) for more
  "vscode-dosbox.jsdosWeb.column": 0,

  // 用 `**` 或 `__` 来括住粗体字。
  "markdown.extension.bold.indicator": "**",

  // Whether to exclude files from auto-completion using VS Code's `search.exclude` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)
  "markdown.extension.completion.respectVscodeSearchExclude": true,

  // The root folder for path auto-completion.
  "markdown.extension.completion.root": "",

  // 支持的其他语言列表（如rmd, qmd），默认为空。
  "markdown.extension.extraLangIds": [],

  // 使用 `*` 或 `_` 包围斜体文本。
  "markdown.extension.italic.indicator": "*",

  // 自定义 KaTeX 宏。
  "markdown.extension.katex.macros": {},

  // Markdown 列表的缩进方案。（包括目录列表）
  //  - adaptive: 参考 **CommonMark Spec**，根据上下文判断缩进大小，并尝试**将子级的左端对齐父级的内容的左端**。比如：
  //
  // ```markdown
  // - Parent
  //   - Sublist
  //
  // 1. Parent
  //    1. Sublist
  //
  // 10. Parent with longer marker
  //     1. Sublist
  // ```
  //  - inherit: 使用当前文档设置的缩进量（请查看 VS Code 状态栏）。比如：(`tabSize: 4`)
  //
  // ```markdown
  // - Parent
  //     - Sublist
  //
  // 1. Parent
  //     1. Sublist
  //
  // 10. Parent with longer marker
  //     1. Sublist
  // ```
  "markdown.extension.list.indentationSize": "adaptive",

  // 可选的列表标记，调整时将循环使用这些标记
  "markdown.extension.list.toggle.candidate-markers": [
    "-",
    "*",
    "+",
    "1.",
    "1)"
  ],

  // 启用基本的数学支持（由 KaTeX 提供）
  "markdown.extension.math.enabled": true,

  // 自动更正有序列表的标号。
  "markdown.extension.orderedList.autoRenumber": true,

  // 有序列表标记
  //  - one: 总是使用 `1.` 作为有序列表标记
  //  - ordered: 使用递增数字作为有序列表标记
  "markdown.extension.orderedList.marker": "ordered",

  // 自动在另一栏显示预览。
  "markdown.extension.preview.autoShowPreviewToSide": false,

  // 将图片路径转换为绝对路径
  "markdown.extension.print.absoluteImgPath": true,

  // 在打印到 HTML 时将图片转换为 base64
  "markdown.extension.print.imgToBase64": false,

  // Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
  "markdown.extension.print.includeVscodeStylesheets": true,

  // Markdown 文档保存后自动打印为 HTML。
  "markdown.extension.print.onFileSave": false,

  // Theme of the exported HTML. Only affects code blocks.
  "markdown.extension.print.theme": "light",

  // Enable/disable URL validation when printing.
  "markdown.extension.print.validateUrls": true,

  // If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations.
  "markdown.extension.syntax.decorationFileSizeLimit": 50000,

  // (**Deprecated**) Use `markdown.extension.theming.decoration.renderCodeSpan` instead. See <https://github.com/yzhang-gh/vscode-markdown/issues/888> for details.
  //
  "markdown.extension.syntax.decorations": null,

  // （**实验性**）请在 <https://github.com/yzhang-gh/vscode-markdown/issues/185> 报告问题。
  "markdown.extension.syntax.plainTheme": false,

  // Don't add padding to the delimiter row.
  "markdown.extension.tableFormatter.delimiterRowNoPadding": false,

  // 启用 [GitHub Flavored Markdown](https://github.github.com/gfm/) 表格格式化。
  "markdown.extension.tableFormatter.enabled": true,

  // 使位于列表内的表格的缩进长度为制表符长度（`tabSize`）。
  "markdown.extension.tableFormatter.normalizeIndentation": false,

  // 在[行内代码 (code span)](https://spec.commonmark.org/0.29/#code-spans) 周围显示边框。
  "markdown.extension.theming.decoration.renderCodeSpan": true,

  // (**Experimental**)
  "markdown.extension.theming.decoration.renderHardLineBreak": false,

  // (**Experimental**)
  "markdown.extension.theming.decoration.renderLink": false,

  // (**Experimental**)
  "markdown.extension.theming.decoration.renderParagraph": false,

  // 显示[删除线 (strikethrough)](https://github.github.com/gfm/#strikethrough-extension-)。
  "markdown.extension.theming.decoration.renderStrikethrough": true,

  // 为[行](https://spec.commonmark.org/0.29/#line)末端的空格 (U+0020) 字符添加底纹背景。
  "markdown.extension.theming.decoration.renderTrailingSpace": false,

  // 目录级别的范围。例如 `2..5` 表示在目录中只包含 2 到 5 级标题。
  "markdown.extension.toc.levels": "1..6",

  // 在指定文件的目录中省略这些标题。
  // 示例：
  // { "README.md": ["# Introduction"] }
  "markdown.extension.toc.omittedFromToc": {},

  // 使用有序列表，即：
  // 1. ...
  // 2. ...
  "markdown.extension.toc.orderedList": false,

  // 使用纯文本目录。
  "markdown.extension.toc.plaintext": false,

  // 生成标题 ID 的方法。该设置影响**目录**、**代码自动补全**、**打印**中**指向标题的链接**。
  //  - github: GitHub
  //  - azureDevops: Azure DevOps
  //  - bitbucket-cloud: Bitbucket Cloud
  //  - gitea: Gitea
  //  - gitlab: GitLab
  //  - vscode: Visual Studio Code
  "markdown.extension.toc.slugifyMode": "github",

  // 在目录中使用 `-`，`*` 或 `+` （仅对于**无序**列表）。
  "markdown.extension.toc.unorderedList.marker": "-",

  // 保存时自动更新目录。
  "markdown.extension.toc.updateOnSave": true,

  // 设置部分代码为粗体
  "oneDarkPro.bold": false,

  // Code highlight color, read more [docs](https://binaryify.github.io/OneDark-Pro/#/?id=highlight-color-custom)
  "oneDarkPro.color": {
    "chalky": "",
    "coral": "",
    "dark": "",
    "error": "",
    "fountainBlue": "",
    "green": "",
    "invalid": "",
    "lightDark": "",
    "lightWhite": "",
    "malibu": "",
    "purple": "",
    "whiskey": "",
    "deepRed": ""
  },

  // 设置不同编辑器主题
  "oneDarkPro.editorTheme": "One Dark Pro",

  // 设置部分代码为斜体
  "oneDarkPro.italic": true,

  // 使用内置的 Markdown 样式
  "oneDarkPro.markdownStyle": true,

  // 设置色彩为 vivid
  "oneDarkPro.vivid": false,

}